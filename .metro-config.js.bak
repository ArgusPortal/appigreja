// Learn more https://docs.expo.io/guides/customizing-metro
const { getDefaultConfig } = require('expo/metro-config');
const path = require('path');
const { FileStore } = require('metro-cache');
const fs = require('fs');
const crypto = require('crypto');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  // [Web-only]: Enables CSS support in Metro.
  isCSSEnabled: true,
});

// Fix the Metro cache - sometimes cache issues cause missing module errors
config.cacheStores = [
  new FileStore({ root: path.join(__dirname, '.metro-cache') }),
];

// Fun√ß√£o helper para calcular SHA-1 manualmente
function calculateSHA1(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      console.error(`Arquivo n√£o encontrado: ${filePath}`);
      return null;
    }
    const content = fs.readFileSync(filePath);
    const hash = crypto.createHash('sha1');
    hash.update(content);
    return hash.digest('hex');
  } catch (e) {
    console.error(`Erro ao calcular SHA-1 para ${filePath}:`, e);
    console.log('Retornando SHA-1 fallback');
    // Fallback SHA-1 para evitar erros
    return 'fallback-sha1-' + Date.now().toString(36);
  }
}

// Monkeypatch mais robusto do m√©todo getSha1 do Metro
try {
  const DependencyGraph = require('metro/src/node-haste/DependencyGraph');
  const originalGetSha1 = DependencyGraph.getSha1;

  // Armazenar SHA-1 calculados em um cache para evitar rec√°lculo
  const sha1Cache = new Map();

  DependencyGraph.getSha1 = function(filePath) {
    try {
      // Verificar se j√° calculamos o SHA-1 antes
      if (sha1Cache.has(filePath)) {
        return sha1Cache.get(filePath);
      }
      
      // Log para debug
      console.log(`üîç Calculando SHA-1 para: ${filePath}`);
      
      // Para o entry.js, sempre calcular manualmente
      if (filePath.endsWith('entry.js') || filePath.includes('entry.js')) {
        console.log(`üìå Usando c√°lculo manual para arquivo cr√≠tico: ${filePath}`);
        
        // Verificar exist√™ncia do arquivo
        if (!fs.existsSync(filePath)) {
          console.error(`‚ö†Ô∏è Arquivo entry.js n√£o encontrado: ${filePath}`);
          // Tentar criar o arquivo novamente
          const entryDirPath = path.dirname(filePath);
          if (fs.existsSync(entryDirPath)) {
            const entryContent = `/**
 * Arquivo de entrada personalizado que serve como ponte para o expo-router
 * Recriado por metro.config.js em ${new Date().toISOString()}
 */

// Redirecionando para o entry do expo-router
module.exports = require('expo-router/entry-classic');

// Importamos diretamente desta forma para garantir que o Metro possa resolver o m√≥dulo
require('expo-router');
`;
            try {
              fs.writeFileSync(filePath, entryContent);
              console.log(`‚úÖ Arquivo ${filePath} criado automaticamente`);
            } catch (writeError) {
              console.error(`‚ùå Erro ao criar ${filePath}:`, writeError);
            }
          }
        }
        
        // Calcular SHA-1 manualmente e colocar no cache
        const sha1 = calculateSHA1(filePath);
        if (sha1) {
          sha1Cache.set(filePath, sha1);
          console.log(`‚úÖ SHA-1 calculado com sucesso para ${filePath}: ${sha1}`);
          return sha1;
        }
      }
      
      // Para qualquer outro arquivo, usar o m√©todo original
      try {
        const originalSha1 = originalGetSha1.call(this, filePath);
        sha1Cache.set(filePath, originalSha1);
        return originalSha1;
      } catch (originalError) {
        console.warn(`‚ö†Ô∏è Erro no c√°lculo original de SHA-1 para ${filePath}: ${originalError.message}`);
        
        // Tentar c√°lculo manual como fallback
        console.log(`üîÑ Tentando fallback para ${filePath}`);
        const fallbackSha1 = calculateSHA1(filePath);
        
        if (fallbackSha1) {
          sha1Cache.set(filePath, fallbackSha1);
          return fallbackSha1;
        }
        
        // √öltimo recurso: gerar um hash baseado no caminho do arquivo
        const lastResortSha1 = crypto.createHash('sha1').update(filePath + Date.now().toString()).digest('hex');
        sha1Cache.set(filePath, lastResortSha1);
        return lastResortSha1;
      }
    } catch (e) {
      console.error(`‚ùå Erro fatal no c√°lculo de SHA-1: ${e.message}`);
      // Use um valor hardcoded como √∫ltima op√ß√£o
      return 'fallback-sha1-' + Date.now().toString(36);
    }
  };
} catch (e) {
  console.error('‚ùå Erro ao substituir m√©todo getSha1 do Metro:', e);
}

// Explicitamente incluir o diret√≥rio raiz do projeto
config.watchFolders = [
  __dirname, // Root directory explicitly
  path.resolve(__dirname, 'node_modules'),
  path.resolve(__dirname, '.'), // Explicitamente adicionar o diret√≥rio atual
  // Incluir m√≥dulos importantes
  path.resolve(__dirname, 'node_modules/react-native'),
  path.resolve(__dirname, 'node_modules/expo'),
  path.resolve(__dirname, 'node_modules/expo-linking'),
  path.resolve(__dirname, 'node_modules/expo-router'),
  path.resolve(__dirname, 'shims'),
];

// Certifique-se de que o projectRoot est√° corretamente configurado
config.projectRoot = __dirname;

// Garantir que o entry.js n√£o seja exclu√≠do da compila√ß√£o
if (config.resolver.blockList) {
  // Se blockList for um array, remover qualquer pattern que bloqueie entry.js
  if (Array.isArray(config.resolver.blockList)) {
    config.resolver.blockList = config.resolver.blockList.filter(
      pattern => !String(pattern).includes('entry.js')
    );
  } else {
    // Se for um padr√£o RegExp, criar novo array mantendo o padr√£o original,
    // mas garantindo que entry.js n√£o seja bloqueado
    config.resolver.blockList = [config.resolver.blockList];
  }
} else {
  // Se n√£o existir, criar um array vazio
  config.resolver.blockList = [];
}

// Configurar flags para resolver problemas de cache e hash
config.resetCache = true; // For√ßar reset do cache para resolver problemas de SHA-1
config.cacheVersion = Date.now().toString(); // Usar timestamp para garantir nova vers√£o de cache

// Permitir todos os tipos de arquivos
config.resolver.assetExts.push('ttf');
config.resolver.sourceExts = [
  'js', 'jsx', 'ts', 'tsx', 'json', 'svg', 
  'native.js', 'native.jsx', 'native.ts', 'native.tsx',
  'entry.js', // Adicionar entry.js explicitamente
  'mjs', 'cjs' // Adicionar outros formatos JavaScript modernos
];

// Otimiza√ß√µes para Android
config.transformer.getTransformOptions = async () => ({
  transform: {
    experimentalImportSupport: false,
    inlineRequires: true,
  },
});

// Aumentar o timeout do worker e reduzir o n√∫mero para evitar problemas
config.maxWorkers = 2; // Reduzir para apenas 2 workers
config.transformerPath = require.resolve('metro-transform-worker');

// Adicione verifica√ß√£o expl√≠cita para o entry.js
const entryJsPath = path.resolve(__dirname, 'entry.js');
console.log(`üìã Verificando arquivo cr√≠tico: ${entryJsPath}`);

// Se o entry.js n√£o existir ou for muito pequeno, recri√°-lo
try {
  let needsRecreation = false;
  
  if (!fs.existsSync(entryJsPath)) {
    console.log('‚ö†Ô∏è Arquivo entry.js n√£o encontrado, ser√° criado');
    needsRecreation = true;
  } else {
    const stats = fs.statSync(entryJsPath);
    console.log(`üìä Tamanho do entry.js: ${stats.size} bytes`);
    
    if (stats.size < 100) {
      console.log('‚ö†Ô∏è Arquivo entry.js muito pequeno, ser√° recriado');
      needsRecreation = true;
    }
    
    // Verificar conte√∫do
    const content = fs.readFileSync(entryJsPath, 'utf8');
    if (!content.includes('expo-router/entry-classic') || !content.includes('require(\'expo-router\')')) {
      console.log('‚ö†Ô∏è Conte√∫do do entry.js incorreto, ser√° recriado');
      needsRecreation = true;
    }
  }
  
  if (needsRecreation) {
    const entryContent = `/**
 * Arquivo de entrada personalizado que serve como ponte para o expo-router
 * Criado pelo metro.config.js em ${new Date().toISOString()}
 */

// Redirecionando para o entry do expo-router
module.exports = require('expo-router/entry-classic');

// Importamos diretamente desta forma para garantir que o Metro possa resolver o m√≥dulo
require('expo-router');
`;
    // Remover se existir para garantir que possamos recriar sem problemas
    if (fs.existsSync(entryJsPath)) {
      fs.unlinkSync(entryJsPath);
    }
    
    fs.writeFileSync(entryJsPath, entryContent, { mode: 0o666 }); // Permiss√µes amplas
    console.log('‚úÖ entry.js recriado com sucesso');
    
    // Calcular o SHA-1
    const hash = crypto.createHash('sha1');
    hash.update(entryContent);
    const sha1 = hash.digest('hex');
    console.log(`üìä SHA-1 do novo entry.js: ${sha1}`);
  }
} catch (e) {
  console.error('‚ùå Erro ao verificar/recriar entry.js:', e);
}

// Resolver o entry.js explicitamente
config.resolver.extraNodeModules = {
  ...config.resolver.extraNodeModules,
  // Mapear entry.js para o arquivo local
  'entry.js': entryJsPath,
  './entry.js': entryJsPath,
  // Mapear expo-router/entry para os arquivos corretos
  'expo-router/entry': fs.existsSync(path.resolve(__dirname, 'node_modules/expo-router/entry.js')) 
    ? path.resolve(__dirname, 'node_modules/expo-router/entry.js') 
    : entryJsPath,
  'expo-router': path.resolve(__dirname, 'node_modules/expo-router'),
};

// Implementa√ß√£o do resolvedor customizado
config.resolver.resolveRequest = function customResolveRequest(context, moduleName, platform) {
  // Fun√ß√£o para verificar se um arquivo existe
  const fileExists = (file) => {
    try {
      return fs.statSync(file).isFile();
    } catch {
      return false;
    }
  };
  
  // Removendo o log excessivo que pode sobrecarregar o console
  if (moduleName.includes('entry.js') || moduleName.includes('expo-router/entry')) {
    console.log(`üì¶ Resolvendo: ${moduleName}`);
  }
  
  // Caso 1: Resolu√ß√£o direta do entry.js
  if (moduleName === 'entry.js' || moduleName === './entry.js') {
    console.log(`üì¶ Resolvendo entry.js para ${entryJsPath}`);
    return {
      filePath: entryJsPath,
      type: 'sourceFile',
    };
  }
  
  // Caso 2: Tratamento especial para expo-router/entry
  if (moduleName === 'expo-router/entry' || moduleName === 'expo-router/entry.js') {
    // Verificar se existe em node_modules
    const expoRouterEntryPath = path.resolve(__dirname, 'node_modules/expo-router/entry.js');
    
    if (fileExists(expoRouterEntryPath)) {
      console.log(`üì¶ Resolvendo ${moduleName} para ${expoRouterEntryPath}`);
      return {
        filePath: expoRouterEntryPath,
        type: 'sourceFile',
      };
    } else {
      // Se n√£o existe, usar o entry.js local
      console.log(`üì¶ Resolvendo ${moduleName} para entry.js local: ${entryJsPath}`);
      return {
        filePath: entryJsPath,
        type: 'sourceFile',
      };
    }
  }
  
  // Caso 3: Tratamento especial para expo-router/_error
  if (moduleName.includes('expo-router/_error')) {
    const expoRouterPath = path.resolve(__dirname, 'node_modules/expo-router');
    
    // Procurar por arquivos de erro no expo-router
    const possibleErrorPaths = [
      path.join(expoRouterPath, '_error.js'),
      path.join(expoRouterPath, 'build', '_error.js'),
      path.join(expoRouterPath, 'src', '_error.js')
    ];
    
    for (const errorPath of possibleErrorPaths) {
      if (fileExists(errorPath)) {
        console.log(`üì¶ Resolvendo ${moduleName} para ${errorPath}`);
        return {
          filePath: errorPath,
          type: 'sourceFile',
        };
      }
    }
    
    // Se n√£o encontrar, criar um arquivo de erro gen√©rico em shims
    const errorShimPath = path.join(__dirname, 'shims', 'expo-router-error.js');
    const shimDir = path.dirname(errorShimPath);
    
    if (!fs.existsSync(shimDir)) {
      fs.mkdirSync(shimDir, { recursive: true });
    }
    
    if (!fs.existsSync(errorShimPath)) {
      const errorContent = `/**
 * Fallback para expo-router/_error
 * Criado automaticamente pelo resolver do Metro
 */
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function ErrorPage({error}) {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Ocorreu um erro</Text>
      <Text style={styles.message}>{error?.message || 'Erro desconhecido'}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
    backgroundColor: '#121212',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 10,
  },
  message: {
    fontSize: 16,
    color: '#888',
    textAlign: 'center',
  },
});
`;
      fs.writeFileSync(errorShimPath, errorContent);
      console.log(`üì¶ Criado shim para ${moduleName} em ${errorShimPath}`);
    }
    
    return {
      filePath: errorShimPath,
      type: 'sourceFile',
    };
  }
  
  // Caso 4: Verificar em extraNodeModules se existe um mapeamento direto
  const extraNodeModules = config.resolver.extraNodeModules || {};
  if (extraNodeModules[moduleName]) {
    const mappedPath = extraNodeModules[moduleName];
    if (fileExists(mappedPath)) {
      return {
        filePath: mappedPath,
        type: 'sourceFile',
      };
    }
  }
  
  // IMPORTANTE: Metro espera um objeto com uma propriedade 'type' OU undefined (n√£o null)
  // Retornar undefined permite que o Metro use seu pr√≥prio algoritmo de resolu√ß√£o
  return undefined; // Modificado de null para undefined
};

// Log de configura√ß√£o
console.log('üìã Configura√ß√£o do Metro conclu√≠da.');
console.log(`üìã Diret√≥rio do projeto: ${__dirname}`);
console.log(`üìã entry.js: ${entryJsPath}`);

module.exports = config;
