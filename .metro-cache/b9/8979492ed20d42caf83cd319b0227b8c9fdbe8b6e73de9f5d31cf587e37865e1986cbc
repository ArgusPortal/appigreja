{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":521,"column":44,"index":18033}}],"key":"5y7e5+zC7teYEEC6niD9f5zII1M="}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":49,"index":174},"end":{"line":7,"column":80,"index":205}}],"key":"14QBo/6I2jfYu7Ct29OWBvp5ENM="}},{"name":"query-string","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":42,"index":250},"end":{"line":8,"column":65,"index":273}}],"key":"CQ4f6+ZdkmuRCkqw6zIINc/cka0="}},{"name":"./validatePathConfig.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":26,"index":522},"end":{"line":13,"column":60,"index":556}}],"key":"XXyPbgw7BQ4s5X/Hs9Zl3De2oag="}},{"name":"./isArrayEqual.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":20,"index":466},"end":{"line":12,"column":48,"index":494}}],"key":"J42REN97/MZDKzfzDiREOCKQEZg="}},{"name":"./arrayStartsWith.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":23,"index":299},"end":{"line":9,"column":54,"index":330}},{"start":{"line":9,"column":23,"index":299},"end":{"line":9,"column":54,"index":330}},{"start":{"line":9,"column":23,"index":299},"end":{"line":9,"column":54,"index":330}}],"key":"S2bIb7cMQ7Oz4fM/uZJVzMgsFa4="}},{"name":"./getPatternParts.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":23,"index":413},"end":{"line":11,"column":54,"index":444}}],"key":"x373vX1U7UCQUMl5g8AN3pEqZu0="}},{"name":"./findFocusedRoute.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":24,"index":356},"end":{"line":10,"column":56,"index":388}}],"key":"Qp+0bCmUCZMx8iRtqmi1ggFg6FA="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getStateFromPath = getStateFromPath;\n  var _escapeStringRegexp = _interopRequireDefault(require(_dependencyMap[1], \"escape-string-regexp\"));\n  var queryString = _interopRequireWildcard(require(_dependencyMap[2], \"query-string\"));\n  function _getRequireWildcardCache(e) {\n    if (\"function\" != typeof WeakMap) return null;\n    var r = new WeakMap(),\n      t = new WeakMap();\n    return (_getRequireWildcardCache = function (e) {\n      return e ? t : r;\n    })(e);\n  }\n  function _interopRequireWildcard(e, r) {\n    if (!r && e && e.__esModule) return e;\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n      default: e\n    };\n    var t = _getRequireWildcardCache(r);\n    if (t && t.has(e)) return t.get(e);\n    var n = {\n        __proto__: null\n      },\n      a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n    }\n    return n.default = e, t && t.set(e, n), n;\n  }\n  function _interopRequireDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var _getConfigResources = getConfigResources(options),\n      initialRoutes = _getConfigResources.initialRoutes,\n      configs = _getConfigResources.configs;\n    var screens = options?.screens;\n    var remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    var prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n    if (prefix) {\n      // Make sure there is a trailing slash\n      var normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(segment => {\n        var name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(path, _routes, initialRoutes);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      var match = configs.find(config => config.segments.join('/') === '');\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  var cachedConfigResources = new WeakMap();\n  function getConfigResources(options) {\n    if (!options) return prepareConfigResources();\n    var cached = cachedConfigResources.get(options);\n    if (cached) return cached;\n    var resources = prepareConfigResources(options);\n    cachedConfigResources.set(options, resources);\n    return resources;\n  }\n  function prepareConfigResources(options) {\n    if (options) {\n      (0, require(_dependencyMap[3], \"./validatePathConfig.js\").validatePathConfig)(options);\n    }\n    var initialRoutes = getInitialRoutes(options);\n    var configs = getSortedNormalizedConfigs(initialRoutes, options?.screens);\n    checkForDuplicatedConfigs(configs);\n    var configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    var initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getSortedNormalizedConfigs(initialRoutes) {\n    var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, initialRoutes, [], [], []))).sort((a, b) => {\n      // Sort config from most specific to least specific:\n      // - more segments\n      // - static segments\n      // - params with regex\n      // - regular params\n      // - wildcard\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if ((0, require(_dependencyMap[4], \"./isArrayEqual.js\").isArrayEqual)(a.segments, b.segments)) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if ((0, require(_dependencyMap[5], \"./arrayStartsWith.js\").arrayStartsWith)(a.segments, b.segments)) {\n        return -1;\n      }\n      if ((0, require(_dependencyMap[5], \"./arrayStartsWith.js\").arrayStartsWith)(b.segments, a.segments)) {\n        return 1;\n      }\n      for (var i = 0; i < Math.max(a.segments.length, b.segments.length); i++) {\n        // if b is longer, b gets higher priority\n        if (a.segments[i] == null) {\n          return 1;\n        }\n\n        // if a is longer, a gets higher priority\n        if (b.segments[i] == null) {\n          return -1;\n        }\n        var aWildCard = a.segments[i] === '*';\n        var bWildCard = b.segments[i] === '*';\n        var aParam = a.segments[i].startsWith(':');\n        var bParam = b.segments[i].startsWith(':');\n        var aRegex = aParam && a.segments[i].includes('(');\n        var bRegex = bParam && b.segments[i].includes('(');\n\n        // if both are wildcard or regex, we compare next component\n        if (aWildCard && bWildCard || aRegex && bRegex) {\n          continue;\n        }\n\n        // if only a is wildcard, b gets higher priority\n        if (aWildCard && !bWildCard) {\n          return 1;\n        }\n\n        // if only b is wildcard, a gets higher priority\n        if (bWildCard && !aWildCard) {\n          return -1;\n        }\n\n        // If only a has a param, b gets higher priority\n        if (aParam && !bParam) {\n          return 1;\n        }\n\n        // If only b has a param, a gets higher priority\n        if (bParam && !aParam) {\n          return -1;\n        }\n\n        // if only a has regex, a gets higher priority\n        if (aRegex && !bRegex) {\n          return -1;\n        }\n\n        // if only b has regex, b gets higher priority\n        if (bRegex && !aRegex) {\n          return 1;\n        }\n      }\n      return a.segments.length - b.segments.length;\n    });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      var pattern = config.segments.join('/');\n      if (acc[pattern]) {\n        var a = acc[pattern].routeNames;\n        var b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    }));\n  }\n  var matchAgainstConfigs = (remaining, configs) => {\n    var routes;\n    var remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function (config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          routes = config.routeNames.map(routeName => {\n            var routeConfig = configs.find(c => {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === routeName && (0, require(_dependencyMap[5], \"./arrayStartsWith.js\").arrayStartsWith)(config.segments, c.segments);\n            });\n            var params = routeConfig && match.groups ? Object.fromEntries(Object.entries(match.groups).map(_ref => {\n              var _ref2 = _slicedToArray(_ref, 2),\n                key = _ref2[0],\n                value = _ref2[1];\n              var index = Number(key.replace('param_', ''));\n              var param = routeConfig.params.find(it => it.index === index);\n              if (param?.screen === routeName && param?.name) {\n                return [param.name, value];\n              }\n              return null;\n            }).filter(it => it != null).map(_ref3 => {\n              var _ref4 = _slicedToArray(_ref3, 2),\n                key = _ref4[0],\n                value = _ref4[1];\n              if (value == null) {\n                return [key, undefined];\n              }\n              var decoded = decodeURIComponent(value);\n              var parsed = routeConfig.parse?.[key] ? routeConfig.parse[key](decoded) : decoded;\n              return [key, parsed];\n            })) : undefined;\n            if (params && Object.keys(params).length) {\n              return {\n                name: routeName,\n                params\n              };\n            }\n            return {\n              name: routeName\n            };\n          });\n          remainingPath = remainingPath.replace(match[0], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  var createNormalizedConfigs = (screen, routeConfig, initials, paths, parentScreens, routeNames) => {\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      paths.push({\n        screen,\n        path: config\n      });\n      configs.push(createConfigItem(screen, [...routeNames], [...paths]));\n    } else if (typeof config === 'object') {\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path == null) {\n          throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. \\`path: ''\\`.`);\n        }\n\n        // We should add alias configs after the main config\n        // So unless they are more specific, main config will be matched first\n        var aliasConfigs = [];\n        if (config.alias) {\n          for (var alias of config.alias) {\n            if (typeof alias === 'string') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], [...paths, {\n                screen,\n                path: alias\n              }], config.parse));\n            } else if (typeof alias === 'object') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], alias.exact ? [{\n                screen,\n                path: alias.path\n              }] : [...paths, {\n                screen,\n                path: alias.path\n              }], alias.parse));\n            }\n          }\n        }\n        if (config.exact) {\n          // If it's an exact path, we don't need to keep track of the parent screens\n          // So we can clear it\n          paths.length = 0;\n        }\n        paths.push({\n          screen,\n          path: config.path\n        });\n        configs.push(createConfigItem(screen, [...routeNames], [...paths], config.parse));\n        configs.push(...aliasConfigs);\n      }\n      if (typeof config !== 'string' && typeof config.path !== 'string' && config.alias?.length) {\n        throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified in order to use 'alias'.`);\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          var result = createNormalizedConfigs(nestedConfig, config.screens, initials, [...paths], [...parentScreens], routeNames);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = (screen, routeNames, paths, parse) => {\n    var parts = [];\n\n    // Parse the path string into parts for easier matching\n    var _loop2 = function (_screen) {\n      parts.push(...(0, require(_dependencyMap[6], \"./getPatternParts.js\").getPatternParts)(path).map(part => ({\n        ...part,\n        screen: _screen\n      })));\n    };\n    for (var _ref5 of paths) {\n      var _screen = _ref5.screen;\n      var path = _ref5.path;\n      _loop2(_screen);\n    }\n    var regex = parts.length ? new RegExp(`^(${parts.map((it, i) => {\n      if (it.param) {\n        var reg = it.regex || '[^/]+';\n        return `(((?<param_${i}>${reg})\\\\/)${it.optional ? '?' : ''})`;\n      }\n      return `${it.segment === '*' ? '.*' : (0, _escapeStringRegexp.default)(it.segment)}\\\\/`;\n    }).join('')})$`) : undefined;\n    var segments = parts.map(it => it.segment);\n    var params = parts.map((it, i) => it.param ? {\n      index: i,\n      screen: it.screen,\n      name: it.param\n    } : null).filter(it => it != null);\n    return {\n      screen,\n      regex,\n      segments,\n      params,\n      routeNames,\n      parse\n    };\n  };\n  var findParseConfigForRoute = (routeName, flatConfig) => {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    var state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, require(_dependencyMap[7], \"./findFocusedRoute.js\").findFocusedRoute)(state);\n    route.path = path.replace(/\\/$/, '');\n    var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = {\n        ...route.params,\n        ...params\n      };\n    }\n    return state;\n  };\n  var parseQueryParams = (path, parseConfig) => {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(name => {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":558,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[5,2,3,0,"Object"],[5,8,3,6],[5,9,3,7,"defineProperty"],[5,23,3,21],[5,24,3,22,"exports"],[5,31,3,29],[5,33,3,31],[5,45,3,43],[5,47,3,45],[6,4,4,2,"value"],[6,9,4,7],[6,11,4,9],[7,2,5,0],[7,3,5,1],[7,4,5,2],[8,2,6,0,"exports"],[8,9,6,7],[8,10,6,8,"getStateFromPath"],[8,26,6,24],[8,29,6,27,"getStateFromPath"],[8,45,6,43],[9,2,7,0],[9,6,7,4,"_escapeStringRegexp"],[9,25,7,23],[9,28,7,26,"_interopRequireDefault"],[9,50,7,48],[9,51,7,49,"require"],[9,58,7,56],[9,59,7,56,"_dependencyMap"],[9,73,7,56],[9,100,7,79],[9,101,7,80],[9,102,7,81],[10,2,8,0],[10,6,8,4,"queryString"],[10,17,8,15],[10,20,8,18,"_interopRequireWildcard"],[10,43,8,41],[10,44,8,42,"require"],[10,51,8,49],[10,52,8,49,"_dependencyMap"],[10,66,8,49],[10,85,8,64],[10,86,8,65],[10,87,8,66],[11,2,14,0],[11,11,14,9,"_getRequireWildcardCache"],[11,35,14,33,"_getRequireWildcardCache"],[11,36,14,34,"e"],[11,37,14,35],[11,39,14,37],[12,4,14,39],[12,8,14,43],[12,18,14,53],[12,22,14,57],[12,29,14,64,"WeakMap"],[12,36,14,71],[12,38,14,73],[12,45,14,80],[12,49,14,84],[13,4,14,86],[13,8,14,90,"r"],[13,9,14,91],[13,12,14,94],[13,16,14,98,"WeakMap"],[13,23,14,105],[13,24,14,106],[13,25,14,107],[14,6,14,109,"t"],[14,7,14,110],[14,10,14,113],[14,14,14,117,"WeakMap"],[14,21,14,124],[14,22,14,125],[14,23,14,126],[15,4,14,128],[15,11,14,135],[15,12,14,136,"_getRequireWildcardCache"],[15,36,14,160],[15,39,14,163],[15,48,14,163,"_getRequireWildcardCache"],[15,49,14,173,"e"],[15,50,14,174],[15,52,14,176],[16,6,14,178],[16,13,14,185,"e"],[16,14,14,186],[16,17,14,189,"t"],[16,18,14,190],[16,21,14,193,"r"],[16,22,14,194],[17,4,14,196],[17,5,14,197],[17,7,14,199,"e"],[17,8,14,200],[17,9,14,201],[18,2,14,203],[19,2,15,0],[19,11,15,9,"_interopRequireWildcard"],[19,34,15,32,"_interopRequireWildcard"],[19,35,15,33,"e"],[19,36,15,34],[19,38,15,36,"r"],[19,39,15,37],[19,41,15,39],[20,4,15,41],[20,8,15,45],[20,9,15,46,"r"],[20,10,15,47],[20,14,15,51,"e"],[20,15,15,52],[20,19,15,56,"e"],[20,20,15,57],[20,21,15,58,"__esModule"],[20,31,15,68],[20,33,15,70],[20,40,15,77,"e"],[20,41,15,78],[21,4,15,80],[21,8,15,84],[21,12,15,88],[21,17,15,93,"e"],[21,18,15,94],[21,22,15,98],[21,30,15,106],[21,34,15,110],[21,41,15,117,"e"],[21,42,15,118],[21,46,15,122],[21,56,15,132],[21,60,15,136],[21,67,15,143,"e"],[21,68,15,144],[21,70,15,146],[21,77,15,153],[22,6,15,155,"default"],[22,13,15,162],[22,15,15,164,"e"],[23,4,15,166],[23,5,15,167],[24,4,15,169],[24,8,15,173,"t"],[24,9,15,174],[24,12,15,177,"_getRequireWildcardCache"],[24,36,15,201],[24,37,15,202,"r"],[24,38,15,203],[24,39,15,204],[25,4,15,206],[25,8,15,210,"t"],[25,9,15,211],[25,13,15,215,"t"],[25,14,15,216],[25,15,15,217,"has"],[25,18,15,220],[25,19,15,221,"e"],[25,20,15,222],[25,21,15,223],[25,23,15,225],[25,30,15,232,"t"],[25,31,15,233],[25,32,15,234,"get"],[25,35,15,237],[25,36,15,238,"e"],[25,37,15,239],[25,38,15,240],[26,4,15,242],[26,8,15,246,"n"],[26,9,15,247],[26,12,15,250],[27,8,15,252,"__proto__"],[27,17,15,261],[27,19,15,263],[28,6,15,268],[28,7,15,269],[29,6,15,271,"a"],[29,7,15,272],[29,10,15,275,"Object"],[29,16,15,281],[29,17,15,282,"defineProperty"],[29,31,15,296],[29,35,15,300,"Object"],[29,41,15,306],[29,42,15,307,"getOwnPropertyDescriptor"],[29,66,15,331],[30,4,15,333],[30,9,15,338],[30,13,15,342,"u"],[30,14,15,343],[30,18,15,347,"e"],[30,19,15,348],[30,21,15,350],[30,25,15,354],[30,34,15,363],[30,39,15,368,"u"],[30,40,15,369],[30,44,15,373],[30,45,15,374],[30,46,15,375],[30,47,15,376,"hasOwnProperty"],[30,61,15,390],[30,62,15,391,"call"],[30,66,15,395],[30,67,15,396,"e"],[30,68,15,397],[30,70,15,399,"u"],[30,71,15,400],[30,72,15,401],[30,74,15,403],[31,6,15,405],[31,10,15,409,"i"],[31,11,15,410],[31,14,15,413,"a"],[31,15,15,414],[31,18,15,417,"Object"],[31,24,15,423],[31,25,15,424,"getOwnPropertyDescriptor"],[31,49,15,448],[31,50,15,449,"e"],[31,51,15,450],[31,53,15,452,"u"],[31,54,15,453],[31,55,15,454],[31,58,15,457],[31,62,15,461],[32,6,15,463,"i"],[32,7,15,464],[32,12,15,469,"i"],[32,13,15,470],[32,14,15,471,"get"],[32,17,15,474],[32,21,15,478,"i"],[32,22,15,479],[32,23,15,480,"set"],[32,26,15,483],[32,27,15,484],[32,30,15,487,"Object"],[32,36,15,493],[32,37,15,494,"defineProperty"],[32,51,15,508],[32,52,15,509,"n"],[32,53,15,510],[32,55,15,512,"u"],[32,56,15,513],[32,58,15,515,"i"],[32,59,15,516],[32,60,15,517],[32,63,15,520,"n"],[32,64,15,521],[32,65,15,522,"u"],[32,66,15,523],[32,67,15,524],[32,70,15,527,"e"],[32,71,15,528],[32,72,15,529,"u"],[32,73,15,530],[32,74,15,531],[33,4,15,533],[34,4,15,535],[34,11,15,542,"n"],[34,12,15,543],[34,13,15,544,"default"],[34,20,15,551],[34,23,15,554,"e"],[34,24,15,555],[34,26,15,557,"t"],[34,27,15,558],[34,31,15,562,"t"],[34,32,15,563],[34,33,15,564,"set"],[34,36,15,567],[34,37,15,568,"e"],[34,38,15,569],[34,40,15,571,"n"],[34,41,15,572],[34,42,15,573],[34,44,15,575,"n"],[34,45,15,576],[35,2,15,578],[36,2,16,0],[36,11,16,9,"_interopRequireDefault"],[36,33,16,31,"_interopRequireDefault"],[36,34,16,32,"e"],[36,35,16,33],[36,37,16,35],[37,4,16,37],[37,11,16,44,"e"],[37,12,16,45],[37,16,16,49,"e"],[37,17,16,50],[37,18,16,51,"__esModule"],[37,28,16,61],[37,31,16,64,"e"],[37,32,16,65],[37,35,16,68],[38,6,16,70,"default"],[38,13,16,77],[38,15,16,79,"e"],[39,4,16,81],[39,5,16,82],[40,2,16,84],[41,2,17,0],[42,0,18,0],[43,0,19,0],[44,0,20,0],[45,0,21,0],[46,0,22,0],[47,0,23,0],[48,0,24,0],[49,0,25,0],[50,0,26,0],[51,0,27,0],[52,0,28,0],[53,0,29,0],[54,0,30,0],[55,0,31,0],[56,0,32,0],[57,0,33,0],[58,0,34,0],[59,0,35,0],[60,0,36,0],[61,0,37,0],[62,2,38,0],[62,11,38,9,"getStateFromPath"],[62,27,38,25,"getStateFromPath"],[62,28,38,26,"path"],[62,32,38,30],[62,34,38,32,"options"],[62,41,38,39],[62,43,38,41],[63,4,39,2],[63,8,39,2,"_getConfigResources"],[63,27,39,2],[63,30,42,6,"getConfigResources"],[63,48,42,24],[63,49,42,25,"options"],[63,56,42,32],[63,57,42,33],[64,6,40,4,"initialRoutes"],[64,19,40,17],[64,22,40,17,"_getConfigResources"],[64,41,40,17],[64,42,40,4,"initialRoutes"],[64,55,40,17],[65,6,41,4,"configs"],[65,13,41,11],[65,16,41,11,"_getConfigResources"],[65,35,41,11],[65,36,41,4,"configs"],[65,43,41,11],[66,4,43,2],[66,8,43,8,"screens"],[66,15,43,15],[66,18,43,18,"options"],[66,25,43,25],[66,27,43,27,"screens"],[66,34,43,34],[67,4,44,2],[67,8,44,6,"remaining"],[67,17,44,15],[67,20,44,18,"path"],[67,24,44,22],[67,25,44,23,"replace"],[67,32,44,30],[67,33,44,31],[67,39,44,37],[67,41,44,39],[67,44,44,42],[67,45,44,43],[67,46,44,44],[68,4,44,44],[68,5,45,3,"replace"],[68,12,45,10],[68,13,45,11],[68,18,45,16],[68,20,45,18],[68,22,45,20],[68,23,45,21],[68,24,45,22],[69,4,45,22],[69,5,46,3,"replace"],[69,12,46,10],[69,13,46,11],[69,20,46,18],[69,22,46,20],[69,24,46,22],[69,25,46,23],[69,26,46,24],[69,27,46,25],[71,4,48,2],[72,4,49,2,"remaining"],[72,13,49,11],[72,16,49,14,"remaining"],[72,25,49,23],[72,26,49,24,"endsWith"],[72,34,49,32],[72,35,49,33],[72,38,49,36],[72,39,49,37],[72,42,49,40,"remaining"],[72,51,49,49],[72,54,49,52],[72,57,49,55,"remaining"],[72,66,49,64],[72,69,49,67],[73,4,50,2],[73,8,50,8,"prefix"],[73,14,50,14],[73,17,50,17,"options"],[73,24,50,24],[73,26,50,26,"path"],[73,30,50,30],[73,32,50,32,"replace"],[73,39,50,39],[73,40,50,40],[73,45,50,45],[73,47,50,47],[73,49,50,49],[73,50,50,50],[73,51,50,51],[73,52,50,52],[75,4,52,2],[75,8,52,6,"prefix"],[75,14,52,12],[75,16,52,14],[76,6,53,4],[77,6,54,4],[77,10,54,10,"normalizedPrefix"],[77,26,54,26],[77,29,54,29,"prefix"],[77,35,54,35],[77,36,54,36,"endsWith"],[77,44,54,44],[77,45,54,45],[77,48,54,48],[77,49,54,49],[77,52,54,52,"prefix"],[77,58,54,58],[77,61,54,61],[77,64,54,64,"prefix"],[77,70,54,70],[77,73,54,73],[79,6,56,4],[80,6,57,4],[80,10,57,8],[80,11,57,9,"remaining"],[80,20,57,18],[80,21,57,19,"startsWith"],[80,31,57,29],[80,32,57,30,"normalizedPrefix"],[80,48,57,46],[80,49,57,47],[80,51,57,49],[81,8,58,6],[81,15,58,13,"undefined"],[81,24,58,22],[82,6,59,4],[84,6,61,4],[85,6,62,4,"remaining"],[85,15,62,13],[85,18,62,16,"remaining"],[85,27,62,25],[85,28,62,26,"replace"],[85,35,62,33],[85,36,62,34,"normalizedPrefix"],[85,52,62,50],[85,54,62,52],[85,56,62,54],[85,57,62,55],[86,4,63,2],[87,4,64,2],[87,8,64,6,"screens"],[87,15,64,13],[87,20,64,18,"undefined"],[87,29,64,27],[87,31,64,29],[88,6,65,4],[89,6,66,4],[89,10,66,10,"routes"],[89,17,66,16],[89,20,66,19,"remaining"],[89,29,66,28],[89,30,66,29,"split"],[89,35,66,34],[89,36,66,35],[89,39,66,38],[89,40,66,39],[89,41,66,40,"filter"],[89,47,66,46],[89,48,66,47,"Boolean"],[89,55,66,54],[89,56,66,55],[89,57,66,56,"map"],[89,60,66,59],[89,61,66,60,"segment"],[89,68,66,67],[89,72,66,71],[90,8,67,6],[90,12,67,12,"name"],[90,16,67,16],[90,19,67,19,"decodeURIComponent"],[90,37,67,37],[90,38,67,38,"segment"],[90,45,67,45],[90,46,67,46],[91,8,68,6],[91,15,68,13],[92,10,69,8,"name"],[93,8,70,6],[93,9,70,7],[94,6,71,4],[94,7,71,5],[94,8,71,6],[95,6,72,4],[95,10,72,8,"routes"],[95,17,72,14],[95,18,72,15,"length"],[95,24,72,21],[95,26,72,23],[96,8,73,6],[96,15,73,13,"createNestedStateObject"],[96,38,73,36],[96,39,73,37,"path"],[96,43,73,41],[96,45,73,43,"routes"],[96,52,73,49],[96,54,73,51,"initialRoutes"],[96,67,73,64],[96,68,73,65],[97,6,74,4],[98,6,75,4],[98,13,75,11,"undefined"],[98,22,75,20],[99,4,76,2],[100,4,77,2],[100,8,77,6,"remaining"],[100,17,77,15],[100,22,77,20],[100,25,77,23],[100,27,77,25],[101,6,78,4],[102,6,79,4],[103,6,80,4],[103,10,80,10,"match"],[103,15,80,15],[103,18,80,18,"configs"],[103,25,80,25],[103,26,80,26,"find"],[103,30,80,30],[103,31,80,31,"config"],[103,37,80,37],[103,41,80,41,"config"],[103,47,80,47],[103,48,80,48,"segments"],[103,56,80,56],[103,57,80,57,"join"],[103,61,80,61],[103,62,80,62],[103,65,80,65],[103,66,80,66],[103,71,80,71],[103,73,80,73],[103,74,80,74],[104,6,81,4],[104,10,81,8,"match"],[104,15,81,13],[104,17,81,15],[105,8,82,6],[105,15,82,13,"createNestedStateObject"],[105,38,82,36],[105,39,82,37,"path"],[105,43,82,41],[105,45,82,43,"match"],[105,50,82,48],[105,51,82,49,"routeNames"],[105,61,82,59],[105,62,82,60,"map"],[105,65,82,63],[105,66,82,64,"name"],[105,70,82,68],[105,75,82,73],[106,10,83,8,"name"],[107,8,84,6],[107,9,84,7],[107,10,84,8],[107,11,84,9],[107,13,84,11,"initialRoutes"],[107,26,84,24],[107,28,84,26,"configs"],[107,35,84,33],[107,36,84,34],[108,6,85,4],[109,6,86,4],[109,13,86,11,"undefined"],[109,22,86,20],[110,4,87,2],[111,4,88,2],[111,8,88,6,"result"],[111,14,88,12],[112,4,89,2],[112,8,89,6,"current"],[112,15,89,13],[114,4,91,2],[115,4,92,2],[116,4,93,2],[116,8,93,2,"_matchAgainstConfigs"],[116,28,93,2],[116,31,96,6,"matchAgainstConfigs"],[116,50,96,25],[116,51,96,26,"remaining"],[116,60,96,35],[116,62,96,37,"configs"],[116,69,96,44],[116,70,96,45],[117,6,94,4,"routes"],[117,12,94,10],[117,15,94,10,"_matchAgainstConfigs"],[117,35,94,10],[117,36,94,4,"routes"],[117,42,94,10],[118,6,95,4,"remainingPath"],[118,19,95,17],[118,22,95,17,"_matchAgainstConfigs"],[118,42,95,17],[118,43,95,4,"remainingPath"],[118,56,95,17],[119,4,97,2],[119,8,97,6,"routes"],[119,14,97,12],[119,19,97,17,"undefined"],[119,28,97,26],[119,30,97,28],[120,6,98,4],[121,6,99,4,"current"],[121,13,99,11],[121,16,99,14,"createNestedStateObject"],[121,39,99,37],[121,40,99,38,"path"],[121,44,99,42],[121,46,99,44,"routes"],[121,52,99,50],[121,54,99,52,"initialRoutes"],[121,67,99,65],[121,69,99,67,"configs"],[121,76,99,74],[121,77,99,75],[122,6,100,4,"remaining"],[122,15,100,13],[122,18,100,16,"remainingPath"],[122,31,100,29],[123,6,101,4,"result"],[123,12,101,10],[123,15,101,13,"current"],[123,22,101,20],[124,4,102,2],[125,4,103,2],[125,8,103,6,"current"],[125,15,103,13],[125,19,103,17],[125,23,103,21],[125,27,103,25,"result"],[125,33,103,31],[125,37,103,35],[125,41,103,39],[125,43,103,41],[126,6,104,4],[126,13,104,11,"undefined"],[126,22,104,20],[127,4,105,2],[128,4,106,2],[128,11,106,9,"result"],[128,17,106,15],[129,2,107,0],[131,2,109,0],[132,0,110,0],[133,0,111,0],[134,2,112,0],[134,6,112,6,"cachedConfigResources"],[134,27,112,27],[134,30,112,30],[134,34,112,34,"WeakMap"],[134,41,112,41],[134,42,112,42],[134,43,112,43],[135,2,113,0],[135,11,113,9,"getConfigResources"],[135,29,113,27,"getConfigResources"],[135,30,113,28,"options"],[135,37,113,35],[135,39,113,37],[136,4,114,2],[136,8,114,6],[136,9,114,7,"options"],[136,16,114,14],[136,18,114,16],[136,25,114,23,"prepareConfigResources"],[136,47,114,45],[136,48,114,46],[136,49,114,47],[137,4,115,2],[137,8,115,8,"cached"],[137,14,115,14],[137,17,115,17,"cachedConfigResources"],[137,38,115,38],[137,39,115,39,"get"],[137,42,115,42],[137,43,115,43,"options"],[137,50,115,50],[137,51,115,51],[138,4,116,2],[138,8,116,6,"cached"],[138,14,116,12],[138,16,116,14],[138,23,116,21,"cached"],[138,29,116,27],[139,4,117,2],[139,8,117,8,"resources"],[139,17,117,17],[139,20,117,20,"prepareConfigResources"],[139,42,117,42],[139,43,117,43,"options"],[139,50,117,50],[139,51,117,51],[140,4,118,2,"cachedConfigResources"],[140,25,118,23],[140,26,118,24,"set"],[140,29,118,27],[140,30,118,28,"options"],[140,37,118,35],[140,39,118,37,"resources"],[140,48,118,46],[140,49,118,47],[141,4,119,2],[141,11,119,9,"resources"],[141,20,119,18],[142,2,120,0],[143,2,121,0],[143,11,121,9,"prepareConfigResources"],[143,33,121,31,"prepareConfigResources"],[143,34,121,32,"options"],[143,41,121,39],[143,43,121,41],[144,4,122,2],[144,8,122,6,"options"],[144,15,122,13],[144,17,122,15],[145,6,123,4],[145,7,123,5],[145,8,123,6],[145,10,123,8,"require"],[145,17,123,8],[145,18,123,8,"_dependencyMap"],[145,32,123,8],[145,64,123,28,"validatePathConfig"],[145,82,123,46],[145,84,123,48,"options"],[145,91,123,55],[145,92,123,56],[146,4,124,2],[147,4,125,2],[147,8,125,8,"initialRoutes"],[147,21,125,21],[147,24,125,24,"getInitialRoutes"],[147,40,125,40],[147,41,125,41,"options"],[147,48,125,48],[147,49,125,49],[148,4,126,2],[148,8,126,8,"configs"],[148,15,126,15],[148,18,126,18,"getSortedNormalizedConfigs"],[148,44,126,44],[148,45,126,45,"initialRoutes"],[148,58,126,58],[148,60,126,60,"options"],[148,67,126,67],[148,69,126,69,"screens"],[148,76,126,76],[148,77,126,77],[149,4,127,2,"checkForDuplicatedConfigs"],[149,29,127,27],[149,30,127,28,"configs"],[149,37,127,35],[149,38,127,36],[150,4,128,2],[150,8,128,8,"configWithRegexes"],[150,25,128,25],[150,28,128,28,"getConfigsWithRegexes"],[150,49,128,49],[150,50,128,50,"configs"],[150,57,128,57],[150,58,128,58],[151,4,129,2],[151,11,129,9],[152,6,130,4,"initialRoutes"],[152,19,130,17],[153,6,131,4,"configs"],[153,13,131,11],[154,6,132,4,"configWithRegexes"],[155,4,133,2],[155,5,133,3],[156,2,134,0],[157,2,135,0],[157,11,135,9,"getInitialRoutes"],[157,27,135,25,"getInitialRoutes"],[157,28,135,26,"options"],[157,35,135,33],[157,37,135,35],[158,4,136,2],[158,8,136,8,"initialRoutes"],[158,21,136,21],[158,24,136,24],[158,26,136,26],[159,4,137,2],[159,8,137,6,"options"],[159,15,137,13],[159,17,137,15,"initialRouteName"],[159,33,137,31],[159,35,137,33],[160,6,138,4,"initialRoutes"],[160,19,138,17],[160,20,138,18,"push"],[160,24,138,22],[160,25,138,23],[161,8,139,6,"initialRouteName"],[161,24,139,22],[161,26,139,24,"options"],[161,33,139,31],[161,34,139,32,"initialRouteName"],[161,50,139,48],[162,8,140,6,"parentScreens"],[162,21,140,19],[162,23,140,21],[163,6,141,4],[163,7,141,5],[163,8,141,6],[164,4,142,2],[165,4,143,2],[165,11,143,9,"initialRoutes"],[165,24,143,22],[166,2,144,0],[167,2,145,0],[167,11,145,9,"getSortedNormalizedConfigs"],[167,37,145,35,"getSortedNormalizedConfigs"],[167,38,145,36,"initialRoutes"],[167,51,145,49],[167,53,145,65],[168,4,145,65],[168,8,145,51,"screens"],[168,15,145,58],[168,18,145,58,"arguments"],[168,27,145,58],[168,28,145,58,"length"],[168,34,145,58],[168,42,145,58,"arguments"],[168,51,145,58],[168,59,145,58,"undefined"],[168,68,145,58],[168,71,145,58,"arguments"],[168,80,145,58],[168,86,145,61],[168,87,145,62],[168,88,145,63],[169,4,146,2],[170,4,147,2],[170,11,147,9],[170,13,147,11],[170,14,147,12,"concat"],[170,20,147,18],[170,21,147,19],[170,24,147,22,"Object"],[170,30,147,28],[170,31,147,29,"keys"],[170,35,147,33],[170,36,147,34,"screens"],[170,43,147,41],[170,44,147,42],[170,45,147,43,"map"],[170,48,147,46],[170,49,147,47,"key"],[170,52,147,50],[170,56,147,54,"createNormalizedConfigs"],[170,79,147,77],[170,80,147,78,"key"],[170,83,147,81],[170,85,147,83,"screens"],[170,92,147,90],[170,94,147,92,"initialRoutes"],[170,107,147,105],[170,109,147,107],[170,111,147,109],[170,113,147,111],[170,115,147,113],[170,117,147,115],[170,119,147,117],[170,120,147,118],[170,121,147,119],[170,122,147,120],[170,123,147,121,"sort"],[170,127,147,125],[170,128,147,126],[170,129,147,127,"a"],[170,130,147,128],[170,132,147,130,"b"],[170,133,147,131],[170,138,147,136],[171,6,148,4],[172,6,149,4],[173,6,150,4],[174,6,151,4],[175,6,152,4],[176,6,153,4],[178,6,155,4],[179,6,156,4],[180,6,157,4],[180,10,157,8],[180,11,157,9],[180,12,157,10],[180,14,157,12,"require"],[180,21,157,12],[180,22,157,12,"_dependencyMap"],[180,36,157,12],[180,62,157,26,"isArrayEqual"],[180,74,157,38],[180,76,157,40,"a"],[180,77,157,41],[180,78,157,42,"segments"],[180,86,157,50],[180,88,157,52,"b"],[180,89,157,53],[180,90,157,54,"segments"],[180,98,157,62],[180,99,157,63],[180,101,157,65],[181,8,158,6],[181,15,158,13,"b"],[181,16,158,14],[181,17,158,15,"routeNames"],[181,27,158,25],[181,28,158,26,"join"],[181,32,158,30],[181,33,158,31],[181,36,158,34],[181,37,158,35],[181,38,158,36,"localeCompare"],[181,51,158,49],[181,52,158,50,"a"],[181,53,158,51],[181,54,158,52,"routeNames"],[181,64,158,62],[181,65,158,63,"join"],[181,69,158,67],[181,70,158,68],[181,73,158,71],[181,74,158,72],[181,75,158,73],[182,6,159,4],[184,6,161,4],[185,6,162,4],[186,6,163,4],[186,10,163,8],[186,11,163,9],[186,12,163,10],[186,14,163,12,"require"],[186,21,163,12],[186,22,163,12,"_dependencyMap"],[186,36,163,12],[186,65,163,29,"arrayStartsWith"],[186,80,163,44],[186,82,163,46,"a"],[186,83,163,47],[186,84,163,48,"segments"],[186,92,163,56],[186,94,163,58,"b"],[186,95,163,59],[186,96,163,60,"segments"],[186,104,163,68],[186,105,163,69],[186,107,163,71],[187,8,164,6],[187,15,164,13],[187,16,164,14],[187,17,164,15],[188,6,165,4],[189,6,166,4],[189,10,166,8],[189,11,166,9],[189,12,166,10],[189,14,166,12,"require"],[189,21,166,12],[189,22,166,12,"_dependencyMap"],[189,36,166,12],[189,65,166,29,"arrayStartsWith"],[189,80,166,44],[189,82,166,46,"b"],[189,83,166,47],[189,84,166,48,"segments"],[189,92,166,56],[189,94,166,58,"a"],[189,95,166,59],[189,96,166,60,"segments"],[189,104,166,68],[189,105,166,69],[189,107,166,71],[190,8,167,6],[190,15,167,13],[190,16,167,14],[191,6,168,4],[192,6,169,4],[192,11,169,9],[192,15,169,13,"i"],[192,16,169,14],[192,19,169,17],[192,20,169,18],[192,22,169,20,"i"],[192,23,169,21],[192,26,169,24,"Math"],[192,30,169,28],[192,31,169,29,"max"],[192,34,169,32],[192,35,169,33,"a"],[192,36,169,34],[192,37,169,35,"segments"],[192,45,169,43],[192,46,169,44,"length"],[192,52,169,50],[192,54,169,52,"b"],[192,55,169,53],[192,56,169,54,"segments"],[192,64,169,62],[192,65,169,63,"length"],[192,71,169,69],[192,72,169,70],[192,74,169,72,"i"],[192,75,169,73],[192,77,169,75],[192,79,169,77],[193,8,170,6],[194,8,171,6],[194,12,171,10,"a"],[194,13,171,11],[194,14,171,12,"segments"],[194,22,171,20],[194,23,171,21,"i"],[194,24,171,22],[194,25,171,23],[194,29,171,27],[194,33,171,31],[194,35,171,33],[195,10,172,8],[195,17,172,15],[195,18,172,16],[196,8,173,6],[198,8,175,6],[199,8,176,6],[199,12,176,10,"b"],[199,13,176,11],[199,14,176,12,"segments"],[199,22,176,20],[199,23,176,21,"i"],[199,24,176,22],[199,25,176,23],[199,29,176,27],[199,33,176,31],[199,35,176,33],[200,10,177,8],[200,17,177,15],[200,18,177,16],[200,19,177,17],[201,8,178,6],[202,8,179,6],[202,12,179,12,"aWildCard"],[202,21,179,21],[202,24,179,24,"a"],[202,25,179,25],[202,26,179,26,"segments"],[202,34,179,34],[202,35,179,35,"i"],[202,36,179,36],[202,37,179,37],[202,42,179,42],[202,45,179,45],[203,8,180,6],[203,12,180,12,"bWildCard"],[203,21,180,21],[203,24,180,24,"b"],[203,25,180,25],[203,26,180,26,"segments"],[203,34,180,34],[203,35,180,35,"i"],[203,36,180,36],[203,37,180,37],[203,42,180,42],[203,45,180,45],[204,8,181,6],[204,12,181,12,"aParam"],[204,18,181,18],[204,21,181,21,"a"],[204,22,181,22],[204,23,181,23,"segments"],[204,31,181,31],[204,32,181,32,"i"],[204,33,181,33],[204,34,181,34],[204,35,181,35,"startsWith"],[204,45,181,45],[204,46,181,46],[204,49,181,49],[204,50,181,50],[205,8,182,6],[205,12,182,12,"bParam"],[205,18,182,18],[205,21,182,21,"b"],[205,22,182,22],[205,23,182,23,"segments"],[205,31,182,31],[205,32,182,32,"i"],[205,33,182,33],[205,34,182,34],[205,35,182,35,"startsWith"],[205,45,182,45],[205,46,182,46],[205,49,182,49],[205,50,182,50],[206,8,183,6],[206,12,183,12,"aRegex"],[206,18,183,18],[206,21,183,21,"aParam"],[206,27,183,27],[206,31,183,31,"a"],[206,32,183,32],[206,33,183,33,"segments"],[206,41,183,41],[206,42,183,42,"i"],[206,43,183,43],[206,44,183,44],[206,45,183,45,"includes"],[206,53,183,53],[206,54,183,54],[206,57,183,57],[206,58,183,58],[207,8,184,6],[207,12,184,12,"bRegex"],[207,18,184,18],[207,21,184,21,"bParam"],[207,27,184,27],[207,31,184,31,"b"],[207,32,184,32],[207,33,184,33,"segments"],[207,41,184,41],[207,42,184,42,"i"],[207,43,184,43],[207,44,184,44],[207,45,184,45,"includes"],[207,53,184,53],[207,54,184,54],[207,57,184,57],[207,58,184,58],[209,8,186,6],[210,8,187,6],[210,12,187,10,"aWildCard"],[210,21,187,19],[210,25,187,23,"bWildCard"],[210,34,187,32],[210,38,187,36,"aRegex"],[210,44,187,42],[210,48,187,46,"bRegex"],[210,54,187,52],[210,56,187,54],[211,10,188,8],[212,8,189,6],[214,8,191,6],[215,8,192,6],[215,12,192,10,"aWildCard"],[215,21,192,19],[215,25,192,23],[215,26,192,24,"bWildCard"],[215,35,192,33],[215,37,192,35],[216,10,193,8],[216,17,193,15],[216,18,193,16],[217,8,194,6],[219,8,196,6],[220,8,197,6],[220,12,197,10,"bWildCard"],[220,21,197,19],[220,25,197,23],[220,26,197,24,"aWildCard"],[220,35,197,33],[220,37,197,35],[221,10,198,8],[221,17,198,15],[221,18,198,16],[221,19,198,17],[222,8,199,6],[224,8,201,6],[225,8,202,6],[225,12,202,10,"aParam"],[225,18,202,16],[225,22,202,20],[225,23,202,21,"bParam"],[225,29,202,27],[225,31,202,29],[226,10,203,8],[226,17,203,15],[226,18,203,16],[227,8,204,6],[229,8,206,6],[230,8,207,6],[230,12,207,10,"bParam"],[230,18,207,16],[230,22,207,20],[230,23,207,21,"aParam"],[230,29,207,27],[230,31,207,29],[231,10,208,8],[231,17,208,15],[231,18,208,16],[231,19,208,17],[232,8,209,6],[234,8,211,6],[235,8,212,6],[235,12,212,10,"aRegex"],[235,18,212,16],[235,22,212,20],[235,23,212,21,"bRegex"],[235,29,212,27],[235,31,212,29],[236,10,213,8],[236,17,213,15],[236,18,213,16],[236,19,213,17],[237,8,214,6],[239,8,216,6],[240,8,217,6],[240,12,217,10,"bRegex"],[240,18,217,16],[240,22,217,20],[240,23,217,21,"aRegex"],[240,29,217,27],[240,31,217,29],[241,10,218,8],[241,17,218,15],[241,18,218,16],[242,8,219,6],[243,6,220,4],[244,6,221,4],[244,13,221,11,"a"],[244,14,221,12],[244,15,221,13,"segments"],[244,23,221,21],[244,24,221,22,"length"],[244,30,221,28],[244,33,221,31,"b"],[244,34,221,32],[244,35,221,33,"segments"],[244,43,221,41],[244,44,221,42,"length"],[244,50,221,48],[245,4,222,2],[245,5,222,3],[245,6,222,4],[246,2,223,0],[247,2,224,0],[247,11,224,9,"checkForDuplicatedConfigs"],[247,36,224,34,"checkForDuplicatedConfigs"],[247,37,224,35,"configs"],[247,44,224,42],[247,46,224,44],[248,4,225,2],[249,4,226,2,"configs"],[249,11,226,9],[249,12,226,10,"reduce"],[249,18,226,16],[249,19,226,17],[249,20,226,18,"acc"],[249,23,226,21],[249,25,226,23,"config"],[249,31,226,29],[249,36,226,34],[250,6,227,4],[250,10,227,10,"pattern"],[250,17,227,17],[250,20,227,20,"config"],[250,26,227,26],[250,27,227,27,"segments"],[250,35,227,35],[250,36,227,36,"join"],[250,40,227,40],[250,41,227,41],[250,44,227,44],[250,45,227,45],[251,6,228,4],[251,10,228,8,"acc"],[251,13,228,11],[251,14,228,12,"pattern"],[251,21,228,19],[251,22,228,20],[251,24,228,22],[252,8,229,6],[252,12,229,12,"a"],[252,13,229,13],[252,16,229,16,"acc"],[252,19,229,19],[252,20,229,20,"pattern"],[252,27,229,27],[252,28,229,28],[252,29,229,29,"routeNames"],[252,39,229,39],[253,8,230,6],[253,12,230,12,"b"],[253,13,230,13],[253,16,230,16,"config"],[253,22,230,22],[253,23,230,23,"routeNames"],[253,33,230,33],[255,8,232,6],[256,8,233,6],[257,8,234,6],[257,12,234,12,"intersects"],[257,22,234,22],[257,25,234,25,"a"],[257,26,234,26],[257,27,234,27,"length"],[257,33,234,33],[257,36,234,36,"b"],[257,37,234,37],[257,38,234,38,"length"],[257,44,234,44],[257,47,234,47,"b"],[257,48,234,48],[257,49,234,49,"every"],[257,54,234,54],[257,55,234,55],[257,56,234,56,"it"],[257,58,234,58],[257,60,234,60,"i"],[257,61,234,61],[257,66,234,66,"a"],[257,67,234,67],[257,68,234,68,"i"],[257,69,234,69],[257,70,234,70],[257,75,234,75,"it"],[257,77,234,77],[257,78,234,78],[257,81,234,81,"a"],[257,82,234,82],[257,83,234,83,"every"],[257,88,234,88],[257,89,234,89],[257,90,234,90,"it"],[257,92,234,92],[257,94,234,94,"i"],[257,95,234,95],[257,100,234,100,"b"],[257,101,234,101],[257,102,234,102,"i"],[257,103,234,103],[257,104,234,104],[257,109,234,109,"it"],[257,111,234,111],[257,112,234,112],[258,8,235,6],[258,12,235,10],[258,13,235,11,"intersects"],[258,23,235,21],[258,25,235,23],[259,10,236,8],[259,16,236,14],[259,20,236,18,"Error"],[259,25,236,23],[259,26,236,24],[259,91,236,89,"pattern"],[259,98,236,96],[259,121,236,119,"a"],[259,122,236,120],[259,123,236,121,"join"],[259,127,236,125],[259,128,236,126],[259,133,236,131],[259,134,236,132],[259,144,236,142,"b"],[259,145,236,143],[259,146,236,144,"join"],[259,150,236,148],[259,151,236,149],[259,156,236,154],[259,157,236,155],[259,229,236,227],[259,230,236,228],[260,8,237,6],[261,6,238,4],[262,6,239,4],[262,13,239,11,"Object"],[262,19,239,17],[262,20,239,18,"assign"],[262,26,239,24],[262,27,239,25,"acc"],[262,30,239,28],[262,32,239,30],[263,8,240,6],[263,9,240,7,"pattern"],[263,16,240,14],[263,19,240,17,"config"],[264,6,241,4],[264,7,241,5],[264,8,241,6],[265,4,242,2],[265,5,242,3],[265,7,242,5],[265,8,242,6],[265,9,242,7],[265,10,242,8],[266,2,243,0],[267,2,244,0],[267,11,244,9,"getConfigsWithRegexes"],[267,32,244,30,"getConfigsWithRegexes"],[267,33,244,31,"configs"],[267,40,244,38],[267,42,244,40],[268,4,245,2],[268,11,245,9,"configs"],[268,18,245,16],[268,19,245,17,"map"],[268,22,245,20],[268,23,245,21,"c"],[268,24,245,22],[268,29,245,27],[269,6,246,4],[269,9,246,7,"c"],[269,10,246,8],[270,6,247,4],[271,6,248,4,"regex"],[271,11,248,9],[271,13,248,11,"c"],[271,14,248,12],[271,15,248,13,"regex"],[271,20,248,18],[271,23,248,21],[271,27,248,25,"RegExp"],[271,33,248,31],[271,34,248,32,"c"],[271,35,248,33],[271,36,248,34,"regex"],[271,41,248,39],[271,42,248,40,"source"],[271,48,248,46],[271,51,248,49],[271,54,248,52],[271,55,248,53],[271,58,248,56,"undefined"],[272,4,249,2],[272,5,249,3],[272,6,249,4],[272,7,249,5],[273,2,250,0],[274,2,251,0],[274,6,251,6,"matchAgainstConfigs"],[274,25,251,25],[274,28,251,28,"matchAgainstConfigs"],[274,29,251,29,"remaining"],[274,38,251,38],[274,40,251,40,"configs"],[274,47,251,47],[274,52,251,52],[275,4,252,2],[275,8,252,6,"routes"],[275,14,252,12],[276,4,253,2],[276,8,253,6,"remainingPath"],[276,21,253,19],[276,24,253,22,"remaining"],[276,33,253,31],[278,4,255,2],[279,4,255,2],[279,8,255,2,"_loop"],[279,13,255,2],[279,25,255,2,"_loop"],[279,26,255,2,"config"],[279,32,255,2],[279,34,256,32],[280,8,257,4],[280,12,257,8],[280,13,257,9,"config"],[280,19,257,15],[280,20,257,16,"regex"],[280,25,257,21],[280,27,257,23],[281,10,257,23],[282,8,259,4],[283,8,260,4],[283,12,260,10,"match"],[283,17,260,15],[283,20,260,18,"remainingPath"],[283,33,260,31],[283,34,260,32,"match"],[283,39,260,37],[283,40,260,38,"config"],[283,46,260,44],[283,47,260,45,"regex"],[283,52,260,50],[283,53,260,51],[285,8,262,4],[286,8,263,4],[286,12,263,8,"match"],[286,17,263,13],[286,19,263,15],[287,10,264,6,"routes"],[287,16,264,12],[287,19,264,15,"config"],[287,25,264,21],[287,26,264,22,"routeNames"],[287,36,264,32],[287,37,264,33,"map"],[287,40,264,36],[287,41,264,37,"routeName"],[287,50,264,46],[287,54,264,50],[288,12,265,8],[288,16,265,14,"routeConfig"],[288,27,265,25],[288,30,265,28,"configs"],[288,37,265,35],[288,38,265,36,"find"],[288,42,265,40],[288,43,265,41,"c"],[288,44,265,42],[288,48,265,46],[289,14,266,10],[290,14,267,10],[290,21,267,17,"c"],[290,22,267,18],[290,23,267,19,"screen"],[290,29,267,25],[290,34,267,30,"routeName"],[290,43,267,39],[290,47,267,43],[290,48,267,44],[290,49,267,45],[290,51,267,47,"require"],[290,58,267,47],[290,59,267,47,"_dependencyMap"],[290,73,267,47],[290,102,267,64,"arrayStartsWith"],[290,117,267,79],[290,119,267,81,"config"],[290,125,267,87],[290,126,267,88,"segments"],[290,134,267,96],[290,136,267,98,"c"],[290,137,267,99],[290,138,267,100,"segments"],[290,146,267,108],[290,147,267,109],[291,12,268,8],[291,13,268,9],[291,14,268,10],[292,12,269,8],[292,16,269,14,"params"],[292,22,269,20],[292,25,269,23,"routeConfig"],[292,36,269,34],[292,40,269,38,"match"],[292,45,269,43],[292,46,269,44,"groups"],[292,52,269,50],[292,55,269,53,"Object"],[292,61,269,59],[292,62,269,60,"fromEntries"],[292,73,269,71],[292,74,269,72,"Object"],[292,80,269,78],[292,81,269,79,"entries"],[292,88,269,86],[292,89,269,87,"match"],[292,94,269,92],[292,95,269,93,"groups"],[292,101,269,99],[292,102,269,100],[292,103,269,101,"map"],[292,106,269,104],[292,107,269,105,"_ref"],[292,111,269,105],[292,115,269,123],[293,14,269,123],[293,18,269,123,"_ref2"],[293,23,269,123],[293,26,269,123,"_slicedToArray"],[293,40,269,123],[293,41,269,123,"_ref"],[293,45,269,123],[294,16,269,107,"key"],[294,19,269,110],[294,22,269,110,"_ref2"],[294,27,269,110],[295,16,269,112,"value"],[295,21,269,117],[295,24,269,117,"_ref2"],[295,29,269,117],[296,14,270,10],[296,18,270,16,"index"],[296,23,270,21],[296,26,270,24,"Number"],[296,32,270,30],[296,33,270,31,"key"],[296,36,270,34],[296,37,270,35,"replace"],[296,44,270,42],[296,45,270,43],[296,53,270,51],[296,55,270,53],[296,57,270,55],[296,58,270,56],[296,59,270,57],[297,14,271,10],[297,18,271,16,"param"],[297,23,271,21],[297,26,271,24,"routeConfig"],[297,37,271,35],[297,38,271,36,"params"],[297,44,271,42],[297,45,271,43,"find"],[297,49,271,47],[297,50,271,48,"it"],[297,52,271,50],[297,56,271,54,"it"],[297,58,271,56],[297,59,271,57,"index"],[297,64,271,62],[297,69,271,67,"index"],[297,74,271,72],[297,75,271,73],[298,14,272,10],[298,18,272,14,"param"],[298,23,272,19],[298,25,272,21,"screen"],[298,31,272,27],[298,36,272,32,"routeName"],[298,45,272,41],[298,49,272,45,"param"],[298,54,272,50],[298,56,272,52,"name"],[298,60,272,56],[298,62,272,58],[299,16,273,12],[299,23,273,19],[299,24,273,20,"param"],[299,29,273,25],[299,30,273,26,"name"],[299,34,273,30],[299,36,273,32,"value"],[299,41,273,37],[299,42,273,38],[300,14,274,10],[301,14,275,10],[301,21,275,17],[301,25,275,21],[302,12,276,8],[302,13,276,9],[302,14,276,10],[302,15,276,11,"filter"],[302,21,276,17],[302,22,276,18,"it"],[302,24,276,20],[302,28,276,24,"it"],[302,30,276,26],[302,34,276,30],[302,38,276,34],[302,39,276,35],[302,40,276,36,"map"],[302,43,276,39],[302,44,276,40,"_ref3"],[302,49,276,40],[302,53,276,58],[303,14,276,58],[303,18,276,58,"_ref4"],[303,23,276,58],[303,26,276,58,"_slicedToArray"],[303,40,276,58],[303,41,276,58,"_ref3"],[303,46,276,58],[304,16,276,42,"key"],[304,19,276,45],[304,22,276,45,"_ref4"],[304,27,276,45],[305,16,276,47,"value"],[305,21,276,52],[305,24,276,52,"_ref4"],[305,29,276,52],[306,14,277,10],[306,18,277,14,"value"],[306,23,277,19],[306,27,277,23],[306,31,277,27],[306,33,277,29],[307,16,278,12],[307,23,278,19],[307,24,278,20,"key"],[307,27,278,23],[307,29,278,25,"undefined"],[307,38,278,34],[307,39,278,35],[308,14,279,10],[309,14,280,10],[309,18,280,16,"decoded"],[309,25,280,23],[309,28,280,26,"decodeURIComponent"],[309,46,280,44],[309,47,280,45,"value"],[309,52,280,50],[309,53,280,51],[310,14,281,10],[310,18,281,16,"parsed"],[310,24,281,22],[310,27,281,25,"routeConfig"],[310,38,281,36],[310,39,281,37,"parse"],[310,44,281,42],[310,47,281,45,"key"],[310,50,281,48],[310,51,281,49],[310,54,281,52,"routeConfig"],[310,65,281,63],[310,66,281,64,"parse"],[310,71,281,69],[310,72,281,70,"key"],[310,75,281,73],[310,76,281,74],[310,77,281,75,"decoded"],[310,84,281,82],[310,85,281,83],[310,88,281,86,"decoded"],[310,95,281,93],[311,14,282,10],[311,21,282,17],[311,22,282,18,"key"],[311,25,282,21],[311,27,282,23,"parsed"],[311,33,282,29],[311,34,282,30],[312,12,283,8],[312,13,283,9],[312,14,283,10],[312,15,283,11],[312,18,283,14,"undefined"],[312,27,283,23],[313,12,284,8],[313,16,284,12,"params"],[313,22,284,18],[313,26,284,22,"Object"],[313,32,284,28],[313,33,284,29,"keys"],[313,37,284,33],[313,38,284,34,"params"],[313,44,284,40],[313,45,284,41],[313,46,284,42,"length"],[313,52,284,48],[313,54,284,50],[314,14,285,10],[314,21,285,17],[315,16,286,12,"name"],[315,20,286,16],[315,22,286,18,"routeName"],[315,31,286,27],[316,16,287,12,"params"],[317,14,288,10],[317,15,288,11],[318,12,289,8],[319,12,290,8],[319,19,290,15],[320,14,291,10,"name"],[320,18,291,14],[320,20,291,16,"routeName"],[321,12,292,8],[321,13,292,9],[322,10,293,6],[322,11,293,7],[322,12,293,8],[323,10,294,6,"remainingPath"],[323,23,294,19],[323,26,294,22,"remainingPath"],[323,39,294,35],[323,40,294,36,"replace"],[323,47,294,43],[323,48,294,44,"match"],[323,53,294,49],[323,54,294,50],[323,55,294,51],[323,56,294,52],[323,58,294,54],[323,60,294,56],[323,61,294,57],[324,10,294,58],[325,8,296,4],[326,6,297,2],[326,7,297,3],[327,6,297,3,"_ret"],[327,10,297,3],[328,4,256,2],[328,9,256,7],[328,13,256,13,"config"],[328,19,256,19],[328,23,256,23,"configs"],[328,30,256,30],[329,6,256,30,"_ret"],[329,10,256,30],[329,13,256,30,"_loop"],[329,18,256,30],[329,19,256,30,"config"],[329,25,256,30],[330,6,256,30],[330,10,256,30,"_ret"],[330,14,256,30],[330,22,258,6],[331,6,258,15],[331,10,258,15,"_ret"],[331,14,258,15],[331,22,295,6],[332,4,295,12],[333,4,298,2],[333,11,298,9],[334,6,299,4,"routes"],[334,12,299,10],[335,6,300,4,"remainingPath"],[336,4,301,2],[336,5,301,3],[337,2,302,0],[337,3,302,1],[338,2,303,0],[338,6,303,6,"createNormalizedConfigs"],[338,29,303,29],[338,32,303,32,"createNormalizedConfigs"],[338,33,303,33,"screen"],[338,39,303,39],[338,41,303,41,"routeConfig"],[338,52,303,52],[338,54,303,54,"initials"],[338,62,303,62],[338,64,303,64,"paths"],[338,69,303,69],[338,71,303,71,"parentScreens"],[338,84,303,84],[338,86,303,86,"routeNames"],[338,96,303,96],[338,101,303,101],[339,4,304,2],[339,8,304,8,"configs"],[339,15,304,15],[339,18,304,18],[339,20,304,20],[340,4,305,2,"routeNames"],[340,14,305,12],[340,15,305,13,"push"],[340,19,305,17],[340,20,305,18,"screen"],[340,26,305,24],[340,27,305,25],[341,4,306,2,"parentScreens"],[341,17,306,15],[341,18,306,16,"push"],[341,22,306,20],[341,23,306,21,"screen"],[341,29,306,27],[341,30,306,28],[342,4,307,2],[342,8,307,8,"config"],[342,14,307,14],[342,17,307,17,"routeConfig"],[342,28,307,28],[342,29,307,29,"screen"],[342,35,307,35],[342,36,307,36],[343,4,308,2],[343,8,308,6],[343,15,308,13,"config"],[343,21,308,19],[343,26,308,24],[343,34,308,32],[343,36,308,34],[344,6,309,4,"paths"],[344,11,309,9],[344,12,309,10,"push"],[344,16,309,14],[344,17,309,15],[345,8,310,6,"screen"],[345,14,310,12],[346,8,311,6,"path"],[346,12,311,10],[346,14,311,12,"config"],[347,6,312,4],[347,7,312,5],[347,8,312,6],[348,6,313,4,"configs"],[348,13,313,11],[348,14,313,12,"push"],[348,18,313,16],[348,19,313,17,"createConfigItem"],[348,35,313,33],[348,36,313,34,"screen"],[348,42,313,40],[348,44,313,42],[348,45,313,43],[348,48,313,46,"routeNames"],[348,58,313,56],[348,59,313,57],[348,61,313,59],[348,62,313,60],[348,65,313,63,"paths"],[348,70,313,68],[348,71,313,69],[348,72,313,70],[348,73,313,71],[349,4,314,2],[349,5,314,3],[349,11,314,9],[349,15,314,13],[349,22,314,20,"config"],[349,28,314,26],[349,33,314,31],[349,41,314,39],[349,43,314,41],[350,6,315,4],[351,6,316,4],[352,6,317,4],[353,6,318,4],[353,10,318,8],[353,17,318,15,"config"],[353,23,318,21],[353,24,318,22,"path"],[353,28,318,26],[353,33,318,31],[353,41,318,39],[353,43,318,41],[354,8,319,6],[354,12,319,10,"config"],[354,18,319,16],[354,19,319,17,"exact"],[354,24,319,22],[354,28,319,26,"config"],[354,34,319,32],[354,35,319,33,"path"],[354,39,319,37],[354,43,319,41],[354,47,319,45],[354,49,319,47],[355,10,320,8],[355,16,320,14],[355,20,320,18,"Error"],[355,25,320,23],[355,26,320,24],[355,37,320,35,"screen"],[355,43,320,41],[355,223,320,221],[355,224,320,222],[356,8,321,6],[358,8,323,6],[359,8,324,6],[360,8,325,6],[360,12,325,12,"aliasConfigs"],[360,24,325,24],[360,27,325,27],[360,29,325,29],[361,8,326,6],[361,12,326,10,"config"],[361,18,326,16],[361,19,326,17,"alias"],[361,24,326,22],[361,26,326,24],[362,10,327,8],[362,15,327,13],[362,19,327,19,"alias"],[362,24,327,24],[362,28,327,28,"config"],[362,34,327,34],[362,35,327,35,"alias"],[362,40,327,40],[362,42,327,42],[363,12,328,10],[363,16,328,14],[363,23,328,21,"alias"],[363,28,328,26],[363,33,328,31],[363,41,328,39],[363,43,328,41],[364,14,329,12,"aliasConfigs"],[364,26,329,24],[364,27,329,25,"push"],[364,31,329,29],[364,32,329,30,"createConfigItem"],[364,48,329,46],[364,49,329,47,"screen"],[364,55,329,53],[364,57,329,55],[364,58,329,56],[364,61,329,59,"routeNames"],[364,71,329,69],[364,72,329,70],[364,74,329,72],[364,75,329,73],[364,78,329,76,"paths"],[364,83,329,81],[364,85,329,83],[365,16,330,14,"screen"],[365,22,330,20],[366,16,331,14,"path"],[366,20,331,18],[366,22,331,20,"alias"],[367,14,332,12],[367,15,332,13],[367,16,332,14],[367,18,332,16,"config"],[367,24,332,22],[367,25,332,23,"parse"],[367,30,332,28],[367,31,332,29],[367,32,332,30],[368,12,333,10],[368,13,333,11],[368,19,333,17],[368,23,333,21],[368,30,333,28,"alias"],[368,35,333,33],[368,40,333,38],[368,48,333,46],[368,50,333,48],[369,14,334,12,"aliasConfigs"],[369,26,334,24],[369,27,334,25,"push"],[369,31,334,29],[369,32,334,30,"createConfigItem"],[369,48,334,46],[369,49,334,47,"screen"],[369,55,334,53],[369,57,334,55],[369,58,334,56],[369,61,334,59,"routeNames"],[369,71,334,69],[369,72,334,70],[369,74,334,72,"alias"],[369,79,334,77],[369,80,334,78,"exact"],[369,85,334,83],[369,88,334,86],[369,89,334,87],[370,16,335,14,"screen"],[370,22,335,20],[371,16,336,14,"path"],[371,20,336,18],[371,22,336,20,"alias"],[371,27,336,25],[371,28,336,26,"path"],[372,14,337,12],[372,15,337,13],[372,16,337,14],[372,19,337,17],[372,20,337,18],[372,23,337,21,"paths"],[372,28,337,26],[372,30,337,28],[373,16,338,14,"screen"],[373,22,338,20],[374,16,339,14,"path"],[374,20,339,18],[374,22,339,20,"alias"],[374,27,339,25],[374,28,339,26,"path"],[375,14,340,12],[375,15,340,13],[375,16,340,14],[375,18,340,16,"alias"],[375,23,340,21],[375,24,340,22,"parse"],[375,29,340,27],[375,30,340,28],[375,31,340,29],[376,12,341,10],[377,10,342,8],[378,8,343,6],[379,8,344,6],[379,12,344,10,"config"],[379,18,344,16],[379,19,344,17,"exact"],[379,24,344,22],[379,26,344,24],[380,10,345,8],[381,10,346,8],[382,10,347,8,"paths"],[382,15,347,13],[382,16,347,14,"length"],[382,22,347,20],[382,25,347,23],[382,26,347,24],[383,8,348,6],[384,8,349,6,"paths"],[384,13,349,11],[384,14,349,12,"push"],[384,18,349,16],[384,19,349,17],[385,10,350,8,"screen"],[385,16,350,14],[386,10,351,8,"path"],[386,14,351,12],[386,16,351,14,"config"],[386,22,351,20],[386,23,351,21,"path"],[387,8,352,6],[387,9,352,7],[387,10,352,8],[388,8,353,6,"configs"],[388,15,353,13],[388,16,353,14,"push"],[388,20,353,18],[388,21,353,19,"createConfigItem"],[388,37,353,35],[388,38,353,36,"screen"],[388,44,353,42],[388,46,353,44],[388,47,353,45],[388,50,353,48,"routeNames"],[388,60,353,58],[388,61,353,59],[388,63,353,61],[388,64,353,62],[388,67,353,65,"paths"],[388,72,353,70],[388,73,353,71],[388,75,353,73,"config"],[388,81,353,79],[388,82,353,80,"parse"],[388,87,353,85],[388,88,353,86],[388,89,353,87],[389,8,354,6,"configs"],[389,15,354,13],[389,16,354,14,"push"],[389,20,354,18],[389,21,354,19],[389,24,354,22,"aliasConfigs"],[389,36,354,34],[389,37,354,35],[390,6,355,4],[391,6,356,4],[391,10,356,8],[391,17,356,15,"config"],[391,23,356,21],[391,28,356,26],[391,36,356,34],[391,40,356,38],[391,47,356,45,"config"],[391,53,356,51],[391,54,356,52,"path"],[391,58,356,56],[391,63,356,61],[391,71,356,69],[391,75,356,73,"config"],[391,81,356,79],[391,82,356,80,"alias"],[391,87,356,85],[391,89,356,87,"length"],[391,95,356,93],[391,97,356,95],[392,8,357,6],[392,14,357,12],[392,18,357,16,"Error"],[392,23,357,21],[392,24,357,22],[392,35,357,33,"screen"],[392,41,357,39],[392,126,357,124],[392,127,357,125],[393,6,358,4],[394,6,359,4],[394,10,359,8,"config"],[394,16,359,14],[394,17,359,15,"screens"],[394,24,359,22],[394,26,359,24],[395,8,360,6],[396,8,361,6],[396,12,361,10,"config"],[396,18,361,16],[396,19,361,17,"initialRouteName"],[396,35,361,33],[396,37,361,35],[397,10,362,8,"initials"],[397,18,362,16],[397,19,362,17,"push"],[397,23,362,21],[397,24,362,22],[398,12,363,10,"initialRouteName"],[398,28,363,26],[398,30,363,28,"config"],[398,36,363,34],[398,37,363,35,"initialRouteName"],[398,53,363,51],[399,12,364,10,"parentScreens"],[400,10,365,8],[400,11,365,9],[400,12,365,10],[401,8,366,6],[402,8,367,6,"Object"],[402,14,367,12],[402,15,367,13,"keys"],[402,19,367,17],[402,20,367,18,"config"],[402,26,367,24],[402,27,367,25,"screens"],[402,34,367,32],[402,35,367,33],[402,36,367,34,"forEach"],[402,43,367,41],[402,44,367,42,"nestedConfig"],[402,56,367,54],[402,60,367,58],[403,10,368,8],[403,14,368,14,"result"],[403,20,368,20],[403,23,368,23,"createNormalizedConfigs"],[403,46,368,46],[403,47,368,47,"nestedConfig"],[403,59,368,59],[403,61,368,61,"config"],[403,67,368,67],[403,68,368,68,"screens"],[403,75,368,75],[403,77,368,77,"initials"],[403,85,368,85],[403,87,368,87],[403,88,368,88],[403,91,368,91,"paths"],[403,96,368,96],[403,97,368,97],[403,99,368,99],[403,100,368,100],[403,103,368,103,"parentScreens"],[403,116,368,116],[403,117,368,117],[403,119,368,119,"routeNames"],[403,129,368,129],[403,130,368,130],[404,10,369,8,"configs"],[404,17,369,15],[404,18,369,16,"push"],[404,22,369,20],[404,23,369,21],[404,26,369,24,"result"],[404,32,369,30],[404,33,369,31],[405,8,370,6],[405,9,370,7],[405,10,370,8],[406,6,371,4],[407,4,372,2],[408,4,373,2,"routeNames"],[408,14,373,12],[408,15,373,13,"pop"],[408,18,373,16],[408,19,373,17],[408,20,373,18],[409,4,374,2],[409,11,374,9,"configs"],[409,18,374,16],[410,2,375,0],[410,3,375,1],[411,2,376,0],[411,6,376,6,"createConfigItem"],[411,22,376,22],[411,25,376,25,"createConfigItem"],[411,26,376,26,"screen"],[411,32,376,32],[411,34,376,34,"routeNames"],[411,44,376,44],[411,46,376,46,"paths"],[411,51,376,51],[411,53,376,53,"parse"],[411,58,376,58],[411,63,376,63],[412,4,377,2],[412,8,377,8,"parts"],[412,13,377,13],[412,16,377,16],[412,18,377,18],[414,4,379,2],[415,4,379,2],[415,8,379,2,"_loop2"],[415,14,379,2],[415,26,379,2,"_loop2"],[415,27,379,2,"_screen"],[415,34,379,2],[415,36,383,14],[416,6,384,4,"parts"],[416,11,384,9],[416,12,384,10,"push"],[416,16,384,14],[416,17,384,15],[416,20,384,18],[416,21,384,19],[416,22,384,20],[416,24,384,22,"require"],[416,31,384,22],[416,32,384,22,"_dependencyMap"],[416,46,384,22],[416,75,384,39,"getPatternParts"],[416,90,384,54],[416,92,384,56,"path"],[416,96,384,60],[416,97,384,61],[416,98,384,62,"map"],[416,101,384,65],[416,102,384,66,"part"],[416,106,384,70],[416,111,384,75],[417,8,385,6],[417,11,385,9,"part"],[417,15,385,13],[418,8,386,6,"screen"],[418,14,386,12],[418,16,386,6,"screen"],[419,6,387,4],[419,7,387,5],[419,8,387,6],[419,9,387,7],[419,10,387,8],[420,4,388,2],[420,5,388,3],[421,4,380,2],[421,13,380,2,"_ref5"],[421,18,380,2],[421,22,383,7,"paths"],[421,27,383,12],[422,6,383,12],[422,10,381,4,"screen"],[422,17,381,10],[422,20,381,10,"_ref5"],[422,25,381,10],[422,26,381,4,"screen"],[422,32,381,10],[423,6,381,10],[423,10,382,4,"path"],[423,14,382,8],[423,17,382,8,"_ref5"],[423,22,382,8],[423,23,382,4,"path"],[423,27,382,8],[424,6,382,8,"_loop2"],[424,12,382,8],[424,13,382,8,"_screen"],[424,20,382,8],[425,4,382,8],[426,4,389,2],[426,8,389,8,"regex"],[426,13,389,13],[426,16,389,16,"parts"],[426,21,389,21],[426,22,389,22,"length"],[426,28,389,28],[426,31,389,31],[426,35,389,35,"RegExp"],[426,41,389,41],[426,42,389,42],[426,47,389,47,"parts"],[426,52,389,52],[426,53,389,53,"map"],[426,56,389,56],[426,57,389,57],[426,58,389,58,"it"],[426,60,389,60],[426,62,389,62,"i"],[426,63,389,63],[426,68,389,68],[427,6,390,4],[427,10,390,8,"it"],[427,12,390,10],[427,13,390,11,"param"],[427,18,390,16],[427,20,390,18],[428,8,391,6],[428,12,391,12,"reg"],[428,15,391,15],[428,18,391,18,"it"],[428,20,391,20],[428,21,391,21,"regex"],[428,26,391,26],[428,30,391,30],[428,37,391,37],[429,8,392,6],[429,15,392,13],[429,29,392,27,"i"],[429,30,392,28],[429,34,392,32,"reg"],[429,37,392,35],[429,45,392,43,"it"],[429,47,392,45],[429,48,392,46,"optional"],[429,56,392,54],[429,59,392,57],[429,62,392,60],[429,65,392,63],[429,67,392,65],[429,70,392,68],[430,6,393,4],[431,6,394,4],[431,13,394,11],[431,16,394,14,"it"],[431,18,394,16],[431,19,394,17,"segment"],[431,26,394,24],[431,31,394,29],[431,34,394,32],[431,37,394,35],[431,41,394,39],[431,44,394,42],[431,45,394,43],[431,46,394,44],[431,48,394,46,"_escapeStringRegexp"],[431,67,394,65],[431,68,394,66,"default"],[431,75,394,73],[431,77,394,75,"it"],[431,79,394,77],[431,80,394,78,"segment"],[431,87,394,85],[431,88,394,86],[431,93,394,91],[432,4,395,2],[432,5,395,3],[432,6,395,4],[432,7,395,5,"join"],[432,11,395,9],[432,12,395,10],[432,14,395,12],[432,15,395,13],[432,19,395,17],[432,20,395,18],[432,23,395,21,"undefined"],[432,32,395,30],[433,4,396,2],[433,8,396,8,"segments"],[433,16,396,16],[433,19,396,19,"parts"],[433,24,396,24],[433,25,396,25,"map"],[433,28,396,28],[433,29,396,29,"it"],[433,31,396,31],[433,35,396,35,"it"],[433,37,396,37],[433,38,396,38,"segment"],[433,45,396,45],[433,46,396,46],[434,4,397,2],[434,8,397,8,"params"],[434,14,397,14],[434,17,397,17,"parts"],[434,22,397,22],[434,23,397,23,"map"],[434,26,397,26],[434,27,397,27],[434,28,397,28,"it"],[434,30,397,30],[434,32,397,32,"i"],[434,33,397,33],[434,38,397,38,"it"],[434,40,397,40],[434,41,397,41,"param"],[434,46,397,46],[434,49,397,49],[435,6,398,4,"index"],[435,11,398,9],[435,13,398,11,"i"],[435,14,398,12],[436,6,399,4,"screen"],[436,12,399,10],[436,14,399,12,"it"],[436,16,399,14],[436,17,399,15,"screen"],[436,23,399,21],[437,6,400,4,"name"],[437,10,400,8],[437,12,400,10,"it"],[437,14,400,12],[437,15,400,13,"param"],[438,4,401,2],[438,5,401,3],[438,8,401,6],[438,12,401,10],[438,13,401,11],[438,14,401,12,"filter"],[438,20,401,18],[438,21,401,19,"it"],[438,23,401,21],[438,27,401,25,"it"],[438,29,401,27],[438,33,401,31],[438,37,401,35],[438,38,401,36],[439,4,402,2],[439,11,402,9],[440,6,403,4,"screen"],[440,12,403,10],[441,6,404,4,"regex"],[441,11,404,9],[442,6,405,4,"segments"],[442,14,405,12],[443,6,406,4,"params"],[443,12,406,10],[444,6,407,4,"routeNames"],[444,16,407,14],[445,6,408,4,"parse"],[446,4,409,2],[446,5,409,3],[447,2,410,0],[447,3,410,1],[448,2,411,0],[448,6,411,6,"findParseConfigForRoute"],[448,29,411,29],[448,32,411,32,"findParseConfigForRoute"],[448,33,411,33,"routeName"],[448,42,411,42],[448,44,411,44,"flatConfig"],[448,54,411,54],[448,59,411,59],[449,4,412,2],[449,9,412,7],[449,13,412,13,"config"],[449,19,412,19],[449,23,412,23,"flatConfig"],[449,33,412,33],[449,35,412,35],[450,6,413,4],[450,10,413,8,"routeName"],[450,19,413,17],[450,24,413,22,"config"],[450,30,413,28],[450,31,413,29,"routeNames"],[450,41,413,39],[450,42,413,40,"config"],[450,48,413,46],[450,49,413,47,"routeNames"],[450,59,413,57],[450,60,413,58,"length"],[450,66,413,64],[450,69,413,67],[450,70,413,68],[450,71,413,69],[450,73,413,71],[451,8,414,6],[451,15,414,13,"config"],[451,21,414,19],[451,22,414,20,"parse"],[451,27,414,25],[452,6,415,4],[453,4,416,2],[454,4,417,2],[454,11,417,9,"undefined"],[454,20,417,18],[455,2,418,0],[455,3,418,1],[457,2,420,0],[458,2,421,0],[458,6,421,6,"findInitialRoute"],[458,22,421,22],[458,25,421,25,"findInitialRoute"],[458,26,421,26,"routeName"],[458,35,421,35],[458,37,421,37,"parentScreens"],[458,50,421,50],[458,52,421,52,"initialRoutes"],[458,65,421,65],[458,70,421,70],[459,4,422,2],[459,9,422,7],[459,13,422,13,"config"],[459,19,422,19],[459,23,422,23,"initialRoutes"],[459,36,422,36],[459,38,422,38],[460,6,423,4],[460,10,423,8,"parentScreens"],[460,23,423,21],[460,24,423,22,"length"],[460,30,423,28],[460,35,423,33,"config"],[460,41,423,39],[460,42,423,40,"parentScreens"],[460,55,423,53],[460,56,423,54,"length"],[460,62,423,60],[460,64,423,62],[461,8,424,6],[461,12,424,10,"sameParents"],[461,23,424,21],[461,26,424,24],[461,30,424,28],[462,8,425,6],[462,13,425,11],[462,17,425,15,"i"],[462,18,425,16],[462,21,425,19],[462,22,425,20],[462,24,425,22,"i"],[462,25,425,23],[462,28,425,26,"parentScreens"],[462,41,425,39],[462,42,425,40,"length"],[462,48,425,46],[462,50,425,48,"i"],[462,51,425,49],[462,53,425,51],[462,55,425,53],[463,10,426,8],[463,14,426,12,"parentScreens"],[463,27,426,25],[463,28,426,26,"i"],[463,29,426,27],[463,30,426,28],[463,31,426,29,"localeCompare"],[463,44,426,42],[463,45,426,43,"config"],[463,51,426,49],[463,52,426,50,"parentScreens"],[463,65,426,63],[463,66,426,64,"i"],[463,67,426,65],[463,68,426,66],[463,69,426,67],[463,74,426,72],[463,75,426,73],[463,77,426,75],[464,12,427,10,"sameParents"],[464,23,427,21],[464,26,427,24],[464,31,427,29],[465,12,428,10],[466,10,429,8],[467,8,430,6],[468,8,431,6],[468,12,431,10,"sameParents"],[468,23,431,21],[468,25,431,23],[469,10,432,8],[469,17,432,15,"routeName"],[469,26,432,24],[469,31,432,29,"config"],[469,37,432,35],[469,38,432,36,"initialRouteName"],[469,54,432,52],[469,57,432,55,"config"],[469,63,432,61],[469,64,432,62,"initialRouteName"],[469,80,432,78],[469,83,432,81,"undefined"],[469,92,432,90],[470,8,433,6],[471,6,434,4],[472,4,435,2],[473,4,436,2],[473,11,436,9,"undefined"],[473,20,436,18],[474,2,437,0],[474,3,437,1],[476,2,439,0],[477,2,440,0],[478,2,441,0],[478,6,441,6,"createStateObject"],[478,23,441,23],[478,26,441,26,"createStateObject"],[478,27,441,27,"initialRoute"],[478,39,441,39],[478,41,441,41,"route"],[478,46,441,46],[478,48,441,48,"isEmpty"],[478,55,441,55],[478,60,441,60],[479,4,442,2],[479,8,442,6,"isEmpty"],[479,15,442,13],[479,17,442,15],[480,6,443,4],[480,10,443,8,"initialRoute"],[480,22,443,20],[480,24,443,22],[481,8,444,6],[481,15,444,13],[482,10,445,8,"index"],[482,15,445,13],[482,17,445,15],[482,18,445,16],[483,10,446,8,"routes"],[483,16,446,14],[483,18,446,16],[483,19,446,17],[484,12,447,10,"name"],[484,16,447,14],[484,18,447,16,"initialRoute"],[485,10,448,8],[485,11,448,9],[485,13,448,11,"route"],[485,18,448,16],[486,8,449,6],[486,9,449,7],[487,6,450,4],[487,7,450,5],[487,13,450,11],[488,8,451,6],[488,15,451,13],[489,10,452,8,"routes"],[489,16,452,14],[489,18,452,16],[489,19,452,17,"route"],[489,24,452,22],[490,8,453,6],[490,9,453,7],[491,6,454,4],[492,4,455,2],[492,5,455,3],[492,11,455,9],[493,6,456,4],[493,10,456,8,"initialRoute"],[493,22,456,20],[493,24,456,22],[494,8,457,6],[494,15,457,13],[495,10,458,8,"index"],[495,15,458,13],[495,17,458,15],[495,18,458,16],[496,10,459,8,"routes"],[496,16,459,14],[496,18,459,16],[496,19,459,17],[497,12,460,10,"name"],[497,16,460,14],[497,18,460,16,"initialRoute"],[498,10,461,8],[498,11,461,9],[498,13,461,11],[499,12,462,10],[499,15,462,13,"route"],[499,20,462,18],[500,12,463,10,"state"],[500,17,463,15],[500,19,463,17],[501,14,464,12,"routes"],[501,20,464,18],[501,22,464,20],[502,12,465,10],[503,10,466,8],[503,11,466,9],[504,8,467,6],[504,9,467,7],[505,6,468,4],[505,7,468,5],[505,13,468,11],[506,8,469,6],[506,15,469,13],[507,10,470,8,"routes"],[507,16,470,14],[507,18,470,16],[507,19,470,17],[508,12,471,10],[508,15,471,13,"route"],[508,20,471,18],[509,12,472,10,"state"],[509,17,472,15],[509,19,472,17],[510,14,473,12,"routes"],[510,20,473,18],[510,22,473,20],[511,12,474,10],[512,10,475,8],[512,11,475,9],[513,8,476,6],[513,9,476,7],[514,6,477,4],[515,4,478,2],[516,2,479,0],[516,3,479,1],[517,2,480,0],[517,6,480,6,"createNestedStateObject"],[517,29,480,29],[517,32,480,32,"createNestedStateObject"],[517,33,480,33,"path"],[517,37,480,37],[517,39,480,39,"routes"],[517,45,480,45],[517,47,480,47,"initialRoutes"],[517,60,480,60],[517,62,480,62,"flatConfig"],[517,72,480,72],[517,77,480,77],[518,4,481,2],[518,8,481,6,"route"],[518,13,481,11],[518,16,481,14,"routes"],[518,22,481,20],[518,23,481,21,"shift"],[518,28,481,26],[518,29,481,27],[518,30,481,28],[519,4,482,2],[519,8,482,8,"parentScreens"],[519,21,482,21],[519,24,482,24],[519,26,482,26],[520,4,483,2],[520,8,483,6,"initialRoute"],[520,20,483,18],[520,23,483,21,"findInitialRoute"],[520,39,483,37],[520,40,483,38,"route"],[520,45,483,43],[520,46,483,44,"name"],[520,50,483,48],[520,52,483,50,"parentScreens"],[520,65,483,63],[520,67,483,65,"initialRoutes"],[520,80,483,78],[520,81,483,79],[521,4,484,2,"parentScreens"],[521,17,484,15],[521,18,484,16,"push"],[521,22,484,20],[521,23,484,21,"route"],[521,28,484,26],[521,29,484,27,"name"],[521,33,484,31],[521,34,484,32],[522,4,485,2],[522,8,485,8,"state"],[522,13,485,13],[522,16,485,16,"createStateObject"],[522,33,485,33],[522,34,485,34,"initialRoute"],[522,46,485,46],[522,48,485,48,"route"],[522,53,485,53],[522,55,485,55,"routes"],[522,61,485,61],[522,62,485,62,"length"],[522,68,485,68],[522,73,485,73],[522,74,485,74],[522,75,485,75],[523,4,486,2],[523,8,486,6,"routes"],[523,14,486,12],[523,15,486,13,"length"],[523,21,486,19],[523,24,486,22],[523,25,486,23],[523,27,486,25],[524,6,487,4],[524,10,487,8,"nestedState"],[524,21,487,19],[524,24,487,22,"state"],[524,29,487,27],[525,6,488,4],[525,13,488,11,"route"],[525,18,488,16],[525,21,488,19,"routes"],[525,27,488,25],[525,28,488,26,"shift"],[525,33,488,31],[525,34,488,32],[525,35,488,33],[525,37,488,35],[526,8,489,6,"initialRoute"],[526,20,489,18],[526,23,489,21,"findInitialRoute"],[526,39,489,37],[526,40,489,38,"route"],[526,45,489,43],[526,46,489,44,"name"],[526,50,489,48],[526,52,489,50,"parentScreens"],[526,65,489,63],[526,67,489,65,"initialRoutes"],[526,80,489,78],[526,81,489,79],[527,8,490,6],[527,12,490,12,"nestedStateIndex"],[527,28,490,28],[527,31,490,31,"nestedState"],[527,42,490,42],[527,43,490,43,"index"],[527,48,490,48],[527,52,490,52,"nestedState"],[527,63,490,63],[527,64,490,64,"routes"],[527,70,490,70],[527,71,490,71,"length"],[527,77,490,77],[527,80,490,80],[527,81,490,81],[528,8,491,6,"nestedState"],[528,19,491,17],[528,20,491,18,"routes"],[528,26,491,24],[528,27,491,25,"nestedStateIndex"],[528,43,491,41],[528,44,491,42],[528,45,491,43,"state"],[528,50,491,48],[528,53,491,51,"createStateObject"],[528,70,491,68],[528,71,491,69,"initialRoute"],[528,83,491,81],[528,85,491,83,"route"],[528,90,491,88],[528,92,491,90,"routes"],[528,98,491,96],[528,99,491,97,"length"],[528,105,491,103],[528,110,491,108],[528,111,491,109],[528,112,491,110],[529,8,492,6],[529,12,492,10,"routes"],[529,18,492,16],[529,19,492,17,"length"],[529,25,492,23],[529,28,492,26],[529,29,492,27],[529,31,492,29],[530,10,493,8,"nestedState"],[530,21,493,19],[530,24,493,22,"nestedState"],[530,35,493,33],[530,36,493,34,"routes"],[530,42,493,40],[530,43,493,41,"nestedStateIndex"],[530,59,493,57],[530,60,493,58],[530,61,493,59,"state"],[530,66,493,64],[531,8,494,6],[532,8,495,6,"parentScreens"],[532,21,495,19],[532,22,495,20,"push"],[532,26,495,24],[532,27,495,25,"route"],[532,32,495,30],[532,33,495,31,"name"],[532,37,495,35],[532,38,495,36],[533,6,496,4],[534,4,497,2],[535,4,498,2,"route"],[535,9,498,7],[535,12,498,10],[535,13,498,11],[535,14,498,12],[535,16,498,14,"require"],[535,23,498,14],[535,24,498,14,"_dependencyMap"],[535,38,498,14],[535,68,498,32,"findFocusedRoute"],[535,84,498,48],[535,86,498,50,"state"],[535,91,498,55],[535,92,498,56],[536,4,499,2,"route"],[536,9,499,7],[536,10,499,8,"path"],[536,14,499,12],[536,17,499,15,"path"],[536,21,499,19],[536,22,499,20,"replace"],[536,29,499,27],[536,30,499,28],[536,35,499,33],[536,37,499,35],[536,39,499,37],[536,40,499,38],[537,4,500,2],[537,8,500,8,"params"],[537,14,500,14],[537,17,500,17,"parseQueryParams"],[537,33,500,33],[537,34,500,34,"path"],[537,38,500,38],[537,40,500,40,"flatConfig"],[537,50,500,50],[537,53,500,53,"findParseConfigForRoute"],[537,76,500,76],[537,77,500,77,"route"],[537,82,500,82],[537,83,500,83,"name"],[537,87,500,87],[537,89,500,89,"flatConfig"],[537,99,500,99],[537,100,500,100],[537,103,500,103,"undefined"],[537,112,500,112],[537,113,500,113],[538,4,501,2],[538,8,501,6,"params"],[538,14,501,12],[538,16,501,14],[539,6,502,4,"route"],[539,11,502,9],[539,12,502,10,"params"],[539,18,502,16],[539,21,502,19],[540,8,503,6],[540,11,503,9,"route"],[540,16,503,14],[540,17,503,15,"params"],[540,23,503,21],[541,8,504,6],[541,11,504,9,"params"],[542,6,505,4],[542,7,505,5],[543,4,506,2],[544,4,507,2],[544,11,507,9,"state"],[544,16,507,14],[545,2,508,0],[545,3,508,1],[546,2,509,0],[546,6,509,6,"parseQueryParams"],[546,22,509,22],[546,25,509,25,"parseQueryParams"],[546,26,509,26,"path"],[546,30,509,30],[546,32,509,32,"parseConfig"],[546,43,509,43],[546,48,509,48],[547,4,510,2],[547,8,510,8,"query"],[547,13,510,13],[547,16,510,16,"path"],[547,20,510,20],[547,21,510,21,"split"],[547,26,510,26],[547,27,510,27],[547,30,510,30],[547,31,510,31],[547,32,510,32],[547,33,510,33],[547,34,510,34],[548,4,511,2],[548,8,511,8,"params"],[548,14,511,14],[548,17,511,17,"queryString"],[548,28,511,28],[548,29,511,29,"parse"],[548,34,511,34],[548,35,511,35,"query"],[548,40,511,40],[548,41,511,41],[549,4,512,2],[549,8,512,6,"parseConfig"],[549,19,512,17],[549,21,512,19],[550,6,513,4,"Object"],[550,12,513,10],[550,13,513,11,"keys"],[550,17,513,15],[550,18,513,16,"params"],[550,24,513,22],[550,25,513,23],[550,26,513,24,"forEach"],[550,33,513,31],[550,34,513,32,"name"],[550,38,513,36],[550,42,513,40],[551,8,514,6],[551,12,514,10,"Object"],[551,18,514,16],[551,19,514,17,"hasOwnProperty"],[551,33,514,31],[551,34,514,32,"call"],[551,38,514,36],[551,39,514,37,"parseConfig"],[551,50,514,48],[551,52,514,50,"name"],[551,56,514,54],[551,57,514,55],[551,61,514,59],[551,68,514,66,"params"],[551,74,514,72],[551,75,514,73,"name"],[551,79,514,77],[551,80,514,78],[551,85,514,83],[551,93,514,91],[551,95,514,93],[552,10,515,8,"params"],[552,16,515,14],[552,17,515,15,"name"],[552,21,515,19],[552,22,515,20],[552,25,515,23,"parseConfig"],[552,36,515,34],[552,37,515,35,"name"],[552,41,515,39],[552,42,515,40],[552,43,515,41,"params"],[552,49,515,47],[552,50,515,48,"name"],[552,54,515,52],[552,55,515,53],[552,56,515,54],[553,8,516,6],[554,6,517,4],[554,7,517,5],[554,8,517,6],[555,4,518,2],[556,4,519,2],[556,11,519,9,"Object"],[556,17,519,15],[556,18,519,16,"keys"],[556,22,519,20],[556,23,519,21,"params"],[556,29,519,27],[556,30,519,28],[556,31,519,29,"length"],[556,37,519,35],[556,40,519,38,"params"],[556,46,519,44],[556,49,519,47,"undefined"],[556,58,519,56],[557,2,520,0],[557,3,520,1],[558,0,520,2],[558,3]],"functionMap":{"names":["<global>","_getRequireWildcardCache","_interopRequireWildcard","_interopRequireDefault","getStateFromPath","remaining.split.filter.map$argument_0","configs.find$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getSortedNormalizedConfigs","Object.keys.map$argument_0","concat.sort$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","matchAgainstConfigs","config.routeNames.map$argument_0","Object.entries.map$argument_0","routeConfig.params.find$argument_0","Object.entries.map.filter$argument_0","Object.entries.map.filter.map$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","map$argument_0","parts.map$argument_0","parts.map.filter$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;ACa,4MD;AEC,mkBF;AGC,qFH;AIsB;4DC4B;KDK;+BES,0CF;gEGE;QHE;CJuB;AQM;CRO;ASC;CTa;AUC;CVS;AWC;+CCE,uED,QE;GF2E;CXC;AcC;iBCE;uDCQ,sBD,YE,sBF;GDQ;CdC;AkBC;qBCC;IDI;ClBC;4BoBC;qCCa;yCfC;SeG;yGCC;gDCE,wBD;SDK,SG,gBH,MI;SJO;ODU;CpBS;gC0BC;0CCgE;ODG;C1BK;yB4BC;kECQ;MDG;yDEE;GFM;6BEC,gBF;2BEC;UFI,SG,gBH;C5BS;gCgCC;ChCO;yBiCG;CjCgB;0BkCI;ClCsC;gCmCC;CnC4B;yBoCC;gCTI;KSI;CpCG"}},"type":"js/module"}]}