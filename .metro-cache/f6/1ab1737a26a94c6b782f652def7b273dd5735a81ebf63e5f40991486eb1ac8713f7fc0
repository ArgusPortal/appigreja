{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":162,"column":32,"index":7282}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"./Font.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":126},"end":{"line":3,"column":43,"index":169}}],"key":"iwvcxaVgfIXdww6iPrKSgtcaZy8="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":162,"column":32,"index":7282}}],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo="}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":46,"index":125}}],"key":"7dk3JQGwGYesJt8OOG3pkBz+dtE="}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY="}},{"name":"./memory","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}},{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}},{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}},{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}},{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}},{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}},{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}},{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}},{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}},{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}},{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}},{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}},{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}}],"key":"wlrMBDc1MVhnZOig0xhYu83J328="}},{"name":"./server","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":366},"end":{"line":6,"column":46,"index":412}},{"start":{"line":6,"column":0,"index":366},"end":{"line":6,"column":46,"index":412}}],"key":"QinwpQMs5c8GY+myVdgXEzx55Tw="}},{"name":"./FontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":70,"index":240}},{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":70,"index":240}}],"key":"ubgLNxOkixzH8pVapAwap9wQ8XU="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function () {\n      return require(_dependencyMap[1], \"./Font.types\").FontDisplay;\n    }\n  });\n  exports.getLoadedFonts = getLoadedFonts;\n  exports.isLoaded = isLoaded;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _ExpoFontLoader = _interopRequireDefault(require(_dependencyMap[3], \"./ExpoFontLoader\"));\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` has finished loading.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @return Returns `true` if the font has fully loaded.\n   */\n  function isLoaded(fontFamily) {\n    if (require(_dependencyMap[4], \"expo-modules-core\").Platform.OS === 'web') {\n      return (0, require(_dependencyMap[5], \"./memory\").isLoadedInCache)(fontFamily) || !!_ExpoFontLoader.default.isLoaded(fontFamily);\n    }\n    return (0, require(_dependencyMap[5], \"./memory\").isLoadedNative)(fontFamily);\n  }\n  /**\n   * Synchronously get all the fonts that have been loaded.\n   * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.\n   *\n   * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).\n   */\n  function getLoadedFonts() {\n    return _ExpoFontLoader.default.getLoadedFonts();\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` is still being loaded.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @returns Returns `true` if the font is still loading.\n   */\n  function isLoading(fontFamily) {\n    return fontFamily in require(_dependencyMap[5], \"./memory\").loadPromises;\n  }\n  // @needsAudit\n  /**\n   * An efficient method for loading fonts from static or remote resources which can then be used\n   * with the platform's native text elements. In the browser, this generates a `@font-face` block in\n   * a shared style sheet for fonts. No CSS is needed to use this method.\n   *\n   * > **Note**: We recommend using the [config plugin](#configuration-in-appjsonappconfigjs) instead whenever possible.\n   *\n   * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)\n   * with React Native `Text` elements.\n   * @param source The font asset that should be loaded into the `fontFamily` namespace.\n   *\n   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n   */\n  function loadAsync(fontFamilyOrFontMap, source) {\n    // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n    // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n    // standard Expo SDK style guide.\n    var isServer = require(_dependencyMap[4], \"expo-modules-core\").Platform.OS === 'web' && typeof window === 'undefined';\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        return Promise.reject(new (require(_dependencyMap[4], \"expo-modules-core\").CodedError)(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      if (isServer) {\n        names.map(name => (0, require(_dependencyMap[6], \"./server\").registerStaticFont)(name, fontMap[name]));\n        return Promise.resolve();\n      }\n      return Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name]))).then(() => {});\n    }\n    if (isServer) {\n      (0, require(_dependencyMap[6], \"./server\").registerStaticFont)(fontFamilyOrFontMap, source);\n      return Promise.resolve();\n    }\n    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  }\n  function loadFontInNamespaceAsync(_x, _x2) {\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unloads all the custom fonts. This is used for testing.\n   * @hidden\n   */\n  function _loadFontInNamespaceAsync() {\n    _loadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, source) {\n      if (!source) {\n        throw new (require(_dependencyMap[4], \"expo-modules-core\").CodedError)(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n      }\n      // we consult the native module to see if the font is already loaded\n      // this is slower than checking the cache but can help avoid loading the same font n times\n      if (isLoaded(fontFamily)) {\n        return;\n      }\n      if (require(_dependencyMap[5], \"./memory\").loadPromises.hasOwnProperty(fontFamily)) {\n        return require(_dependencyMap[5], \"./memory\").loadPromises[fontFamily];\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      var asset = (0, require(_dependencyMap[7], \"./FontLoader\").getAssetForSource)(source);\n      require(_dependencyMap[5], \"./memory\").loadPromises[fontFamily] = (0, _asyncToGenerator2.default)(function* () {\n        try {\n          yield (0, require(_dependencyMap[7], \"./FontLoader\").loadSingleFontAsync)(fontFamily, asset);\n          (0, require(_dependencyMap[5], \"./memory\").markLoaded)(fontFamily);\n        } finally {\n          delete require(_dependencyMap[5], \"./memory\").loadPromises[fontFamily];\n        }\n      })();\n      yield require(_dependencyMap[5], \"./memory\").loadPromises[fontFamily];\n    });\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function unloadAllAsync() {\n    return _unloadAllAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unload custom fonts matching the `fontFamily`s and display values provided.\n   * This is used for testing.\n   *\n   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n   * the custom font originally.\n   * @hidden\n   */\n  function _unloadAllAsync() {\n    _unloadAllAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoFontLoader.default.unloadAllAsync) {\n        throw new (require(_dependencyMap[4], \"expo-modules-core\").UnavailabilityError)('expo-font', 'unloadAllAsync');\n      }\n      if (Object.keys(require(_dependencyMap[5], \"./memory\").loadPromises).length) {\n        throw new (require(_dependencyMap[4], \"expo-modules-core\").CodedError)(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(require(_dependencyMap[5], \"./memory\").loadPromises).join(', ')}`);\n      }\n      (0, require(_dependencyMap[5], \"./memory\").purgeCache)();\n      yield _ExpoFontLoader.default.unloadAllAsync();\n    });\n    return _unloadAllAsync.apply(this, arguments);\n  }\n  function unloadAsync(_x3, _x4) {\n    return _unloadAsync.apply(this, arguments);\n  }\n  function _unloadAsync() {\n    _unloadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, options) {\n      if (!_ExpoFontLoader.default.unloadAsync) {\n        throw new (require(_dependencyMap[4], \"expo-modules-core\").UnavailabilityError)('expo-font', 'unloadAsync');\n      }\n      if (typeof fontFamilyOrFontMap === 'object') {\n        if (options) {\n          throw new (require(_dependencyMap[4], \"expo-modules-core\").CodedError)(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        var fontMap = fontFamilyOrFontMap;\n        var names = Object.keys(fontMap);\n        yield Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n        return;\n      }\n      return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n    });\n    return _unloadAsync.apply(this, arguments);\n  }\n  function unloadFontInNamespaceAsync(_x5, _x6) {\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function _unloadFontInNamespaceAsync() {\n    _unloadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, options) {\n      if (!isLoaded(fontFamily)) {\n        return;\n      } else {\n        (0, require(_dependencyMap[5], \"./memory\").purgeFontFamilyFromCache)(fontFamily);\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      if (!fontFamily) {\n        throw new (require(_dependencyMap[4], \"expo-modules-core\").CodedError)(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n      }\n      yield _ExpoFontLoader.default.unloadAsync(fontFamily, options);\n    });\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n});","lineCount":194,"map":[[19,2,2,0],[19,6,2,0,"_ExpoFontLoader"],[19,21,2,0],[19,24,2,0,"_interopRequireDefault"],[19,46,2,0],[19,47,2,0,"require"],[19,54,2,0],[19,55,2,0,"_dependencyMap"],[19,69,2,0],[20,2,7,0],[21,2,8,0],[22,0,9,0],[23,0,10,0],[24,0,11,0],[25,0,12,0],[26,0,13,0],[27,2,14,7],[27,11,14,16,"isLoaded"],[27,19,14,24,"isLoaded"],[27,20,14,25,"fontFamily"],[27,30,14,35],[27,32,14,37],[28,4,15,4],[28,8,15,8,"Platform"],[28,34,15,8],[28,35,15,8,"Platform"],[28,64,15,16],[28,65,15,17,"OS"],[28,67,15,19],[28,72,15,24],[28,77,15,29],[28,79,15,31],[29,6,16,8],[29,13,16,15],[29,17,16,15,"isLoadedInCache"],[29,43,16,15],[29,44,16,15,"isLoadedInCache"],[29,71,16,30],[29,73,16,31,"fontFamily"],[29,83,16,41],[29,84,16,42],[29,88,16,46],[29,89,16,47],[29,90,16,48,"ExpoFontLoader"],[29,113,16,62],[29,114,16,63,"isLoaded"],[29,122,16,71],[29,123,16,72,"fontFamily"],[29,133,16,82],[29,134,16,83],[30,4,17,4],[31,4,18,4],[31,11,18,11],[31,15,18,11,"isLoadedNative"],[31,41,18,11],[31,42,18,11,"isLoadedNative"],[31,68,18,25],[31,70,18,26,"fontFamily"],[31,80,18,36],[31,81,18,37],[32,2,19,0],[33,2,20,0],[34,0,21,0],[35,0,22,0],[36,0,23,0],[37,0,24,0],[38,0,25,0],[39,2,26,7],[39,11,26,16,"getLoadedFonts"],[39,25,26,30,"getLoadedFonts"],[39,26,26,30],[39,28,26,33],[40,4,27,4],[40,11,27,11,"ExpoFontLoader"],[40,34,27,25],[40,35,27,26,"getLoadedFonts"],[40,49,27,40],[40,50,27,41],[40,51,27,42],[41,2,28,0],[42,2,29,0],[43,2,30,0],[44,0,31,0],[45,0,32,0],[46,0,33,0],[47,0,34,0],[48,0,35,0],[49,2,36,7],[49,11,36,16,"isLoading"],[49,20,36,25,"isLoading"],[49,21,36,26,"fontFamily"],[49,31,36,36],[49,33,36,38],[50,4,37,4],[50,11,37,11,"fontFamily"],[50,21,37,21],[50,25,37,25,"loadPromises"],[50,51,37,25],[50,52,37,25,"loadPromises"],[50,76,37,37],[51,2,38,0],[52,2,39,0],[53,2,40,0],[54,0,41,0],[55,0,42,0],[56,0,43,0],[57,0,44,0],[58,0,45,0],[59,0,46,0],[60,0,47,0],[61,0,48,0],[62,0,49,0],[63,0,50,0],[64,0,51,0],[65,0,52,0],[66,0,53,0],[67,2,54,7],[67,11,54,16,"loadAsync"],[67,20,54,25,"loadAsync"],[67,21,54,26,"fontFamilyOrFontMap"],[67,40,54,45],[67,42,54,47,"source"],[67,48,54,53],[67,50,54,55],[68,4,55,4],[69,4,56,4],[70,4,57,4],[71,4,58,4],[71,8,58,10,"isServer"],[71,16,58,18],[71,19,58,21,"Platform"],[71,45,58,21],[71,46,58,21,"Platform"],[71,75,58,29],[71,76,58,30,"OS"],[71,78,58,32],[71,83,58,37],[71,88,58,42],[71,92,58,46],[71,99,58,53,"window"],[71,105,58,59],[71,110,58,64],[71,121,58,75],[72,4,59,4],[72,8,59,8],[72,15,59,15,"fontFamilyOrFontMap"],[72,34,59,34],[72,39,59,39],[72,47,59,47],[72,49,59,49],[73,6,60,8],[73,10,60,12,"source"],[73,16,60,18],[73,18,60,20],[74,8,61,12],[74,15,61,19,"Promise"],[74,22,61,26],[74,23,61,27,"reject"],[74,29,61,33],[74,30,61,34],[74,35,61,38,"CodedError"],[74,61,61,38],[74,62,61,38,"CodedError"],[74,93,61,48],[74,95,61,49],[74,109,61,63],[74,111,61,65],[74,165,61,119,"source"],[74,171,61,125],[74,277,61,231],[74,278,61,232],[74,279,61,233],[75,6,62,8],[76,6,63,8],[76,10,63,14,"fontMap"],[76,17,63,21],[76,20,63,24,"fontFamilyOrFontMap"],[76,39,63,43],[77,6,64,8],[77,10,64,14,"names"],[77,15,64,19],[77,18,64,22,"Object"],[77,24,64,28],[77,25,64,29,"keys"],[77,29,64,33],[77,30,64,34,"fontMap"],[77,37,64,41],[77,38,64,42],[78,6,65,8],[78,10,65,12,"isServer"],[78,18,65,20],[78,20,65,22],[79,8,66,12,"names"],[79,13,66,17],[79,14,66,18,"map"],[79,17,66,21],[79,18,66,23,"name"],[79,22,66,27],[79,26,66,32],[79,30,66,32,"registerStaticFont"],[79,56,66,32],[79,57,66,32,"registerStaticFont"],[79,87,66,50],[79,89,66,51,"name"],[79,93,66,55],[79,95,66,57,"fontMap"],[79,102,66,64],[79,103,66,65,"name"],[79,107,66,69],[79,108,66,70],[79,109,66,71],[79,110,66,72],[80,8,67,12],[80,15,67,19,"Promise"],[80,22,67,26],[80,23,67,27,"resolve"],[80,30,67,34],[80,31,67,35],[80,32,67,36],[81,6,68,8],[82,6,69,8],[82,13,69,15,"Promise"],[82,20,69,22],[82,21,69,23,"all"],[82,24,69,26],[82,25,69,27,"names"],[82,30,69,32],[82,31,69,33,"map"],[82,34,69,36],[82,35,69,38,"name"],[82,39,69,42],[82,43,69,47,"loadFontInNamespaceAsync"],[82,67,69,71],[82,68,69,72,"name"],[82,72,69,76],[82,74,69,78,"fontMap"],[82,81,69,85],[82,82,69,86,"name"],[82,86,69,90],[82,87,69,91],[82,88,69,92],[82,89,69,93],[82,90,69,94],[82,91,69,95,"then"],[82,95,69,99],[82,96,69,100],[82,102,69,106],[82,103,69,108],[82,104,69,109],[82,105,69,110],[83,4,70,4],[84,4,71,4],[84,8,71,8,"isServer"],[84,16,71,16],[84,18,71,18],[85,6,72,8],[85,10,72,8,"registerStaticFont"],[85,36,72,8],[85,37,72,8,"registerStaticFont"],[85,67,72,26],[85,69,72,27,"fontFamilyOrFontMap"],[85,88,72,46],[85,90,72,48,"source"],[85,96,72,54],[85,97,72,55],[86,6,73,8],[86,13,73,15,"Promise"],[86,20,73,22],[86,21,73,23,"resolve"],[86,28,73,30],[86,29,73,31],[86,30,73,32],[87,4,74,4],[88,4,75,4],[88,11,75,11,"loadFontInNamespaceAsync"],[88,35,75,35],[88,36,75,36,"fontFamilyOrFontMap"],[88,55,75,55],[88,57,75,57,"source"],[88,63,75,63],[88,64,75,64],[89,2,76,0],[90,2,76,1],[90,11,77,15,"loadFontInNamespaceAsync"],[90,35,77,39,"loadFontInNamespaceAsync"],[90,36,77,39,"_x"],[90,38,77,39],[90,40,77,39,"_x2"],[90,43,77,39],[91,4,77,39],[91,11,77,39,"_loadFontInNamespaceAsync"],[91,36,77,39],[91,37,77,39,"apply"],[91,42,77,39],[91,49,77,39,"arguments"],[91,58,77,39],[92,2,77,39],[92,4,105,0],[93,2,106,0],[94,0,107,0],[95,0,108,0],[96,0,109,0],[97,2,106,0],[97,11,106,0,"_loadFontInNamespaceAsync"],[97,37,106,0],[98,4,106,0,"_loadFontInNamespaceAsync"],[98,29,106,0],[98,36,106,0,"_asyncToGenerator2"],[98,54,106,0],[98,55,106,0,"default"],[98,62,106,0],[98,64,77,0],[98,75,77,40,"fontFamily"],[98,85,77,50],[98,87,77,52,"source"],[98,93,77,58],[98,95,77,60],[99,6,78,4],[99,10,78,8],[99,11,78,9,"source"],[99,17,78,15],[99,19,78,17],[100,8,79,8],[100,14,79,14],[100,19,79,18,"CodedError"],[100,45,79,18],[100,46,79,18,"CodedError"],[100,77,79,28],[100,79,79,29],[100,96,79,46],[100,98,79,48],[100,147,79,97,"fontFamily"],[100,157,79,107],[100,163,79,113,"source"],[100,169,79,119],[100,239,79,189,"fontFamily"],[100,249,79,199],[100,252,79,202],[100,253,79,203],[101,6,80,4],[102,6,81,4],[103,6,82,4],[104,6,83,4],[104,10,83,8,"isLoaded"],[104,18,83,16],[104,19,83,17,"fontFamily"],[104,29,83,27],[104,30,83,28],[104,32,83,30],[105,8,84,8],[106,6,85,4],[107,6,86,4],[107,10,86,8,"loadPromises"],[107,36,86,8],[107,37,86,8,"loadPromises"],[107,61,86,20],[107,62,86,21,"hasOwnProperty"],[107,76,86,35],[107,77,86,36,"fontFamily"],[107,87,86,46],[107,88,86,47],[107,90,86,49],[108,8,87,8],[108,15,87,15,"loadPromises"],[108,41,87,15],[108,42,87,15,"loadPromises"],[108,66,87,27],[108,67,87,28,"fontFamily"],[108,77,87,38],[108,78,87,39],[109,6,88,4],[110,6,89,4],[111,6,90,4],[112,6,91,4],[113,6,92,4],[114,6,93,4],[114,10,93,10,"asset"],[114,15,93,15],[114,18,93,18],[114,22,93,18,"getAssetForSource"],[114,48,93,18],[114,49,93,18,"getAssetForSource"],[114,82,93,35],[114,84,93,36,"source"],[114,90,93,42],[114,91,93,43],[115,6,94,4,"loadPromises"],[115,32,94,4],[115,33,94,4,"loadPromises"],[115,57,94,16],[115,58,94,17,"fontFamily"],[115,68,94,27],[115,69,94,28],[115,72,94,31],[115,76,94,31,"_asyncToGenerator2"],[115,94,94,31],[115,95,94,31,"default"],[115,102,94,31],[115,104,94,32],[115,117,94,44],[116,8,95,8],[116,12,95,12],[117,10,96,12],[117,16,96,18],[117,20,96,18,"loadSingleFontAsync"],[117,46,96,18],[117,47,96,18,"loadSingleFontAsync"],[117,82,96,37],[117,84,96,38,"fontFamily"],[117,94,96,48],[117,96,96,50,"asset"],[117,101,96,55],[117,102,96,56],[118,10,97,12],[118,14,97,12,"markLoaded"],[118,40,97,12],[118,41,97,12,"markLoaded"],[118,63,97,22],[118,65,97,23,"fontFamily"],[118,75,97,33],[118,76,97,34],[119,8,98,8],[119,9,98,9],[119,18,99,16],[120,10,100,12],[120,17,100,19,"loadPromises"],[120,43,100,19],[120,44,100,19,"loadPromises"],[120,68,100,31],[120,69,100,32,"fontFamily"],[120,79,100,42],[120,80,100,43],[121,8,101,8],[122,6,102,4],[122,7,102,5],[122,9,102,7],[122,10,102,8],[123,6,103,4],[123,12,103,10,"loadPromises"],[123,38,103,10],[123,39,103,10,"loadPromises"],[123,63,103,22],[123,64,103,23,"fontFamily"],[123,74,103,33],[123,75,103,34],[124,4,104,0],[124,5,104,1],[125,4,104,1],[125,11,104,1,"_loadFontInNamespaceAsync"],[125,36,104,1],[125,37,104,1,"apply"],[125,42,104,1],[125,49,104,1,"arguments"],[125,58,104,1],[126,2,104,1],[127,2,104,1],[127,11,110,22,"unloadAllAsync"],[127,25,110,36,"unloadAllAsync"],[127,26,110,36],[128,4,110,36],[128,11,110,36,"_unloadAllAsync"],[128,26,110,36],[128,27,110,36,"apply"],[128,32,110,36],[128,39,110,36,"arguments"],[128,48,110,36],[129,2,110,36],[129,4,120,0],[130,2,121,0],[131,0,122,0],[132,0,123,0],[133,0,124,0],[134,0,125,0],[135,0,126,0],[136,0,127,0],[137,0,128,0],[138,0,129,0],[139,2,121,0],[139,11,121,0,"_unloadAllAsync"],[139,27,121,0],[140,4,121,0,"_unloadAllAsync"],[140,19,121,0],[140,26,121,0,"_asyncToGenerator2"],[140,44,121,0],[140,45,121,0,"default"],[140,52,121,0],[140,54,110,7],[140,67,110,39],[141,6,111,4],[141,10,111,8],[141,11,111,9,"ExpoFontLoader"],[141,34,111,23],[141,35,111,24,"unloadAllAsync"],[141,49,111,38],[141,51,111,40],[142,8,112,8],[142,14,112,14],[142,19,112,18,"UnavailabilityError"],[142,45,112,18],[142,46,112,18,"UnavailabilityError"],[142,86,112,37],[142,88,112,38],[142,99,112,49],[142,101,112,51],[142,117,112,67],[142,118,112,68],[143,6,113,4],[144,6,114,4],[144,10,114,8,"Object"],[144,16,114,14],[144,17,114,15,"keys"],[144,21,114,19],[144,22,114,20,"loadPromises"],[144,48,114,20],[144,49,114,20,"loadPromises"],[144,73,114,32],[144,74,114,33],[144,75,114,34,"length"],[144,81,114,40],[144,83,114,42],[145,8,115,8],[145,14,115,14],[145,19,115,18,"CodedError"],[145,45,115,18],[145,46,115,18,"CodedError"],[145,77,115,28],[145,79,115,29],[145,91,115,41],[145,93,115,43],[145,145,115,95,"Object"],[145,151,115,101],[145,152,115,102,"keys"],[145,156,115,106],[145,157,115,107,"loadPromises"],[145,183,115,107],[145,184,115,107,"loadPromises"],[145,208,115,119],[145,209,115,120],[145,210,115,121,"join"],[145,214,115,125],[145,215,115,126],[145,219,115,130],[145,220,115,131],[145,222,115,133],[145,223,115,134],[146,6,116,4],[147,6,117,4],[147,10,117,4,"purgeCache"],[147,36,117,4],[147,37,117,4,"purgeCache"],[147,59,117,14],[147,61,117,15],[147,62,117,16],[148,6,118,4],[148,12,118,10,"ExpoFontLoader"],[148,35,118,24],[148,36,118,25,"unloadAllAsync"],[148,50,118,39],[148,51,118,40],[148,52,118,41],[149,4,119,0],[149,5,119,1],[150,4,119,1],[150,11,119,1,"_unloadAllAsync"],[150,26,119,1],[150,27,119,1,"apply"],[150,32,119,1],[150,39,119,1,"arguments"],[150,48,119,1],[151,2,119,1],[152,2,119,1],[152,11,130,22,"unloadAsync"],[152,22,130,33,"unloadAsync"],[152,23,130,33,"_x3"],[152,26,130,33],[152,28,130,33,"_x4"],[152,31,130,33],[153,4,130,33],[153,11,130,33,"_unloadAsync"],[153,23,130,33],[153,24,130,33,"apply"],[153,29,130,33],[153,36,130,33,"arguments"],[153,45,130,33],[154,2,130,33],[155,2,130,33],[155,11,130,33,"_unloadAsync"],[155,24,130,33],[156,4,130,33,"_unloadAsync"],[156,16,130,33],[156,23,130,33,"_asyncToGenerator2"],[156,41,130,33],[156,42,130,33,"default"],[156,49,130,33],[156,51,130,7],[156,62,130,34,"fontFamilyOrFontMap"],[156,81,130,53],[156,83,130,55,"options"],[156,90,130,62],[156,92,130,64],[157,6,131,4],[157,10,131,8],[157,11,131,9,"ExpoFontLoader"],[157,34,131,23],[157,35,131,24,"unloadAsync"],[157,46,131,35],[157,48,131,37],[158,8,132,8],[158,14,132,14],[158,19,132,18,"UnavailabilityError"],[158,45,132,18],[158,46,132,18,"UnavailabilityError"],[158,86,132,37],[158,88,132,38],[158,99,132,49],[158,101,132,51],[158,114,132,64],[158,115,132,65],[159,6,133,4],[160,6,134,4],[160,10,134,8],[160,17,134,15,"fontFamilyOrFontMap"],[160,36,134,34],[160,41,134,39],[160,49,134,47],[160,51,134,49],[161,8,135,8],[161,12,135,12,"options"],[161,19,135,19],[161,21,135,21],[162,10,136,12],[162,16,136,18],[162,21,136,22,"CodedError"],[162,47,136,22],[162,48,136,22,"CodedError"],[162,79,136,32],[162,81,136,33],[162,95,136,47],[162,97,136,49],[162,152,136,104,"options"],[162,159,136,111],[162,267,136,219],[162,268,136,220],[163,8,137,8],[164,8,138,8],[164,12,138,14,"fontMap"],[164,19,138,21],[164,22,138,24,"fontFamilyOrFontMap"],[164,41,138,43],[165,8,139,8],[165,12,139,14,"names"],[165,17,139,19],[165,20,139,22,"Object"],[165,26,139,28],[165,27,139,29,"keys"],[165,31,139,33],[165,32,139,34,"fontMap"],[165,39,139,41],[165,40,139,42],[166,8,140,8],[166,14,140,14,"Promise"],[166,21,140,21],[166,22,140,22,"all"],[166,25,140,25],[166,26,140,26,"names"],[166,31,140,31],[166,32,140,32,"map"],[166,35,140,35],[166,36,140,37,"name"],[166,40,140,41],[166,44,140,46,"unloadFontInNamespaceAsync"],[166,70,140,72],[166,71,140,73,"name"],[166,75,140,77],[166,77,140,79,"fontMap"],[166,84,140,86],[166,85,140,87,"name"],[166,89,140,91],[166,90,140,92],[166,91,140,93],[166,92,140,94],[166,93,140,95],[167,8,141,8],[168,6,142,4],[169,6,143,4],[169,19,143,17,"unloadFontInNamespaceAsync"],[169,45,143,43],[169,46,143,44,"fontFamilyOrFontMap"],[169,65,143,63],[169,67,143,65,"options"],[169,74,143,72],[169,75,143,73],[170,4,144,0],[170,5,144,1],[171,4,144,1],[171,11,144,1,"_unloadAsync"],[171,23,144,1],[171,24,144,1,"apply"],[171,29,144,1],[171,36,144,1,"arguments"],[171,45,144,1],[172,2,144,1],[173,2,144,1],[173,11,145,15,"unloadFontInNamespaceAsync"],[173,37,145,41,"unloadFontInNamespaceAsync"],[173,38,145,41,"_x5"],[173,41,145,41],[173,43,145,41,"_x6"],[173,46,145,41],[174,4,145,41],[174,11,145,41,"_unloadFontInNamespaceAsync"],[174,38,145,41],[174,39,145,41,"apply"],[174,44,145,41],[174,51,145,41,"arguments"],[174,60,145,41],[175,2,145,41],[176,2,145,41],[176,11,145,41,"_unloadFontInNamespaceAsync"],[176,39,145,41],[177,4,145,41,"_unloadFontInNamespaceAsync"],[177,31,145,41],[177,38,145,41,"_asyncToGenerator2"],[177,56,145,41],[177,57,145,41,"default"],[177,64,145,41],[177,66,145,0],[177,77,145,42,"fontFamily"],[177,87,145,52],[177,89,145,54,"options"],[177,96,145,61],[177,98,145,63],[178,6,146,4],[178,10,146,8],[178,11,146,9,"isLoaded"],[178,19,146,17],[178,20,146,18,"fontFamily"],[178,30,146,28],[178,31,146,29],[178,33,146,31],[179,8,147,8],[180,6,148,4],[180,7,148,5],[180,13,149,9],[181,8,150,8],[181,12,150,8,"purgeFontFamilyFromCache"],[181,38,150,8],[181,39,150,8,"purgeFontFamilyFromCache"],[181,75,150,32],[181,77,150,33,"fontFamily"],[181,87,150,43],[181,88,150,44],[182,6,151,4],[183,6,152,4],[184,6,153,4],[185,6,154,4],[186,6,155,4],[187,6,156,4],[187,10,156,8],[187,11,156,9,"fontFamily"],[187,21,156,19],[187,23,156,21],[188,8,157,8],[188,14,157,14],[188,19,157,18,"CodedError"],[188,45,157,18],[188,46,157,18,"CodedError"],[188,77,157,28],[188,79,157,29],[188,96,157,46],[188,98,157,48],[188,127,157,77],[188,128,157,78],[189,6,158,4],[190,6,159,4],[190,12,159,10,"ExpoFontLoader"],[190,35,159,24],[190,36,159,25,"unloadAsync"],[190,47,159,36],[190,48,159,37,"fontFamily"],[190,58,159,47],[190,60,159,49,"options"],[190,67,159,56],[190,68,159,57],[191,4,160,0],[191,5,160,1],[192,4,160,1],[192,11,160,1,"_unloadFontInNamespaceAsync"],[192,38,160,1],[192,39,160,1,"apply"],[192,44,160,1],[192,51,160,1,"arguments"],[192,60,160,1],[193,2,160,1],[194,0,160,1],[194,3]],"functionMap":{"names":["<global>","isLoaded","getLoadedFonts","isLoading","loadAsync","names.map$argument_0","Promise.all.then$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCa;CDK;OEO;CFE;OGQ;CHE;OIgB;sBCY,iDD;qCCG,uDD,QE,SF;CJO;AOC;gCCiB;KDQ;CPE;OSM;CTS;OUW;oCLU,yDK;CVI;AWC;CXe"}},"type":"js/module"}]}