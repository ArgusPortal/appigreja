{"dependencies":[{"name":"@babel/runtime/helpers/objectWithoutProperties","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":526,"column":44,"index":21402}}],"key":"fnQVLibs90KHiJ7y48fLgPWzDS0="}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":31,"column":47,"index":1379},"end":{"line":31,"column":78,"index":1410}}],"key":"14QBo/6I2jfYu7Ct29OWBvp5ENM="}},{"name":"./getStateFromPath-forks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":33,"column":26,"index":1497},"end":{"line":33,"column":61,"index":1532}}],"key":"R0kZl7h5DI+/CZCR2+pJK8wn5iY="}},{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":30,"column":17,"index":1295},"end":{"line":30,"column":52,"index":1330}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s="}},{"name":"./findFocusedRoute","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":32,"column":27,"index":1440},"end":{"line":32,"column":56,"index":1469}}],"key":"JPe8xQMI59bnv97OB8syZ4AgEvA="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _objectWithoutProperties = require(_dependencyMap[0], \"@babel/runtime/helpers/objectWithoutProperties\");\n  var _excluded = [\"path\"];\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getStateFromPath = void 0;\n  var escape_string_regexp_1 = __importDefault(require(_dependencyMap[1], \"escape-string-regexp\"));\n  var expo = __importStar(require(_dependencyMap[2], \"./getStateFromPath-forks\"));\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(\n  // END FORK\n  path, options) {\n    var _getConfigResources = getConfigResources(options, this?.routeInfo?.segments),\n      initialRoutes = _getConfigResources.initialRoutes,\n      configs = _getConfigResources.configs,\n      configWithRegexes = _getConfigResources.configWithRegexes;\n    var screens = options?.screens;\n    // START FORK\n    var expoPath = expo.getUrlWithReactNavigationConcessions(path);\n    // END FORK\n    // START FORK\n    var remaining = expoPath.nonstandardPathname\n    // let remaining = path\n    // END FORK\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    var prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n    if (prefix) {\n      // Make sure there is a trailing slash\n      var normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(segment => {\n        var name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(expoPath, _routes, initialRoutes, [], expoPath.url.hash);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      // START FORK\n      var match = expo.matchForEmptyPath(configWithRegexes);\n      // const match = configs.find(\n      //   (config) =>\n      //     config.path === '' &&\n      //     config.routeNames.every(\n      //       // Make sure that none of the parent configs have a non-empty path defined\n      //       (name) => !configs.find((c) => c.screen === name)?.path\n      //     )\n      // );\n      // END FORK\n      if (match) {\n        return createNestedStateObject(expoPath, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs, expoPath.url.hash);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configWithRegexes),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(expoPath, routes, initialRoutes, configs, expoPath.url.hash);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n  exports.getStateFromPath = getStateFromPath;\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  var cachedConfigResources = [undefined, prepareConfigResources()];\n  function getConfigResources(options,\n  // START FORK\n  previousSegments\n  // END FORK\n  ) {\n    // START FORK - We need to disable this caching as our configs can change based upon the current state\n    // if (cachedConfigResources[0] !== options) {\n    //   console.log(previousSegments);\n    cachedConfigResources = [options, prepareConfigResources(options, previousSegments)];\n    // }\n    // END FORK FORK\n    return cachedConfigResources[1];\n  }\n  function prepareConfigResources(options, previousSegments) {\n    if (options) {\n      (0, require(_dependencyMap[3], \"@react-navigation/native\").validatePathConfig)(options);\n    }\n    var initialRoutes = getInitialRoutes(options);\n    var configs = getNormalizedConfigs(initialRoutes, options?.screens, previousSegments);\n    checkForDuplicatedConfigs(configs);\n    var configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    var initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getNormalizedConfigs(initialRoutes) {\n    var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var\n    // START FORK\n    previousSegments\n    // END FORK\n    = arguments.length > 2 ? arguments[2] : undefined;\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).map(expo.appendIsInitial(initialRoutes)).sort(expo.getRouteConfigSorter(previousSegments));\n    // .sort((a, b) => {\n    //   // Sort config so that:\n    //   // - the most exhaustive ones are always at the beginning\n    //   // - patterns with wildcard are always at the end\n    //   // If 2 patterns are same, move the one with less route names up\n    //   // This is an error state, so it's only useful for consistent error messages\n    //   if (a.pattern === b.pattern) {\n    //     return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    //   }\n    //   // If one of the patterns starts with the other, it's more exhaustive\n    //   // So move it up\n    //   if (a.pattern.startsWith(b.pattern)) {\n    //     return -1;\n    //   }\n    //   if (b.pattern.startsWith(a.pattern)) {\n    //     return 1;\n    //   }\n    //   const aParts = a.pattern.split('/');\n    //   const bParts = b.pattern.split('/');\n    //   for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n    //     // if b is longer, b get higher priority\n    //     if (aParts[i] == null) {\n    //       return 1;\n    //     }\n    //     // if a is longer, a get higher priority\n    //     if (bParts[i] == null) {\n    //       return -1;\n    //     }\n    //     const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n    //     const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n    //     // if both are wildcard we compare next component\n    //     if (aWildCard && bWildCard) {\n    //       continue;\n    //     }\n    //     // if only a is wild card, b get higher priority\n    //     if (aWildCard) {\n    //       return 1;\n    //     }\n    //     // if only b is wild card, a get higher priority\n    //     if (bWildCard) {\n    //       return -1;\n    //     }\n    //   }\n    //   return bParts.length - aParts.length;\n    // });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      if (acc[config.pattern]) {\n        var a = acc[config.pattern].routeNames;\n        var b = config.routeNames;\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [config.pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      // START FORK\n      // regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      regex: expo.configRegExp(c)\n      // END FORK\n    }));\n  }\n  var joinPaths = function () {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  };\n  var matchAgainstConfigs = (remaining, configs) => {\n    var routes;\n    var remainingPath = remaining;\n    // START FORK\n    var allParams = Object.create(null);\n    // END FORK\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function (config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          var matchResult = config.pattern?.split('/').reduce((acc, p, index) => {\n            if (!expo.isDynamicPart(p)) {\n              return acc;\n            }\n            acc.pos += 1;\n            // START FORK\n            var decodedParamSegment = expo.safelyDecodeURIComponent(\n            // const decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match[(acc.pos + 1) * 2]\n            // Remove trailing slash\n            .replace(/\\/$/, ''));\n            // END FORK\n            Object.assign(acc.matchedParams, {\n              [p]: Object.assign(acc.matchedParams[p] || {}, {\n                [index]: decodedParamSegment\n              })\n            });\n            return acc;\n          }, {\n            pos: -1,\n            matchedParams: {}\n          });\n          var matchedParams = matchResult.matchedParams || {};\n          routes = config.routeNames.map(name => {\n            var routeConfig = configs.find(c => {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === name && config.pattern.startsWith(c.pattern);\n            });\n            // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n            var normalizedPath = routeConfig?.path.split('/').filter(Boolean).join('/');\n            // Get the number of segments in the initial pattern\n            var numInitialSegments = routeConfig?.pattern\n            // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n            .replace(new RegExp(`${(0, escape_string_regexp_1.default)(normalizedPath)}$`), '')?.split('/').length;\n            var params = normalizedPath?.split('/').reduce((acc, p, index) => {\n              if (!expo.isDynamicPart(p)) {\n                return acc;\n              }\n              // Get the real index of the path parameter in the matched path\n              // by offsetting by the number of segments in the initial pattern\n              var offset = numInitialSegments ? numInitialSegments - 1 : 0;\n              // START FORK\n              // const value = matchedParams[p]?.[index + offset];\n              var value = expo.getParamValue(p, matchedParams[p]?.[index + offset]);\n              // END FORK\n              if (value) {\n                // START FORK\n                // const key = p.replace(/^:/, '').replace(/\\?$/, '');\n                var key = expo.replacePart(p);\n                // END FORK\n                acc[key] = routeConfig?.parse?.[key] ? routeConfig.parse[key](value) : value;\n              }\n              return acc;\n            }, {});\n            if (params && Object.keys(params).length) {\n              Object.assign(allParams, params);\n              return {\n                name,\n                params\n              };\n            }\n            return {\n              name\n            };\n          });\n          remainingPath = remainingPath.replace(match[1], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    // START FORK\n    expo.populateParams(routes, allParams);\n    // END FORK\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  var createNormalizedConfigs = function (screen, routeConfig) {\n    var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var initials = arguments.length > 3 ? arguments[3] : undefined;\n    var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n    var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(screen, routeNames, pattern, config));\n    } else if (typeof config === 'object') {\n      var _pattern;\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.parse, config));\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], _pattern ?? parentPattern);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = function (screen, routeNames, pattern, path) {\n    var parse = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n    var config = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    var regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n      if (it.startsWith(':')) {\n        return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n      }\n      return `${it === '*' ? '.*' : (0, escape_string_regexp_1.default)(it)}\\\\/`;\n    }).join('')})`) : undefined;\n    return {\n      screen,\n      regex,\n      pattern,\n      path,\n      // The routeNames array is mutated, so copy it to keep the current state\n      routeNames: [...routeNames],\n      parse,\n      // START FORK\n      ...expo.createConfig(screen, pattern, routeNames, config)\n      // END FORK\n    };\n  };\n  var findParseConfigForRoute = (routeName, flatConfig) => {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, {\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = (_ref, routes, initialRoutes, flatConfig, hash) => {\n    var path = _ref.path,\n      expoURL = _objectWithoutProperties(_ref, _excluded);\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    var state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, require(_dependencyMap[4], \"./findFocusedRoute\").findFocusedRoute)(state);\n    // START FORK\n    route.path = expoURL.pathWithoutGroups;\n    // route.path = path;\n    // END FORK\n    // START FORK\n    // const params = parseQueryParams(\n    var params = expo.parseQueryParams(path, route, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined, hash);\n    // END FORK\n    // START FORK\n    // expo.handleUrlParams(route, params, hash);\n    if (params) {\n      route.params = {\n        ...route.params,\n        ...params\n      };\n    }\n    // END FORK\n    return state;\n  };\n  // START FORK\n  // const parseQueryParams = (path: string, parseConfig?: Record<string, (value: string) => any>) => {\n  //   const query = path.split('?')[1];\n  //   const params = queryString.parse(query);\n  //   if (parseConfig) {\n  //     Object.keys(params).forEach((name) => {\n  //       if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n  //         params[name] = parseConfig[name](params[name] as string);\n  //       }\n  //     });\n  //   }\n  //   return Object.keys(params).length ? params : undefined;\n  // };\n  // END FORK\n});","lineCount":570,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_objectWithoutProperties"],[4,30,1,13],[4,33,1,13,"require"],[4,40,1,13],[4,41,1,13,"_dependencyMap"],[4,55,1,13],[5,2,1,13],[5,6,1,13,"_excluded"],[5,15,1,13],[6,2,2,0],[6,6,2,4,"__createBinding"],[6,21,2,19],[6,24,2,23],[6,28,2,27],[6,32,2,31],[6,36,2,35],[6,37,2,36,"__createBinding"],[6,52,2,51],[6,57,2,57,"Object"],[6,63,2,63],[6,64,2,64,"create"],[6,70,2,70],[6,73,2,74],[6,83,2,83,"o"],[6,84,2,84],[6,86,2,86,"m"],[6,87,2,87],[6,89,2,89,"k"],[6,90,2,90],[6,92,2,92,"k2"],[6,94,2,94],[6,96,2,96],[7,4,3,4],[7,8,3,8,"k2"],[7,10,3,10],[7,15,3,15,"undefined"],[7,24,3,24],[7,26,3,26,"k2"],[7,28,3,28],[7,31,3,31,"k"],[7,32,3,32],[8,4,4,4],[8,8,4,8,"desc"],[8,12,4,12],[8,15,4,15,"Object"],[8,21,4,21],[8,22,4,22,"getOwnPropertyDescriptor"],[8,46,4,46],[8,47,4,47,"m"],[8,48,4,48],[8,50,4,50,"k"],[8,51,4,51],[8,52,4,52],[9,4,5,4],[9,8,5,8],[9,9,5,9,"desc"],[9,13,5,13],[9,18,5,18],[9,23,5,23],[9,27,5,27,"desc"],[9,31,5,31],[9,34,5,34],[9,35,5,35,"m"],[9,36,5,36],[9,37,5,37,"__esModule"],[9,47,5,47],[9,50,5,50,"desc"],[9,54,5,54],[9,55,5,55,"writable"],[9,63,5,63],[9,67,5,67,"desc"],[9,71,5,71],[9,72,5,72,"configurable"],[9,84,5,84],[9,85,5,85],[9,87,5,87],[10,6,6,6,"desc"],[10,10,6,10],[10,13,6,13],[11,8,6,15,"enumerable"],[11,18,6,25],[11,20,6,27],[11,24,6,31],[12,8,6,33,"get"],[12,11,6,36],[12,13,6,38],[12,22,6,38,"get"],[12,23,6,38],[12,25,6,49],[13,10,6,51],[13,17,6,58,"m"],[13,18,6,59],[13,19,6,60,"k"],[13,20,6,61],[13,21,6,62],[14,8,6,64],[15,6,6,66],[15,7,6,67],[16,4,7,4],[17,4,8,4,"Object"],[17,10,8,10],[17,11,8,11,"defineProperty"],[17,25,8,25],[17,26,8,26,"o"],[17,27,8,27],[17,29,8,29,"k2"],[17,31,8,31],[17,33,8,33,"desc"],[17,37,8,37],[17,38,8,38],[18,2,9,0],[18,3,9,1],[18,6,9,6],[18,16,9,15,"o"],[18,17,9,16],[18,19,9,18,"m"],[18,20,9,19],[18,22,9,21,"k"],[18,23,9,22],[18,25,9,24,"k2"],[18,27,9,26],[18,29,9,28],[19,4,10,4],[19,8,10,8,"k2"],[19,10,10,10],[19,15,10,15,"undefined"],[19,24,10,24],[19,26,10,26,"k2"],[19,28,10,28],[19,31,10,31,"k"],[19,32,10,32],[20,4,11,4,"o"],[20,5,11,5],[20,6,11,6,"k2"],[20,8,11,8],[20,9,11,9],[20,12,11,12,"m"],[20,13,11,13],[20,14,11,14,"k"],[20,15,11,15],[20,16,11,16],[21,2,12,0],[21,3,12,2],[21,4,12,3],[22,2,13,0],[22,6,13,4,"__setModuleDefault"],[22,24,13,22],[22,27,13,26],[22,31,13,30],[22,35,13,34],[22,39,13,38],[22,40,13,39,"__setModuleDefault"],[22,58,13,57],[22,63,13,63,"Object"],[22,69,13,69],[22,70,13,70,"create"],[22,76,13,76],[22,79,13,80],[22,89,13,89,"o"],[22,90,13,90],[22,92,13,92,"v"],[22,93,13,93],[22,95,13,95],[23,4,14,4,"Object"],[23,10,14,10],[23,11,14,11,"defineProperty"],[23,25,14,25],[23,26,14,26,"o"],[23,27,14,27],[23,29,14,29],[23,38,14,38],[23,40,14,40],[24,6,14,42,"enumerable"],[24,16,14,52],[24,18,14,54],[24,22,14,58],[25,6,14,60,"value"],[25,11,14,65],[25,13,14,67,"v"],[26,4,14,69],[26,5,14,70],[26,6,14,71],[27,2,15,0],[27,3,15,1],[27,6,15,5],[27,16,15,14,"o"],[27,17,15,15],[27,19,15,17,"v"],[27,20,15,18],[27,22,15,20],[28,4,16,4,"o"],[28,5,16,5],[28,6,16,6],[28,15,16,15],[28,16,16,16],[28,19,16,19,"v"],[28,20,16,20],[29,2,17,0],[29,3,17,1],[29,4,17,2],[30,2,18,0],[30,6,18,4,"__importStar"],[30,18,18,16],[30,21,18,20],[30,25,18,24],[30,29,18,28],[30,33,18,32],[30,34,18,33,"__importStar"],[30,46,18,45],[30,50,18,50],[30,60,18,60,"mod"],[30,63,18,63],[30,65,18,65],[31,4,19,4],[31,8,19,8,"mod"],[31,11,19,11],[31,15,19,15,"mod"],[31,18,19,18],[31,19,19,19,"__esModule"],[31,29,19,29],[31,31,19,31],[31,38,19,38,"mod"],[31,41,19,41],[32,4,20,4],[32,8,20,8,"result"],[32,14,20,14],[32,17,20,17],[32,18,20,18],[32,19,20,19],[33,4,21,4],[33,8,21,8,"mod"],[33,11,21,11],[33,15,21,15],[33,19,21,19],[33,21,21,21],[33,26,21,26],[33,30,21,30,"k"],[33,31,21,31],[33,35,21,35,"mod"],[33,38,21,38],[33,40,21,40],[33,44,21,44,"k"],[33,45,21,45],[33,50,21,50],[33,59,21,59],[33,63,21,63,"Object"],[33,69,21,69],[33,70,21,70,"prototype"],[33,79,21,79],[33,80,21,80,"hasOwnProperty"],[33,94,21,94],[33,95,21,95,"call"],[33,99,21,99],[33,100,21,100,"mod"],[33,103,21,103],[33,105,21,105,"k"],[33,106,21,106],[33,107,21,107],[33,109,21,109,"__createBinding"],[33,124,21,124],[33,125,21,125,"result"],[33,131,21,131],[33,133,21,133,"mod"],[33,136,21,136],[33,138,21,138,"k"],[33,139,21,139],[33,140,21,140],[34,4,22,4,"__setModuleDefault"],[34,22,22,22],[34,23,22,23,"result"],[34,29,22,29],[34,31,22,31,"mod"],[34,34,22,34],[34,35,22,35],[35,4,23,4],[35,11,23,11,"result"],[35,17,23,17],[36,2,24,0],[36,3,24,1],[37,2,25,0],[37,6,25,4,"__importDefault"],[37,21,25,19],[37,24,25,23],[37,28,25,27],[37,32,25,31],[37,36,25,35],[37,37,25,36,"__importDefault"],[37,52,25,51],[37,56,25,56],[37,66,25,66,"mod"],[37,69,25,69],[37,71,25,71],[38,4,26,4],[38,11,26,12,"mod"],[38,14,26,15],[38,18,26,19,"mod"],[38,21,26,22],[38,22,26,23,"__esModule"],[38,32,26,33],[38,35,26,37,"mod"],[38,38,26,40],[38,41,26,43],[39,6,26,45],[39,15,26,54],[39,17,26,56,"mod"],[40,4,26,60],[40,5,26,61],[41,2,27,0],[41,3,27,1],[42,2,28,0,"Object"],[42,8,28,6],[42,9,28,7,"defineProperty"],[42,23,28,21],[42,24,28,22,"exports"],[42,31,28,29],[42,33,28,31],[42,45,28,43],[42,47,28,45],[43,4,28,47,"value"],[43,9,28,52],[43,11,28,54],[44,2,28,59],[44,3,28,60],[44,4,28,61],[45,2,29,0,"exports"],[45,9,29,7],[45,10,29,8,"getStateFromPath"],[45,26,29,24],[45,29,29,27],[45,34,29,32],[45,35,29,33],[46,2,31,0],[46,6,31,6,"escape_string_regexp_1"],[46,28,31,28],[46,31,31,31,"__importDefault"],[46,46,31,46],[46,47,31,47,"require"],[46,54,31,54],[46,55,31,54,"_dependencyMap"],[46,69,31,54],[46,96,31,77],[46,97,31,78],[46,98,31,79],[47,2,33,0],[47,6,33,6,"expo"],[47,10,33,10],[47,13,33,13,"__importStar"],[47,25,33,25],[47,26,33,26,"require"],[47,33,33,33],[47,34,33,33,"_dependencyMap"],[47,48,33,33],[47,79,33,60],[47,80,33,61],[47,81,33,62],[48,2,34,0],[49,0,35,0],[50,0,36,0],[51,0,37,0],[52,0,38,0],[53,0,39,0],[54,0,40,0],[55,0,41,0],[56,0,42,0],[57,0,43,0],[58,0,44,0],[59,0,45,0],[60,0,46,0],[61,0,47,0],[62,0,48,0],[63,0,49,0],[64,0,50,0],[65,0,51,0],[66,0,52,0],[67,0,53,0],[68,0,54,0],[69,2,55,0],[69,11,55,9,"getStateFromPath"],[69,27,55,25,"getStateFromPath"],[70,2,56,0],[71,2,57,0,"path"],[71,6,57,4],[71,8,57,6,"options"],[71,15,57,13],[71,17,57,15],[72,4,58,4],[72,8,58,4,"_getConfigResources"],[72,27,58,4],[72,30,58,58,"getConfigResources"],[72,48,58,76],[72,49,58,77,"options"],[72,56,58,84],[72,58,58,86],[72,62,58,90],[72,64,58,92,"routeInfo"],[72,73,58,101],[72,75,58,103,"segments"],[72,83,58,111],[72,84,58,112],[73,6,58,12,"initialRoutes"],[73,19,58,25],[73,22,58,25,"_getConfigResources"],[73,41,58,25],[73,42,58,12,"initialRoutes"],[73,55,58,25],[74,6,58,27,"configs"],[74,13,58,34],[74,16,58,34,"_getConfigResources"],[74,35,58,34],[74,36,58,27,"configs"],[74,43,58,34],[75,6,58,36,"configWithRegexes"],[75,23,58,53],[75,26,58,53,"_getConfigResources"],[75,45,58,53],[75,46,58,36,"configWithRegexes"],[75,63,58,53],[76,4,59,4],[76,8,59,10,"screens"],[76,15,59,17],[76,18,59,20,"options"],[76,25,59,27],[76,27,59,29,"screens"],[76,34,59,36],[77,4,60,4],[78,4,61,4],[78,8,61,10,"expoPath"],[78,16,61,18],[78,19,61,21,"expo"],[78,23,61,25],[78,24,61,26,"getUrlWithReactNavigationConcessions"],[78,60,61,62],[78,61,61,63,"path"],[78,65,61,67],[78,66,61,68],[79,4,62,4],[80,4,63,4],[81,4,64,4],[81,8,64,8,"remaining"],[81,17,64,17],[81,20,64,20,"expoPath"],[81,28,64,28],[81,29,64,29,"nonstandardPathname"],[82,4,65,8],[83,4,66,8],[84,4,66,8],[84,5,67,9,"replace"],[84,12,67,16],[84,13,67,17],[84,19,67,23],[84,21,67,25],[84,24,67,28],[84,25,67,29],[84,26,67,30],[85,4,67,30],[85,5,68,9,"replace"],[85,12,68,16],[85,13,68,17],[85,18,68,22],[85,20,68,24],[85,22,68,26],[85,23,68,27],[85,24,68,28],[86,4,68,28],[86,5,69,9,"replace"],[86,12,69,16],[86,13,69,17],[86,20,69,24],[86,22,69,26],[86,24,69,28],[86,25,69,29],[86,26,69,30],[86,27,69,31],[87,4,70,4],[88,4,71,4,"remaining"],[88,13,71,13],[88,16,71,16,"remaining"],[88,25,71,25],[88,26,71,26,"endsWith"],[88,34,71,34],[88,35,71,35],[88,38,71,38],[88,39,71,39],[88,42,71,42,"remaining"],[88,51,71,51],[88,54,71,54],[88,57,71,57,"remaining"],[88,66,71,66],[88,69,71,69],[89,4,72,4],[89,8,72,10,"prefix"],[89,14,72,16],[89,17,72,19,"options"],[89,24,72,26],[89,26,72,28,"path"],[89,30,72,32],[89,32,72,34,"replace"],[89,39,72,41],[89,40,72,42],[89,45,72,47],[89,47,72,49],[89,49,72,51],[89,50,72,52],[89,51,72,53],[89,52,72,54],[90,4,73,4],[90,8,73,8,"prefix"],[90,14,73,14],[90,16,73,16],[91,6,74,8],[92,6,75,8],[92,10,75,14,"normalizedPrefix"],[92,26,75,30],[92,29,75,33,"prefix"],[92,35,75,39],[92,36,75,40,"endsWith"],[92,44,75,48],[92,45,75,49],[92,48,75,52],[92,49,75,53],[92,52,75,56,"prefix"],[92,58,75,62],[92,61,75,65],[92,64,75,68,"prefix"],[92,70,75,74],[92,73,75,77],[93,6,76,8],[94,6,77,8],[94,10,77,12],[94,11,77,13,"remaining"],[94,20,77,22],[94,21,77,23,"startsWith"],[94,31,77,33],[94,32,77,34,"normalizedPrefix"],[94,48,77,50],[94,49,77,51],[94,51,77,53],[95,8,78,12],[95,15,78,19,"undefined"],[95,24,78,28],[96,6,79,8],[97,6,80,8],[98,6,81,8,"remaining"],[98,15,81,17],[98,18,81,20,"remaining"],[98,27,81,29],[98,28,81,30,"replace"],[98,35,81,37],[98,36,81,38,"normalizedPrefix"],[98,52,81,54],[98,54,81,56],[98,56,81,58],[98,57,81,59],[99,4,82,4],[100,4,83,4],[100,8,83,8,"screens"],[100,15,83,15],[100,20,83,20,"undefined"],[100,29,83,29],[100,31,83,31],[101,6,84,8],[102,6,85,8],[102,10,85,14,"routes"],[102,17,85,20],[102,20,85,23,"remaining"],[102,29,85,32],[102,30,86,13,"split"],[102,35,86,18],[102,36,86,19],[102,39,86,22],[102,40,86,23],[102,41,87,13,"filter"],[102,47,87,19],[102,48,87,20,"Boolean"],[102,55,87,27],[102,56,87,28],[102,57,88,13,"map"],[102,60,88,16],[102,61,88,18,"segment"],[102,68,88,25],[102,72,88,30],[103,8,89,12],[103,12,89,18,"name"],[103,16,89,22],[103,19,89,25,"decodeURIComponent"],[103,37,89,43],[103,38,89,44,"segment"],[103,45,89,51],[103,46,89,52],[104,8,90,12],[104,15,90,19],[105,10,90,21,"name"],[106,8,90,26],[106,9,90,27],[107,6,91,8],[107,7,91,9],[107,8,91,10],[108,6,92,8],[108,10,92,12,"routes"],[108,17,92,18],[108,18,92,19,"length"],[108,24,92,25],[108,26,92,27],[109,8,93,12],[109,15,93,19,"createNestedStateObject"],[109,38,93,42],[109,39,93,43,"expoPath"],[109,47,93,51],[109,49,93,53,"routes"],[109,56,93,59],[109,58,93,61,"initialRoutes"],[109,71,93,74],[109,73,93,76],[109,75,93,78],[109,77,93,80,"expoPath"],[109,85,93,88],[109,86,93,89,"url"],[109,89,93,92],[109,90,93,93,"hash"],[109,94,93,97],[109,95,93,98],[110,6,94,8],[111,6,95,8],[111,13,95,15,"undefined"],[111,22,95,24],[112,4,96,4],[113,4,97,4],[113,8,97,8,"remaining"],[113,17,97,17],[113,22,97,22],[113,25,97,25],[113,27,97,27],[114,6,98,8],[115,6,99,8],[116,6,100,8],[117,6,101,8],[117,10,101,14,"match"],[117,15,101,19],[117,18,101,22,"expo"],[117,22,101,26],[117,23,101,27,"matchForEmptyPath"],[117,40,101,44],[117,41,101,45,"configWithRegexes"],[117,58,101,62],[117,59,101,63],[118,6,102,8],[119,6,103,8],[120,6,104,8],[121,6,105,8],[122,6,106,8],[123,6,107,8],[124,6,108,8],[125,6,109,8],[126,6,110,8],[127,6,111,8],[127,10,111,12,"match"],[127,15,111,17],[127,17,111,19],[128,8,112,12],[128,15,112,19,"createNestedStateObject"],[128,38,112,42],[128,39,112,43,"expoPath"],[128,47,112,51],[128,49,112,53,"match"],[128,54,112,58],[128,55,112,59,"routeNames"],[128,65,112,69],[128,66,112,70,"map"],[128,69,112,73],[128,70,112,75,"name"],[128,74,112,79],[128,79,112,85],[129,10,112,87,"name"],[130,8,112,92],[130,9,112,93],[130,10,112,94],[130,11,112,95],[130,13,112,97,"initialRoutes"],[130,26,112,110],[130,28,112,112,"configs"],[130,35,112,119],[130,37,112,121,"expoPath"],[130,45,112,129],[130,46,112,130,"url"],[130,49,112,133],[130,50,112,134,"hash"],[130,54,112,138],[130,55,112,139],[131,6,113,8],[132,6,114,8],[132,13,114,15,"undefined"],[132,22,114,24],[133,4,115,4],[134,4,116,4],[134,8,116,8,"result"],[134,14,116,14],[135,4,117,4],[135,8,117,8,"current"],[135,15,117,15],[136,4,118,4],[137,4,119,4],[138,4,120,4],[138,8,120,4,"_matchAgainstConfigs"],[138,28,120,4],[138,31,120,38,"matchAgainstConfigs"],[138,50,120,57],[138,51,120,58,"remaining"],[138,60,120,67],[138,62,120,69,"configWithRegexes"],[138,79,120,86],[138,80,120,87],[139,6,120,12,"routes"],[139,12,120,18],[139,15,120,18,"_matchAgainstConfigs"],[139,35,120,18],[139,36,120,12,"routes"],[139,42,120,18],[140,6,120,20,"remainingPath"],[140,19,120,33],[140,22,120,33,"_matchAgainstConfigs"],[140,42,120,33],[140,43,120,20,"remainingPath"],[140,56,120,33],[141,4,121,4],[141,8,121,8,"routes"],[141,14,121,14],[141,19,121,19,"undefined"],[141,28,121,28],[141,30,121,30],[142,6,122,8],[143,6,123,8,"current"],[143,13,123,15],[143,16,123,18,"createNestedStateObject"],[143,39,123,41],[143,40,123,42,"expoPath"],[143,48,123,50],[143,50,123,52,"routes"],[143,56,123,58],[143,58,123,60,"initialRoutes"],[143,71,123,73],[143,73,123,75,"configs"],[143,80,123,82],[143,82,123,84,"expoPath"],[143,90,123,92],[143,91,123,93,"url"],[143,94,123,96],[143,95,123,97,"hash"],[143,99,123,101],[143,100,123,102],[144,6,124,8,"remaining"],[144,15,124,17],[144,18,124,20,"remainingPath"],[144,31,124,33],[145,6,125,8,"result"],[145,12,125,14],[145,15,125,17,"current"],[145,22,125,24],[146,4,126,4],[147,4,127,4],[147,8,127,8,"current"],[147,15,127,15],[147,19,127,19],[147,23,127,23],[147,27,127,27,"result"],[147,33,127,33],[147,37,127,37],[147,41,127,41],[147,43,127,43],[148,6,128,8],[148,13,128,15,"undefined"],[148,22,128,24],[149,4,129,4],[150,4,130,4],[150,11,130,11,"result"],[150,17,130,17],[151,2,131,0],[152,2,132,0,"exports"],[152,9,132,7],[152,10,132,8,"getStateFromPath"],[152,26,132,24],[152,29,132,27,"getStateFromPath"],[152,45,132,43],[153,2,133,0],[154,0,134,0],[155,0,135,0],[156,2,136,0],[156,6,136,4,"cachedConfigResources"],[156,27,136,25],[156,30,136,28],[156,31,137,4,"undefined"],[156,40,137,13],[156,42,138,4,"prepareConfigResources"],[156,64,138,26],[156,65,138,27],[156,66,138,28],[156,67,139,1],[157,2,140,0],[157,11,140,9,"getConfigResources"],[157,29,140,27,"getConfigResources"],[157,30,140,28,"options"],[157,37,140,35],[158,2,141,0],[159,2,142,0,"previousSegments"],[160,2,143,0],[161,2,143,0],[161,4,144,2],[162,4,145,4],[163,4,146,4],[164,4,147,4],[165,4,148,4,"cachedConfigResources"],[165,25,148,25],[165,28,148,28],[165,29,148,29,"options"],[165,36,148,36],[165,38,148,38,"prepareConfigResources"],[165,60,148,60],[165,61,148,61,"options"],[165,68,148,68],[165,70,148,70,"previousSegments"],[165,86,148,86],[165,87,148,87],[165,88,148,88],[166,4,149,4],[167,4,150,4],[168,4,151,4],[168,11,151,11,"cachedConfigResources"],[168,32,151,32],[168,33,151,33],[168,34,151,34],[168,35,151,35],[169,2,152,0],[170,2,153,0],[170,11,153,9,"prepareConfigResources"],[170,33,153,31,"prepareConfigResources"],[170,34,153,32,"options"],[170,41,153,39],[170,43,153,41,"previousSegments"],[170,59,153,57],[170,61,153,59],[171,4,154,4],[171,8,154,8,"options"],[171,15,154,15],[171,17,154,17],[172,6,155,8],[172,7,155,9],[172,8,155,10],[172,10,155,12,"require"],[172,17,155,12],[172,18,155,12,"_dependencyMap"],[172,32,155,12],[172,65,155,21,"validatePathConfig"],[172,83,155,39],[172,85,155,41,"options"],[172,92,155,48],[172,93,155,49],[173,4,156,4],[174,4,157,4],[174,8,157,10,"initialRoutes"],[174,21,157,23],[174,24,157,26,"getInitialRoutes"],[174,40,157,42],[174,41,157,43,"options"],[174,48,157,50],[174,49,157,51],[175,4,158,4],[175,8,158,10,"configs"],[175,15,158,17],[175,18,158,20,"getNormalizedConfigs"],[175,38,158,40],[175,39,158,41,"initialRoutes"],[175,52,158,54],[175,54,158,56,"options"],[175,61,158,63],[175,63,158,65,"screens"],[175,70,158,72],[175,72,158,74,"previousSegments"],[175,88,158,90],[175,89,158,91],[176,4,159,4,"checkForDuplicatedConfigs"],[176,29,159,29],[176,30,159,30,"configs"],[176,37,159,37],[176,38,159,38],[177,4,160,4],[177,8,160,10,"configWithRegexes"],[177,25,160,27],[177,28,160,30,"getConfigsWithRegexes"],[177,49,160,51],[177,50,160,52,"configs"],[177,57,160,59],[177,58,160,60],[178,4,161,4],[178,11,161,11],[179,6,162,8,"initialRoutes"],[179,19,162,21],[180,6,163,8,"configs"],[180,13,163,15],[181,6,164,8,"configWithRegexes"],[182,4,165,4],[182,5,165,5],[183,2,166,0],[184,2,167,0],[184,11,167,9,"getInitialRoutes"],[184,27,167,25,"getInitialRoutes"],[184,28,167,26,"options"],[184,35,167,33],[184,37,167,35],[185,4,168,4],[185,8,168,10,"initialRoutes"],[185,21,168,23],[185,24,168,26],[185,26,168,28],[186,4,169,4],[186,8,169,8,"options"],[186,15,169,15],[186,17,169,17,"initialRouteName"],[186,33,169,33],[186,35,169,35],[187,6,170,8,"initialRoutes"],[187,19,170,21],[187,20,170,22,"push"],[187,24,170,26],[187,25,170,27],[188,8,171,12,"initialRouteName"],[188,24,171,28],[188,26,171,30,"options"],[188,33,171,37],[188,34,171,38,"initialRouteName"],[188,50,171,54],[189,8,172,12,"parentScreens"],[189,21,172,25],[189,23,172,27],[190,6,173,8],[190,7,173,9],[190,8,173,10],[191,4,174,4],[192,4,175,4],[192,11,175,11,"initialRoutes"],[192,24,175,24],[193,2,176,0],[194,2,177,0],[194,11,177,9,"getNormalizedConfigs"],[194,31,177,29,"getNormalizedConfigs"],[194,32,177,30,"initialRoutes"],[194,45,177,43],[194,47,181,2],[195,4,181,2],[195,8,177,45,"screens"],[195,15,177,52],[195,18,177,52,"arguments"],[195,27,177,52],[195,28,177,52,"length"],[195,34,177,52],[195,42,177,52,"arguments"],[195,51,177,52],[195,59,177,52,"undefined"],[195,68,177,52],[195,71,177,52,"arguments"],[195,80,177,52],[195,86,177,55],[195,87,177,56],[195,88,177,57],[196,4,177,57],[197,4,178,0],[198,4,179,0,"previousSegments"],[199,4,180,0],[200,4,180,0],[200,6,180,0,"arguments"],[200,15,180,0],[200,16,180,0,"length"],[200,22,180,0],[200,29,180,0,"arguments"],[200,38,180,0],[200,44,180,0,"undefined"],[200,53,180,0],[201,4,182,4],[202,4,183,4],[202,11,183,11],[202,13,183,13],[202,14,184,9,"concat"],[202,20,184,15],[202,21,184,16],[202,24,184,19,"Object"],[202,30,184,25],[202,31,184,26,"keys"],[202,35,184,30],[202,36,184,31,"screens"],[202,43,184,38],[202,44,184,39],[202,45,184,40,"map"],[202,48,184,43],[202,49,184,45,"key"],[202,52,184,48],[202,56,184,53,"createNormalizedConfigs"],[202,79,184,76],[202,80,184,77,"key"],[202,83,184,80],[202,85,184,82,"screens"],[202,92,184,89],[202,94,184,91],[202,96,184,93],[202,98,184,95,"initialRoutes"],[202,111,184,108],[202,113,184,110],[202,115,184,112],[202,116,184,113],[202,117,184,114],[202,118,184,115],[202,119,185,9,"map"],[202,122,185,12],[202,123,185,13,"expo"],[202,127,185,17],[202,128,185,18,"appendIsInitial"],[202,143,185,33],[202,144,185,34,"initialRoutes"],[202,157,185,47],[202,158,185,48],[202,159,185,49],[202,160,186,9,"sort"],[202,164,186,13],[202,165,186,14,"expo"],[202,169,186,18],[202,170,186,19,"getRouteConfigSorter"],[202,190,186,39],[202,191,186,40,"previousSegments"],[202,207,186,56],[202,208,186,57],[202,209,186,58],[203,4,187,4],[204,4,188,4],[205,4,189,4],[206,4,190,4],[207,4,191,4],[208,4,192,4],[209,4,193,4],[210,4,194,4],[211,4,195,4],[212,4,196,4],[213,4,197,4],[214,4,198,4],[215,4,199,4],[216,4,200,4],[217,4,201,4],[218,4,202,4],[219,4,203,4],[220,4,204,4],[221,4,205,4],[222,4,206,4],[223,4,207,4],[224,4,208,4],[225,4,209,4],[226,4,210,4],[227,4,211,4],[228,4,212,4],[229,4,213,4],[230,4,214,4],[231,4,215,4],[232,4,216,4],[233,4,217,4],[234,4,218,4],[235,4,219,4],[236,4,220,4],[237,4,221,4],[238,4,222,4],[239,4,223,4],[240,4,224,4],[241,4,225,4],[242,4,226,4],[243,4,227,4],[244,4,228,4],[245,4,229,4],[246,4,230,4],[247,4,231,4],[248,2,232,0],[249,2,233,0],[249,11,233,9,"checkForDuplicatedConfigs"],[249,36,233,34,"checkForDuplicatedConfigs"],[249,37,233,35,"configs"],[249,44,233,42],[249,46,233,44],[250,4,234,4],[251,4,235,4,"configs"],[251,11,235,11],[251,12,235,12,"reduce"],[251,18,235,18],[251,19,235,19],[251,20,235,20,"acc"],[251,23,235,23],[251,25,235,25,"config"],[251,31,235,31],[251,36,235,36],[252,6,236,8],[252,10,236,12,"acc"],[252,13,236,15],[252,14,236,16,"config"],[252,20,236,22],[252,21,236,23,"pattern"],[252,28,236,30],[252,29,236,31],[252,31,236,33],[253,8,237,12],[253,12,237,18,"a"],[253,13,237,19],[253,16,237,22,"acc"],[253,19,237,25],[253,20,237,26,"config"],[253,26,237,32],[253,27,237,33,"pattern"],[253,34,237,40],[253,35,237,41],[253,36,237,42,"routeNames"],[253,46,237,52],[254,8,238,12],[254,12,238,18,"b"],[254,13,238,19],[254,16,238,22,"config"],[254,22,238,28],[254,23,238,29,"routeNames"],[254,33,238,39],[255,8,239,12],[256,8,240,12],[257,8,241,12],[257,12,241,18,"intersects"],[257,22,241,28],[257,25,241,31,"a"],[257,26,241,32],[257,27,241,33,"length"],[257,33,241,39],[257,36,241,42,"b"],[257,37,241,43],[257,38,241,44,"length"],[257,44,241,50],[257,47,241,53,"b"],[257,48,241,54],[257,49,241,55,"every"],[257,54,241,60],[257,55,241,61],[257,56,241,62,"it"],[257,58,241,64],[257,60,241,66,"i"],[257,61,241,67],[257,66,241,72,"a"],[257,67,241,73],[257,68,241,74,"i"],[257,69,241,75],[257,70,241,76],[257,75,241,81,"it"],[257,77,241,83],[257,78,241,84],[257,81,241,87,"a"],[257,82,241,88],[257,83,241,89,"every"],[257,88,241,94],[257,89,241,95],[257,90,241,96,"it"],[257,92,241,98],[257,94,241,100,"i"],[257,95,241,101],[257,100,241,106,"b"],[257,101,241,107],[257,102,241,108,"i"],[257,103,241,109],[257,104,241,110],[257,109,241,115,"it"],[257,111,241,117],[257,112,241,118],[258,8,242,12],[258,12,242,16],[258,13,242,17,"intersects"],[258,23,242,27],[258,25,242,29],[259,10,243,16],[259,16,243,22],[259,20,243,26,"Error"],[259,25,243,31],[259,26,243,32],[259,91,243,97,"config"],[259,97,243,103],[259,98,243,104,"pattern"],[259,105,243,111],[259,128,243,134,"a"],[259,129,243,135],[259,130,243,136,"join"],[259,134,243,140],[259,135,243,141],[259,140,243,146],[259,141,243,147],[259,151,243,157,"b"],[259,152,243,158],[259,153,243,159,"join"],[259,157,243,163],[259,158,243,164],[259,163,243,169],[259,164,243,170],[259,236,243,242],[259,237,243,243],[260,8,244,12],[261,6,245,8],[262,6,246,8],[262,13,246,15,"Object"],[262,19,246,21],[262,20,246,22,"assign"],[262,26,246,28],[262,27,246,29,"acc"],[262,30,246,32],[262,32,246,34],[263,8,247,12],[263,9,247,13,"config"],[263,15,247,19],[263,16,247,20,"pattern"],[263,23,247,27],[263,26,247,30,"config"],[264,6,248,8],[264,7,248,9],[264,8,248,10],[265,4,249,4],[265,5,249,5],[265,7,249,7],[265,8,249,8],[265,9,249,9],[265,10,249,10],[266,2,250,0],[267,2,251,0],[267,11,251,9,"getConfigsWithRegexes"],[267,32,251,30,"getConfigsWithRegexes"],[267,33,251,31,"configs"],[267,40,251,38],[267,42,251,40],[268,4,252,4],[268,11,252,11,"configs"],[268,18,252,18],[268,19,252,19,"map"],[268,22,252,22],[268,23,252,24,"c"],[268,24,252,25],[268,29,252,31],[269,6,253,8],[269,9,253,11,"c"],[269,10,253,12],[270,6,254,8],[271,6,255,8],[272,6,256,8],[273,6,257,8,"regex"],[273,11,257,13],[273,13,257,15,"expo"],[273,17,257,19],[273,18,257,20,"configRegExp"],[273,30,257,32],[273,31,257,33,"c"],[273,32,257,34],[274,6,258,8],[275,4,259,4],[275,5,259,5],[275,6,259,6],[275,7,259,7],[276,2,260,0],[277,2,261,0],[277,6,261,6,"joinPaths"],[277,15,261,15],[277,18,261,18],[277,27,261,18,"joinPaths"],[277,28,261,18],[278,4,261,18],[278,13,261,18,"_len"],[278,17,261,18],[278,20,261,18,"arguments"],[278,29,261,18],[278,30,261,18,"length"],[278,36,261,18],[278,38,261,22,"paths"],[278,43,261,27],[278,50,261,27,"Array"],[278,55,261,27],[278,56,261,27,"_len"],[278,60,261,27],[278,63,261,27,"_key"],[278,67,261,27],[278,73,261,27,"_key"],[278,77,261,27],[278,80,261,27,"_len"],[278,84,261,27],[278,86,261,27,"_key"],[278,90,261,27],[279,6,261,22,"paths"],[279,11,261,27],[279,12,261,27,"_key"],[279,16,261,27],[279,20,261,27,"arguments"],[279,29,261,27],[279,30,261,27,"_key"],[279,34,261,27],[280,4,261,27],[281,4,261,27],[281,11,261,32],[281,13,261,34],[281,14,262,5,"concat"],[281,20,262,11],[281,21,262,12],[281,24,262,15,"paths"],[281,29,262,20],[281,30,262,21,"map"],[281,33,262,24],[281,34,262,26,"p"],[281,35,262,27],[281,39,262,32,"p"],[281,40,262,33],[281,41,262,34,"split"],[281,46,262,39],[281,47,262,40],[281,50,262,43],[281,51,262,44],[281,52,262,45],[281,53,262,46],[281,54,263,5,"filter"],[281,60,263,11],[281,61,263,12,"Boolean"],[281,68,263,19],[281,69,263,20],[281,70,264,5,"join"],[281,74,264,9],[281,75,264,10],[281,78,264,13],[281,79,264,14],[282,2,264,14],[283,2,265,0],[283,6,265,6,"matchAgainstConfigs"],[283,25,265,25],[283,28,265,28,"matchAgainstConfigs"],[283,29,265,29,"remaining"],[283,38,265,38],[283,40,265,40,"configs"],[283,47,265,47],[283,52,265,52],[284,4,266,4],[284,8,266,8,"routes"],[284,14,266,14],[285,4,267,4],[285,8,267,8,"remainingPath"],[285,21,267,21],[285,24,267,24,"remaining"],[285,33,267,33],[286,4,268,4],[287,4,269,4],[287,8,269,10,"allParams"],[287,17,269,19],[287,20,269,22,"Object"],[287,26,269,28],[287,27,269,29,"create"],[287,33,269,35],[287,34,269,36],[287,38,269,40],[287,39,269,41],[288,4,270,4],[289,4,271,4],[290,4,271,4],[290,8,271,4,"_loop"],[290,13,271,4],[290,25,271,4,"_loop"],[290,26,271,4,"config"],[290,32,271,4],[290,34,272,34],[291,8,273,8],[291,12,273,12],[291,13,273,13,"config"],[291,19,273,19],[291,20,273,20,"regex"],[291,25,273,25],[291,27,273,27],[292,10,273,27],[293,8,275,8],[294,8,276,8],[294,12,276,14,"match"],[294,17,276,19],[294,20,276,22,"remainingPath"],[294,33,276,35],[294,34,276,36,"match"],[294,39,276,41],[294,40,276,42,"config"],[294,46,276,48],[294,47,276,49,"regex"],[294,52,276,54],[294,53,276,55],[295,8,277,8],[296,8,278,8],[296,12,278,12,"match"],[296,17,278,17],[296,19,278,19],[297,10,279,12],[297,14,279,18,"matchResult"],[297,25,279,29],[297,28,279,32,"config"],[297,34,279,38],[297,35,279,39,"pattern"],[297,42,279,46],[297,44,279,48,"split"],[297,49,279,53],[297,50,279,54],[297,53,279,57],[297,54,279,58],[297,55,279,59,"reduce"],[297,61,279,65],[297,62,279,66],[297,63,279,67,"acc"],[297,66,279,70],[297,68,279,72,"p"],[297,69,279,73],[297,71,279,75,"index"],[297,76,279,80],[297,81,279,85],[298,12,280,16],[298,16,280,20],[298,17,280,21,"expo"],[298,21,280,25],[298,22,280,26,"isDynamicPart"],[298,35,280,39],[298,36,280,40,"p"],[298,37,280,41],[298,38,280,42],[298,40,280,44],[299,14,281,20],[299,21,281,27,"acc"],[299,24,281,30],[300,12,282,16],[301,12,283,16,"acc"],[301,15,283,19],[301,16,283,20,"pos"],[301,19,283,23],[301,23,283,27],[301,24,283,28],[302,12,284,16],[303,12,285,16],[303,16,285,22,"decodedParamSegment"],[303,35,285,41],[303,38,285,44,"expo"],[303,42,285,48],[303,43,285,49,"safelyDecodeURIComponent"],[303,67,285,73],[304,12,286,16],[305,12,287,16],[306,12,288,16,"match"],[306,17,288,21],[306,18,288,22],[306,19,288,23,"acc"],[306,22,288,26],[306,23,288,27,"pos"],[306,26,288,30],[306,29,288,33],[306,30,288,34],[306,34,288,38],[306,35,288,39],[307,12,289,20],[308,12,289,20],[308,13,290,21,"replace"],[308,20,290,28],[308,21,290,29],[308,26,290,34],[308,28,290,36],[308,30,290,38],[308,31,290,39],[308,32,290,40],[309,12,291,16],[310,12,292,16,"Object"],[310,18,292,22],[310,19,292,23,"assign"],[310,25,292,29],[310,26,292,30,"acc"],[310,29,292,33],[310,30,292,34,"matchedParams"],[310,43,292,47],[310,45,292,49],[311,14,293,20],[311,15,293,21,"p"],[311,16,293,22],[311,19,293,25,"Object"],[311,25,293,31],[311,26,293,32,"assign"],[311,32,293,38],[311,33,293,39,"acc"],[311,36,293,42],[311,37,293,43,"matchedParams"],[311,50,293,56],[311,51,293,57,"p"],[311,52,293,58],[311,53,293,59],[311,57,293,63],[311,58,293,64],[311,59,293,65],[311,61,293,67],[312,16,294,24],[312,17,294,25,"index"],[312,22,294,30],[312,25,294,33,"decodedParamSegment"],[313,14,295,20],[313,15,295,21],[314,12,296,16],[314,13,296,17],[314,14,296,18],[315,12,297,16],[315,19,297,23,"acc"],[315,22,297,26],[316,10,298,12],[316,11,298,13],[316,13,298,15],[317,12,298,17,"pos"],[317,15,298,20],[317,17,298,22],[317,18,298,23],[317,19,298,24],[318,12,298,26,"matchedParams"],[318,25,298,39],[318,27,298,41],[318,28,298,42],[319,10,298,44],[319,11,298,45],[319,12,298,46],[320,10,299,12],[320,14,299,18,"matchedParams"],[320,27,299,31],[320,30,299,34,"matchResult"],[320,41,299,45],[320,42,299,46,"matchedParams"],[320,55,299,59],[320,59,299,63],[320,60,299,64],[320,61,299,65],[321,10,300,12,"routes"],[321,16,300,18],[321,19,300,21,"config"],[321,25,300,27],[321,26,300,28,"routeNames"],[321,36,300,38],[321,37,300,39,"map"],[321,40,300,42],[321,41,300,44,"name"],[321,45,300,48],[321,49,300,53],[322,12,301,16],[322,16,301,22,"routeConfig"],[322,27,301,33],[322,30,301,36,"configs"],[322,37,301,43],[322,38,301,44,"find"],[322,42,301,48],[322,43,301,50,"c"],[322,44,301,51],[322,48,301,56],[323,14,302,20],[324,14,303,20],[324,21,303,27,"c"],[324,22,303,28],[324,23,303,29,"screen"],[324,29,303,35],[324,34,303,40,"name"],[324,38,303,44],[324,42,303,48,"config"],[324,48,303,54],[324,49,303,55,"pattern"],[324,56,303,62],[324,57,303,63,"startsWith"],[324,67,303,73],[324,68,303,74,"c"],[324,69,303,75],[324,70,303,76,"pattern"],[324,77,303,83],[324,78,303,84],[325,12,304,16],[325,13,304,17],[325,14,304,18],[326,12,305,16],[327,12,306,16],[327,16,306,22,"normalizedPath"],[327,30,306,36],[327,33,306,39,"routeConfig"],[327,44,306,50],[327,46,306,52,"path"],[327,50,306,56],[327,51,306,57,"split"],[327,56,306,62],[327,57,306,63],[327,60,306,66],[327,61,306,67],[327,62,306,68,"filter"],[327,68,306,74],[327,69,306,75,"Boolean"],[327,76,306,82],[327,77,306,83],[327,78,306,84,"join"],[327,82,306,88],[327,83,306,89],[327,86,306,92],[327,87,306,93],[328,12,307,16],[329,12,308,16],[329,16,308,22,"numInitialSegments"],[329,34,308,40],[329,37,308,43,"routeConfig"],[329,48,308,54],[329,50,308,56,"pattern"],[330,12,309,20],[331,12,309,20],[331,13,310,21,"replace"],[331,20,310,28],[331,21,310,29],[331,25,310,33,"RegExp"],[331,31,310,39],[331,32,310,40],[331,35,310,43],[331,36,310,44],[331,37,310,45],[331,39,310,47,"escape_string_regexp_1"],[331,61,310,69],[331,62,310,70,"default"],[331,69,310,77],[331,71,310,79,"normalizedPath"],[331,85,310,93],[331,86,310,94],[331,89,310,97],[331,90,310,98],[331,92,310,100],[331,94,310,102],[331,95,310,103],[331,97,311,22,"split"],[331,102,311,27],[331,103,311,28],[331,106,311,31],[331,107,311,32],[331,108,311,33,"length"],[331,114,311,39],[332,12,312,16],[332,16,312,22,"params"],[332,22,312,28],[332,25,312,31,"normalizedPath"],[332,39,312,45],[332,41,313,22,"split"],[332,46,313,27],[332,47,313,28],[332,50,313,31],[332,51,313,32],[332,52,314,21,"reduce"],[332,58,314,27],[332,59,314,28],[332,60,314,29,"acc"],[332,63,314,32],[332,65,314,34,"p"],[332,66,314,35],[332,68,314,37,"index"],[332,73,314,42],[332,78,314,47],[333,14,315,20],[333,18,315,24],[333,19,315,25,"expo"],[333,23,315,29],[333,24,315,30,"isDynamicPart"],[333,37,315,43],[333,38,315,44,"p"],[333,39,315,45],[333,40,315,46],[333,42,315,48],[334,16,316,24],[334,23,316,31,"acc"],[334,26,316,34],[335,14,317,20],[336,14,318,20],[337,14,319,20],[338,14,320,20],[338,18,320,26,"offset"],[338,24,320,32],[338,27,320,35,"numInitialSegments"],[338,45,320,53],[338,48,320,56,"numInitialSegments"],[338,66,320,74],[338,69,320,77],[338,70,320,78],[338,73,320,81],[338,74,320,82],[339,14,321,20],[340,14,322,20],[341,14,323,20],[341,18,323,26,"value"],[341,23,323,31],[341,26,323,34,"expo"],[341,30,323,38],[341,31,323,39,"getParamValue"],[341,44,323,52],[341,45,323,53,"p"],[341,46,323,54],[341,48,323,56,"matchedParams"],[341,61,323,69],[341,62,323,70,"p"],[341,63,323,71],[341,64,323,72],[341,67,323,75,"index"],[341,72,323,80],[341,75,323,83,"offset"],[341,81,323,89],[341,82,323,90],[341,83,323,91],[342,14,324,20],[343,14,325,20],[343,18,325,24,"value"],[343,23,325,29],[343,25,325,31],[344,16,326,24],[345,16,327,24],[346,16,328,24],[346,20,328,30,"key"],[346,23,328,33],[346,26,328,36,"expo"],[346,30,328,40],[346,31,328,41,"replacePart"],[346,42,328,52],[346,43,328,53,"p"],[346,44,328,54],[346,45,328,55],[347,16,329,24],[348,16,330,24,"acc"],[348,19,330,27],[348,20,330,28,"key"],[348,23,330,31],[348,24,330,32],[348,27,330,35,"routeConfig"],[348,38,330,46],[348,40,330,48,"parse"],[348,45,330,53],[348,48,330,56,"key"],[348,51,330,59],[348,52,330,60],[348,55,330,63,"routeConfig"],[348,66,330,74],[348,67,330,75,"parse"],[348,72,330,80],[348,73,330,81,"key"],[348,76,330,84],[348,77,330,85],[348,78,330,86,"value"],[348,83,330,91],[348,84,330,92],[348,87,330,95,"value"],[348,92,330,100],[349,14,331,20],[350,14,332,20],[350,21,332,27,"acc"],[350,24,332,30],[351,12,333,16],[351,13,333,17],[351,15,333,19],[351,16,333,20],[351,17,333,21],[351,18,333,22],[352,12,334,16],[352,16,334,20,"params"],[352,22,334,26],[352,26,334,30,"Object"],[352,32,334,36],[352,33,334,37,"keys"],[352,37,334,41],[352,38,334,42,"params"],[352,44,334,48],[352,45,334,49],[352,46,334,50,"length"],[352,52,334,56],[352,54,334,58],[353,14,335,20,"Object"],[353,20,335,26],[353,21,335,27,"assign"],[353,27,335,33],[353,28,335,34,"allParams"],[353,37,335,43],[353,39,335,45,"params"],[353,45,335,51],[353,46,335,52],[354,14,336,20],[354,21,336,27],[355,16,336,29,"name"],[355,20,336,33],[356,16,336,35,"params"],[357,14,336,42],[357,15,336,43],[358,12,337,16],[359,12,338,16],[359,19,338,23],[360,14,338,25,"name"],[361,12,338,30],[361,13,338,31],[362,10,339,12],[362,11,339,13],[362,12,339,14],[363,10,340,12,"remainingPath"],[363,23,340,25],[363,26,340,28,"remainingPath"],[363,39,340,41],[363,40,340,42,"replace"],[363,47,340,49],[363,48,340,50,"match"],[363,53,340,55],[363,54,340,56],[363,55,340,57],[363,56,340,58],[363,58,340,60],[363,60,340,62],[363,61,340,63],[364,10,340,64],[365,8,342,8],[366,6,343,4],[366,7,343,5],[367,6,343,5,"_ret"],[367,10,343,5],[368,4,272,4],[368,9,272,9],[368,13,272,15,"config"],[368,19,272,21],[368,23,272,25,"configs"],[368,30,272,32],[369,6,272,32,"_ret"],[369,10,272,32],[369,13,272,32,"_loop"],[369,18,272,32],[369,19,272,32,"config"],[369,25,272,32],[370,6,272,32],[370,10,272,32,"_ret"],[370,14,272,32],[370,22,274,12],[371,6,274,21],[371,10,274,21,"_ret"],[371,14,274,21],[371,22,341,12],[372,4,341,18],[373,4,344,4],[374,4,345,4,"expo"],[374,8,345,8],[374,9,345,9,"populateParams"],[374,23,345,23],[374,24,345,24,"routes"],[374,30,345,30],[374,32,345,32,"allParams"],[374,41,345,41],[374,42,345,42],[375,4,346,4],[376,4,347,4],[376,11,347,11],[377,6,347,13,"routes"],[377,12,347,19],[378,6,347,21,"remainingPath"],[379,4,347,35],[379,5,347,36],[380,2,348,0],[380,3,348,1],[381,2,349,0],[381,6,349,6,"createNormalizedConfigs"],[381,29,349,29],[381,32,349,32],[381,41,349,32,"createNormalizedConfigs"],[381,42,349,33,"screen"],[381,48,349,39],[381,50,349,41,"routeConfig"],[381,61,349,52],[381,63,349,114],[382,4,349,114],[382,8,349,54,"routeNames"],[382,18,349,64],[382,21,349,64,"arguments"],[382,30,349,64],[382,31,349,64,"length"],[382,37,349,64],[382,45,349,64,"arguments"],[382,54,349,64],[382,62,349,64,"undefined"],[382,71,349,64],[382,74,349,64,"arguments"],[382,83,349,64],[382,89,349,67],[382,91,349,69],[383,4,349,69],[383,8,349,71,"initials"],[383,16,349,79],[383,19,349,79,"arguments"],[383,28,349,79],[383,29,349,79,"length"],[383,35,349,79],[383,42,349,79,"arguments"],[383,51,349,79],[383,57,349,79,"undefined"],[383,66,349,79],[384,4,349,79],[384,8,349,81,"parentScreens"],[384,21,349,94],[384,24,349,94,"arguments"],[384,33,349,94],[384,34,349,94,"length"],[384,40,349,94],[384,47,349,94,"arguments"],[384,56,349,94],[384,62,349,94,"undefined"],[384,71,349,94],[385,4,349,94],[385,8,349,96,"parentPattern"],[385,21,349,109],[385,24,349,109,"arguments"],[385,33,349,109],[385,34,349,109,"length"],[385,40,349,109],[385,47,349,109,"arguments"],[385,56,349,109],[385,62,349,109,"undefined"],[385,71,349,109],[386,4,350,4],[386,8,350,10,"configs"],[386,15,350,17],[386,18,350,20],[386,20,350,22],[387,4,351,4,"routeNames"],[387,14,351,14],[387,15,351,15,"push"],[387,19,351,19],[387,20,351,20,"screen"],[387,26,351,26],[387,27,351,27],[388,4,352,4,"parentScreens"],[388,17,352,17],[388,18,352,18,"push"],[388,22,352,22],[388,23,352,23,"screen"],[388,29,352,29],[388,30,352,30],[389,4,353,4],[389,8,353,10,"config"],[389,14,353,16],[389,17,353,19,"routeConfig"],[389,28,353,30],[389,29,353,31,"screen"],[389,35,353,37],[389,36,353,38],[390,4,354,4],[390,8,354,8],[390,15,354,15,"config"],[390,21,354,21],[390,26,354,26],[390,34,354,34],[390,36,354,36],[391,6,355,8],[392,6,356,8],[392,10,356,14,"pattern"],[392,17,356,21],[392,20,356,24,"parentPattern"],[392,33,356,37],[392,36,356,40,"joinPaths"],[392,45,356,49],[392,46,356,50,"parentPattern"],[392,59,356,63],[392,61,356,65,"config"],[392,67,356,71],[392,68,356,72],[392,71,356,75,"config"],[392,77,356,81],[393,6,357,8,"configs"],[393,13,357,15],[393,14,357,16,"push"],[393,18,357,20],[393,19,357,21,"createConfigItem"],[393,35,357,37],[393,36,357,38,"screen"],[393,42,357,44],[393,44,357,46,"routeNames"],[393,54,357,56],[393,56,357,58,"pattern"],[393,63,357,65],[393,65,357,67,"config"],[393,71,357,73],[393,72,357,74],[393,73,357,75],[394,4,358,4],[394,5,358,5],[394,11,359,9],[394,15,359,13],[394,22,359,20,"config"],[394,28,359,26],[394,33,359,31],[394,41,359,39],[394,43,359,41],[395,6,360,8],[395,10,360,12,"pattern"],[395,18,360,19],[396,6,361,8],[397,6,362,8],[398,6,363,8],[399,6,364,8],[399,10,364,12],[399,17,364,19,"config"],[399,23,364,25],[399,24,364,26,"path"],[399,28,364,30],[399,33,364,35],[399,41,364,43],[399,43,364,45],[400,8,365,12],[400,12,365,16,"config"],[400,18,365,22],[400,19,365,23,"exact"],[400,24,365,28],[400,28,365,32,"config"],[400,34,365,38],[400,35,365,39,"path"],[400,39,365,43],[400,44,365,48,"undefined"],[400,53,365,57],[400,55,365,59],[401,10,366,16],[401,16,366,22],[401,20,366,26,"Error"],[401,25,366,31],[401,26,366,32],[401,176,366,182],[401,177,366,183],[402,8,367,12],[403,8,368,12,"pattern"],[403,16,368,19],[403,19,369,16,"config"],[403,25,369,22],[403,26,369,23,"exact"],[403,31,369,28],[403,36,369,33],[403,40,369,37],[403,43,370,22,"joinPaths"],[403,52,370,31],[403,53,370,32,"parentPattern"],[403,66,370,45],[403,70,370,49],[403,72,370,51],[403,74,370,53,"config"],[403,80,370,59],[403,81,370,60,"path"],[403,85,370,64],[403,89,370,68],[403,91,370,70],[403,92,370,71],[403,95,371,22,"config"],[403,101,371,28],[403,102,371,29,"path"],[403,106,371,33],[403,110,371,37],[403,112,371,39],[404,8,372,12,"configs"],[404,15,372,19],[404,16,372,20,"push"],[404,20,372,24],[404,21,372,25,"createConfigItem"],[404,37,372,41],[404,38,372,42,"screen"],[404,44,372,48],[404,46,372,50,"routeNames"],[404,56,372,60],[404,58,372,62,"pattern"],[404,66,372,69],[404,68,372,71,"config"],[404,74,372,77],[404,75,372,78,"path"],[404,79,372,82],[404,81,372,84,"config"],[404,87,372,90],[404,88,372,91,"parse"],[404,93,372,96],[404,95,372,98,"config"],[404,101,372,104],[404,102,372,105],[404,103,372,106],[405,6,373,8],[406,6,374,8],[406,10,374,12,"config"],[406,16,374,18],[406,17,374,19,"screens"],[406,24,374,26],[406,26,374,28],[407,8,375,12],[408,8,376,12],[408,12,376,16,"config"],[408,18,376,22],[408,19,376,23,"initialRouteName"],[408,35,376,39],[408,37,376,41],[409,10,377,16,"initials"],[409,18,377,24],[409,19,377,25,"push"],[409,23,377,29],[409,24,377,30],[410,12,378,20,"initialRouteName"],[410,28,378,36],[410,30,378,38,"config"],[410,36,378,44],[410,37,378,45,"initialRouteName"],[410,53,378,61],[411,12,379,20,"parentScreens"],[412,10,380,16],[412,11,380,17],[412,12,380,18],[413,8,381,12],[414,8,382,12,"Object"],[414,14,382,18],[414,15,382,19,"keys"],[414,19,382,23],[414,20,382,24,"config"],[414,26,382,30],[414,27,382,31,"screens"],[414,34,382,38],[414,35,382,39],[414,36,382,40,"forEach"],[414,43,382,47],[414,44,382,49,"nestedConfig"],[414,56,382,61],[414,60,382,66],[415,10,383,16],[415,14,383,22,"result"],[415,20,383,28],[415,23,383,31,"createNormalizedConfigs"],[415,46,383,54],[415,47,383,55,"nestedConfig"],[415,59,383,67],[415,61,383,69,"config"],[415,67,383,75],[415,68,383,76,"screens"],[415,75,383,83],[415,77,383,85,"routeNames"],[415,87,383,95],[415,89,383,97,"initials"],[415,97,383,105],[415,99,383,107],[415,100,383,108],[415,103,383,111,"parentScreens"],[415,116,383,124],[415,117,383,125],[415,119,383,127,"pattern"],[415,127,383,134],[415,131,383,138,"parentPattern"],[415,144,383,151],[415,145,383,152],[416,10,384,16,"configs"],[416,17,384,23],[416,18,384,24,"push"],[416,22,384,28],[416,23,384,29],[416,26,384,32,"result"],[416,32,384,38],[416,33,384,39],[417,8,385,12],[417,9,385,13],[417,10,385,14],[418,6,386,8],[419,4,387,4],[420,4,388,4,"routeNames"],[420,14,388,14],[420,15,388,15,"pop"],[420,18,388,18],[420,19,388,19],[420,20,388,20],[421,4,389,4],[421,11,389,11,"configs"],[421,18,389,18],[422,2,390,0],[422,3,390,1],[423,2,391,0],[423,6,391,6,"createConfigItem"],[423,22,391,22],[423,25,391,25],[423,34,391,25,"createConfigItem"],[423,35,391,26,"screen"],[423,41,391,32],[423,43,391,34,"routeNames"],[423,53,391,44],[423,55,391,46,"pattern"],[423,62,391,53],[423,64,391,55,"path"],[423,68,391,59],[423,70,391,96],[424,4,391,96],[424,8,391,61,"parse"],[424,13,391,66],[424,16,391,66,"arguments"],[424,25,391,66],[424,26,391,66,"length"],[424,32,391,66],[424,40,391,66,"arguments"],[424,49,391,66],[424,57,391,66,"undefined"],[424,66,391,66],[424,69,391,66,"arguments"],[424,78,391,66],[424,84,391,69,"undefined"],[424,93,391,78],[425,4,391,78],[425,8,391,80,"config"],[425,14,391,86],[425,17,391,86,"arguments"],[425,26,391,86],[425,27,391,86,"length"],[425,33,391,86],[425,41,391,86,"arguments"],[425,50,391,86],[425,58,391,86,"undefined"],[425,67,391,86],[425,70,391,86,"arguments"],[425,79,391,86],[425,85,391,89],[425,86,391,90],[425,87,391,91],[426,4,392,4],[427,4,393,4,"pattern"],[427,11,393,11],[427,14,393,14,"pattern"],[427,21,393,21],[427,22,393,22,"split"],[427,27,393,27],[427,28,393,28],[427,31,393,31],[427,32,393,32],[427,33,393,33,"filter"],[427,39,393,39],[427,40,393,40,"Boolean"],[427,47,393,47],[427,48,393,48],[427,49,393,49,"join"],[427,53,393,53],[427,54,393,54],[427,57,393,57],[427,58,393,58],[428,4,394,4],[428,8,394,10,"regex"],[428,13,394,15],[428,16,394,18,"pattern"],[428,23,394,25],[428,26,395,10],[428,30,395,14,"RegExp"],[428,36,395,20],[428,37,395,21],[428,42,395,26,"pattern"],[428,49,395,33],[428,50,396,13,"split"],[428,55,396,18],[428,56,396,19],[428,59,396,22],[428,60,396,23],[428,61,397,13,"map"],[428,64,397,16],[428,65,397,18,"it"],[428,67,397,20],[428,71,397,25],[429,6,398,12],[429,10,398,16,"it"],[429,12,398,18],[429,13,398,19,"startsWith"],[429,23,398,29],[429,24,398,30],[429,27,398,33],[429,28,398,34],[429,30,398,36],[430,8,399,16],[430,15,399,23],[430,29,399,37,"it"],[430,31,399,39],[430,32,399,40,"endsWith"],[430,40,399,48],[430,41,399,49],[430,44,399,52],[430,45,399,53],[430,48,399,56],[430,51,399,59],[430,54,399,62],[430,56,399,64],[430,59,399,67],[431,6,400,12],[432,6,401,12],[432,13,401,19],[432,16,401,22,"it"],[432,18,401,24],[432,23,401,29],[432,26,401,32],[432,29,401,35],[432,33,401,39],[432,36,401,42],[432,37,401,43],[432,38,401,44],[432,40,401,46,"escape_string_regexp_1"],[432,62,401,68],[432,63,401,69,"default"],[432,70,401,76],[432,72,401,78,"it"],[432,74,401,80],[432,75,401,81],[432,80,401,86],[433,4,402,8],[433,5,402,9],[433,6,402,10],[433,7,403,13,"join"],[433,11,403,17],[433,12,403,18],[433,14,403,20],[433,15,403,21],[433,18,403,24],[433,19,403,25],[433,22,404,10,"undefined"],[433,31,404,19],[434,4,405,4],[434,11,405,11],[435,6,406,8,"screen"],[435,12,406,14],[436,6,407,8,"regex"],[436,11,407,13],[437,6,408,8,"pattern"],[437,13,408,15],[438,6,409,8,"path"],[438,10,409,12],[439,6,410,8],[440,6,411,8,"routeNames"],[440,16,411,18],[440,18,411,20],[440,19,411,21],[440,22,411,24,"routeNames"],[440,32,411,34],[440,33,411,35],[441,6,412,8,"parse"],[441,11,412,13],[442,6,413,8],[443,6,414,8],[443,9,414,11,"expo"],[443,13,414,15],[443,14,414,16,"createConfig"],[443,26,414,28],[443,27,414,29,"screen"],[443,33,414,35],[443,35,414,37,"pattern"],[443,42,414,44],[443,44,414,46,"routeNames"],[443,54,414,56],[443,56,414,58,"config"],[443,62,414,64],[444,6,415,8],[445,4,416,4],[445,5,416,5],[446,2,417,0],[446,3,417,1],[447,2,418,0],[447,6,418,6,"findParseConfigForRoute"],[447,29,418,29],[447,32,418,32,"findParseConfigForRoute"],[447,33,418,33,"routeName"],[447,42,418,42],[447,44,418,44,"flatConfig"],[447,54,418,54],[447,59,418,59],[448,4,419,4],[448,9,419,9],[448,13,419,15,"config"],[448,19,419,21],[448,23,419,25,"flatConfig"],[448,33,419,35],[448,35,419,37],[449,6,420,8],[449,10,420,12,"routeName"],[449,19,420,21],[449,24,420,26,"config"],[449,30,420,32],[449,31,420,33,"routeNames"],[449,41,420,43],[449,42,420,44,"config"],[449,48,420,50],[449,49,420,51,"routeNames"],[449,59,420,61],[449,60,420,62,"length"],[449,66,420,68],[449,69,420,71],[449,70,420,72],[449,71,420,73],[449,73,420,75],[450,8,421,12],[450,15,421,19,"config"],[450,21,421,25],[450,22,421,26,"parse"],[450,27,421,31],[451,6,422,8],[452,4,423,4],[453,4,424,4],[453,11,424,11,"undefined"],[453,20,424,20],[454,2,425,0],[454,3,425,1],[455,2,426,0],[456,2,427,0],[456,6,427,6,"findInitialRoute"],[456,22,427,22],[456,25,427,25,"findInitialRoute"],[456,26,427,26,"routeName"],[456,35,427,35],[456,37,427,37,"parentScreens"],[456,50,427,50],[456,52,427,52,"initialRoutes"],[456,65,427,65],[456,70,427,70],[457,4,428,4],[457,9,428,9],[457,13,428,15,"config"],[457,19,428,21],[457,23,428,25,"initialRoutes"],[457,36,428,38],[457,38,428,40],[458,6,429,8],[458,10,429,12,"parentScreens"],[458,23,429,25],[458,24,429,26,"length"],[458,30,429,32],[458,35,429,37,"config"],[458,41,429,43],[458,42,429,44,"parentScreens"],[458,55,429,57],[458,56,429,58,"length"],[458,62,429,64],[458,64,429,66],[459,8,430,12],[459,12,430,16,"sameParents"],[459,23,430,27],[459,26,430,30],[459,30,430,34],[460,8,431,12],[460,13,431,17],[460,17,431,21,"i"],[460,18,431,22],[460,21,431,25],[460,22,431,26],[460,24,431,28,"i"],[460,25,431,29],[460,28,431,32,"parentScreens"],[460,41,431,45],[460,42,431,46,"length"],[460,48,431,52],[460,50,431,54,"i"],[460,51,431,55],[460,53,431,57],[460,55,431,59],[461,10,432,16],[461,14,432,20,"parentScreens"],[461,27,432,33],[461,28,432,34,"i"],[461,29,432,35],[461,30,432,36],[461,31,432,37,"localeCompare"],[461,44,432,50],[461,45,432,51,"config"],[461,51,432,57],[461,52,432,58,"parentScreens"],[461,65,432,71],[461,66,432,72,"i"],[461,67,432,73],[461,68,432,74],[461,69,432,75],[461,74,432,80],[461,75,432,81],[461,77,432,83],[462,12,433,20,"sameParents"],[462,23,433,31],[462,26,433,34],[462,31,433,39],[463,12,434,20],[464,10,435,16],[465,8,436,12],[466,8,437,12],[466,12,437,16,"sameParents"],[466,23,437,27],[466,25,437,29],[467,10,438,16],[467,17,438,23,"routeName"],[467,26,438,32],[467,31,438,37,"config"],[467,37,438,43],[467,38,438,44,"initialRouteName"],[467,54,438,60],[467,57,438,63,"config"],[467,63,438,69],[467,64,438,70,"initialRouteName"],[467,80,438,86],[467,83,438,89,"undefined"],[467,92,438,98],[468,8,439,12],[469,6,440,8],[470,4,441,4],[471,4,442,4],[471,11,442,11,"undefined"],[471,20,442,20],[472,2,443,0],[472,3,443,1],[473,2,444,0],[474,2,445,0],[475,2,446,0],[475,6,446,6,"createStateObject"],[475,23,446,23],[475,26,446,26,"createStateObject"],[475,27,446,27,"initialRoute"],[475,39,446,39],[475,41,446,41,"route"],[475,46,446,46],[475,48,446,48,"isEmpty"],[475,55,446,55],[475,60,446,60],[476,4,447,4],[476,8,447,8,"isEmpty"],[476,15,447,15],[476,17,447,17],[477,6,448,8],[477,10,448,12,"initialRoute"],[477,22,448,24],[477,24,448,26],[478,8,449,12],[478,15,449,19],[479,10,450,16,"index"],[479,15,450,21],[479,17,450,23],[479,18,450,24],[480,10,451,16,"routes"],[480,16,451,22],[480,18,451,24],[480,19,451,25],[481,12,451,27,"name"],[481,16,451,31],[481,18,451,33,"initialRoute"],[481,30,451,45],[482,12,451,47,"params"],[482,18,451,53],[482,20,451,55,"route"],[482,25,451,60],[482,26,451,61,"params"],[483,10,451,68],[483,11,451,69],[483,13,451,71,"route"],[483,18,451,76],[484,8,452,12],[484,9,452,13],[485,6,453,8],[485,7,453,9],[485,13,454,13],[486,8,455,12],[486,15,455,19],[487,10,456,16,"routes"],[487,16,456,22],[487,18,456,24],[487,19,456,25,"route"],[487,24,456,30],[488,8,457,12],[488,9,457,13],[489,6,458,8],[490,4,459,4],[490,5,459,5],[490,11,460,9],[491,6,461,8],[491,10,461,12,"initialRoute"],[491,22,461,24],[491,24,461,26],[492,8,462,12],[492,15,462,19],[493,10,463,16,"index"],[493,15,463,21],[493,17,463,23],[493,18,463,24],[494,10,464,16,"routes"],[494,16,464,22],[494,18,464,24],[494,19,465,20],[495,12,465,22,"name"],[495,16,465,26],[495,18,465,28,"initialRoute"],[495,30,465,40],[496,12,465,42,"params"],[496,18,465,48],[496,20,465,50,"route"],[496,25,465,55],[496,26,465,56,"params"],[497,10,465,63],[497,11,465,64],[497,13,466,20],[498,12,466,22],[498,15,466,25,"route"],[498,20,466,30],[499,12,466,32,"state"],[499,17,466,37],[499,19,466,39],[500,14,466,41,"routes"],[500,20,466,47],[500,22,466,49],[501,12,466,52],[502,10,466,54],[502,11,466,55],[503,8,468,12],[503,9,468,13],[504,6,469,8],[504,7,469,9],[504,13,470,13],[505,8,471,12],[505,15,471,19],[506,10,472,16,"routes"],[506,16,472,22],[506,18,472,24],[506,19,472,25],[507,12,472,27],[507,15,472,30,"route"],[507,20,472,35],[508,12,472,37,"state"],[508,17,472,42],[508,19,472,44],[509,14,472,46,"routes"],[509,20,472,52],[509,22,472,54],[510,12,472,57],[511,10,472,59],[511,11,472,60],[512,8,473,12],[512,9,473,13],[513,6,474,8],[514,4,475,4],[515,2,476,0],[515,3,476,1],[516,2,477,0],[516,6,477,6,"createNestedStateObject"],[516,29,477,29],[516,32,477,32,"createNestedStateObject"],[516,33,477,32,"_ref"],[516,37,477,32],[516,39,477,55,"routes"],[516,45,477,61],[516,47,477,63,"initialRoutes"],[516,60,477,76],[516,62,477,78,"flatConfig"],[516,72,477,88],[516,74,477,90,"hash"],[516,78,477,94],[516,83,477,99],[517,4,477,99],[517,8,477,35,"path"],[517,12,477,39],[517,15,477,39,"_ref"],[517,19,477,39],[517,20,477,35,"path"],[517,24,477,39],[518,6,477,44,"expoURL"],[518,13,477,51],[518,16,477,51,"_objectWithoutProperties"],[518,40,477,51],[518,41,477,51,"_ref"],[518,45,477,51],[518,47,477,51,"_excluded"],[518,56,477,51],[519,4,478,4],[519,8,478,8,"route"],[519,13,478,13],[519,16,478,16,"routes"],[519,22,478,22],[519,23,478,23,"shift"],[519,28,478,28],[519,29,478,29],[519,30,478,30],[520,4,479,4],[520,8,479,10,"parentScreens"],[520,21,479,23],[520,24,479,26],[520,26,479,28],[521,4,480,4],[521,8,480,8,"initialRoute"],[521,20,480,20],[521,23,480,23,"findInitialRoute"],[521,39,480,39],[521,40,480,40,"route"],[521,45,480,45],[521,46,480,46,"name"],[521,50,480,50],[521,52,480,52,"parentScreens"],[521,65,480,65],[521,67,480,67,"initialRoutes"],[521,80,480,80],[521,81,480,81],[522,4,481,4,"parentScreens"],[522,17,481,17],[522,18,481,18,"push"],[522,22,481,22],[522,23,481,23,"route"],[522,28,481,28],[522,29,481,29,"name"],[522,33,481,33],[522,34,481,34],[523,4,482,4],[523,8,482,10,"state"],[523,13,482,15],[523,16,482,18,"createStateObject"],[523,33,482,35],[523,34,482,36,"initialRoute"],[523,46,482,48],[523,48,482,50,"route"],[523,53,482,55],[523,55,482,57,"routes"],[523,61,482,63],[523,62,482,64,"length"],[523,68,482,70],[523,73,482,75],[523,74,482,76],[523,75,482,77],[524,4,483,4],[524,8,483,8,"routes"],[524,14,483,14],[524,15,483,15,"length"],[524,21,483,21],[524,24,483,24],[524,25,483,25],[524,27,483,27],[525,6,484,8],[525,10,484,12,"nestedState"],[525,21,484,23],[525,24,484,26,"state"],[525,29,484,31],[526,6,485,8],[526,13,485,16,"route"],[526,18,485,21],[526,21,485,24,"routes"],[526,27,485,30],[526,28,485,31,"shift"],[526,33,485,36],[526,34,485,37],[526,35,485,38],[526,37,485,41],[527,8,486,12,"initialRoute"],[527,20,486,24],[527,23,486,27,"findInitialRoute"],[527,39,486,43],[527,40,486,44,"route"],[527,45,486,49],[527,46,486,50,"name"],[527,50,486,54],[527,52,486,56,"parentScreens"],[527,65,486,69],[527,67,486,71,"initialRoutes"],[527,80,486,84],[527,81,486,85],[528,8,487,12],[528,12,487,18,"nestedStateIndex"],[528,28,487,34],[528,31,487,37,"nestedState"],[528,42,487,48],[528,43,487,49,"index"],[528,48,487,54],[528,52,487,58,"nestedState"],[528,63,487,69],[528,64,487,70,"routes"],[528,70,487,76],[528,71,487,77,"length"],[528,77,487,83],[528,80,487,86],[528,81,487,87],[529,8,488,12,"nestedState"],[529,19,488,23],[529,20,488,24,"routes"],[529,26,488,30],[529,27,488,31,"nestedStateIndex"],[529,43,488,47],[529,44,488,48],[529,45,488,49,"state"],[529,50,488,54],[529,53,488,57,"createStateObject"],[529,70,488,74],[529,71,488,75,"initialRoute"],[529,83,488,87],[529,85,488,89,"route"],[529,90,488,94],[529,92,488,96,"routes"],[529,98,488,102],[529,99,488,103,"length"],[529,105,488,109],[529,110,488,114],[529,111,488,115],[529,112,488,116],[530,8,489,12],[530,12,489,16,"routes"],[530,18,489,22],[530,19,489,23,"length"],[530,25,489,29],[530,28,489,32],[530,29,489,33],[530,31,489,35],[531,10,490,16,"nestedState"],[531,21,490,27],[531,24,490,30,"nestedState"],[531,35,490,41],[531,36,490,42,"routes"],[531,42,490,48],[531,43,490,49,"nestedStateIndex"],[531,59,490,65],[531,60,490,66],[531,61,490,67,"state"],[531,66,490,72],[532,8,491,12],[533,8,492,12,"parentScreens"],[533,21,492,25],[533,22,492,26,"push"],[533,26,492,30],[533,27,492,31,"route"],[533,32,492,36],[533,33,492,37,"name"],[533,37,492,41],[533,38,492,42],[534,6,493,8],[535,4,494,4],[536,4,495,4,"route"],[536,9,495,9],[536,12,495,12],[536,13,495,13],[536,14,495,14],[536,16,495,16,"require"],[536,23,495,16],[536,24,495,16,"_dependencyMap"],[536,38,495,16],[536,65,495,35,"findFocusedRoute"],[536,81,495,51],[536,83,495,53,"state"],[536,88,495,58],[536,89,495,59],[537,4,496,4],[538,4,497,4,"route"],[538,9,497,9],[538,10,497,10,"path"],[538,14,497,14],[538,17,497,17,"expoURL"],[538,24,497,24],[538,25,497,25,"pathWithoutGroups"],[538,42,497,42],[539,4,498,4],[540,4,499,4],[541,4,500,4],[542,4,501,4],[543,4,502,4],[543,8,502,10,"params"],[543,14,502,16],[543,17,502,19,"expo"],[543,21,502,23],[543,22,502,24,"parseQueryParams"],[543,38,502,40],[543,39,502,41,"path"],[543,43,502,45],[543,45,502,47,"route"],[543,50,502,52],[543,52,502,54,"flatConfig"],[543,62,502,64],[543,65,502,67,"findParseConfigForRoute"],[543,88,502,90],[543,89,502,91,"route"],[543,94,502,96],[543,95,502,97,"name"],[543,99,502,101],[543,101,502,103,"flatConfig"],[543,111,502,113],[543,112,502,114],[543,115,502,117,"undefined"],[543,124,502,126],[543,126,502,128,"hash"],[543,130,502,132],[543,131,502,133],[544,4,503,4],[545,4,504,4],[546,4,505,4],[547,4,506,4],[547,8,506,8,"params"],[547,14,506,14],[547,16,506,16],[548,6,507,8,"route"],[548,11,507,13],[548,12,507,14,"params"],[548,18,507,20],[548,21,507,23],[549,8,507,25],[549,11,507,28,"route"],[549,16,507,33],[549,17,507,34,"params"],[549,23,507,40],[550,8,507,42],[550,11,507,45,"params"],[551,6,507,52],[551,7,507,53],[552,4,508,4],[553,4,509,4],[554,4,510,4],[554,11,510,11,"state"],[554,16,510,16],[555,2,511,0],[555,3,511,1],[556,2,512,0],[557,2,513,0],[558,2,514,0],[559,2,515,0],[560,2,516,0],[561,2,517,0],[562,2,518,0],[563,2,519,0],[564,2,520,0],[565,2,521,0],[566,2,522,0],[567,2,523,0],[568,2,524,0],[569,2,525,0],[570,0,525,0],[570,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","getStateFromPath","remaining.split.filter.map$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getNormalizedConfigs","Object.keys.map$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","joinPaths","paths.map$argument_0","matchAgainstConfigs","config.pattern.split.reduce$argument_0","config.routeNames.map$argument_0","configs.find$argument_0","normalizedPath.split.reduce$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","pattern.split.map$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;kDCC;CDM;wDCC;CDE;AG4B;iBCiC;SDG;0EEqB,oBF;CHmB;AMS;CNY;AOC;CPa;AQC;CRS;ASC;4CCO,qED;CTgD;AWC;mBCE;6DCM,sBD,YE,sBF;KDQ;CXC;AeC;uBCC;MDO;CfC;kBiBC;yBCC,mBD;cjBE;4BmBC;kECc;aDmB;2CEE;iDCC;iBDG;4BEU;iBFmB;aFM;CnBS;gCwBC;gDCiC;aDG;CxBK;yB0BC;iBCM;SDK;C1Be;gC4BC;C5BO;yB6BE;C7BgB;0B8BG;C9B8B;gC+BC;C/BkC"}},"type":"js/module"}]}