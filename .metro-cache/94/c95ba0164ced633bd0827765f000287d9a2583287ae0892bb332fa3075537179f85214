{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":56,"column":46,"index":2273}}],"key":"5y7e5+zC7teYEEC6niD9f5zII1M="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.validatePathConfig = validatePathConfig;\n  var formatToList = items => Object.entries(items).map(_ref => {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    return `- ${key} (${value})`;\n  }).join('\\n');\n  function validatePathConfig(config) {\n    var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var validation = {\n      path: 'string',\n      initialRouteName: 'string',\n      screens: 'object',\n      ...(root ? null : {\n        alias: 'array',\n        exact: 'boolean',\n        stringify: 'object',\n        parse: 'object'\n      })\n    };\n    if (typeof config !== 'object' || config === null) {\n      throw new Error(`Expected the configuration to be an object, but got ${JSON.stringify(config)}.`);\n    }\n    var validationErrors = Object.fromEntries(Object.keys(config).map(key => {\n      if (key in validation) {\n        var type = validation[key];\n        // @ts-expect-error: we know the key exists\n        var value = config[key];\n        if (value !== undefined) {\n          if (type === 'array') {\n            if (!Array.isArray(value)) {\n              return [key, `expected 'Array', got '${typeof value}'`];\n            }\n          } else if (typeof value !== type) {\n            return [key, `expected '${type}', got '${typeof value}'`];\n          }\n        }\n      } else {\n        return [key, 'extraneous'];\n      }\n      return null;\n    }).filter(Boolean));\n    if (Object.keys(validationErrors).length) {\n      throw new Error(`Found invalid properties in the configuration:\\n${formatToList(validationErrors)}\\n\\nYou can only specify the following properties:\\n${formatToList(validation)}\\n\\nIf you want to specify configuration for screens, you need to specify them under a 'screens' property.\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);\n    }\n    if (root && 'path' in config && typeof config.path === 'string' && config.path.includes(':')) {\n      throw new Error(`Found invalid path '${config.path}'. The 'path' in the top-level configuration cannot contain patterns for params.`);\n    }\n    if ('screens' in config && config.screens) {\n      Object.entries(config.screens).forEach(_ref3 => {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          _ = _ref4[0],\n          value = _ref4[1];\n        if (typeof value !== 'string') {\n          validatePathConfig(value, false);\n        }\n      });\n    }\n  }\n});","lineCount":67,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[5,2,3,0,"Object"],[5,8,3,6],[5,9,3,7,"defineProperty"],[5,23,3,21],[5,24,3,22,"exports"],[5,31,3,29],[5,33,3,31],[5,45,3,43],[5,47,3,45],[6,4,4,2,"value"],[6,9,4,7],[6,11,4,9],[7,2,5,0],[7,3,5,1],[7,4,5,2],[8,2,6,0,"exports"],[8,9,6,7],[8,10,6,8,"validatePathConfig"],[8,28,6,26],[8,31,6,29,"validatePathConfig"],[8,49,6,47],[9,2,7,0],[9,6,7,6,"formatToList"],[9,18,7,18],[9,21,7,21,"items"],[9,26,7,26],[9,30,7,30,"Object"],[9,36,7,36],[9,37,7,37,"entries"],[9,44,7,44],[9,45,7,45,"items"],[9,50,7,50],[9,51,7,51],[9,52,7,52,"map"],[9,55,7,55],[9,56,7,56,"_ref"],[9,60,7,56],[10,4,7,56],[10,8,7,56,"_ref2"],[10,13,7,56],[10,16,7,56,"_slicedToArray"],[10,30,7,56],[10,31,7,56,"_ref"],[10,35,7,56],[11,6,7,58,"key"],[11,9,7,61],[11,12,7,61,"_ref2"],[11,17,7,61],[12,6,7,63,"value"],[12,11,7,68],[12,14,7,68,"_ref2"],[12,19,7,68],[13,4,7,68],[13,11,7,74],[13,16,7,79,"key"],[13,19,7,82],[13,24,7,87,"value"],[13,29,7,92],[13,32,7,95],[14,2,7,95],[14,4,7,96],[14,5,7,97,"join"],[14,9,7,101],[14,10,7,102],[14,14,7,106],[14,15,7,107],[15,2,8,0],[15,11,8,9,"validatePathConfig"],[15,29,8,27,"validatePathConfig"],[15,30,8,28,"config"],[15,36,8,34],[15,38,8,49],[16,4,8,49],[16,8,8,36,"root"],[16,12,8,40],[16,15,8,40,"arguments"],[16,24,8,40],[16,25,8,40,"length"],[16,31,8,40],[16,39,8,40,"arguments"],[16,48,8,40],[16,56,8,40,"undefined"],[16,65,8,40],[16,68,8,40,"arguments"],[16,77,8,40],[16,83,8,43],[16,87,8,47],[17,4,9,2],[17,8,9,8,"validation"],[17,18,9,18],[17,21,9,21],[18,6,10,4,"path"],[18,10,10,8],[18,12,10,10],[18,20,10,18],[19,6,11,4,"initialRouteName"],[19,22,11,20],[19,24,11,22],[19,32,11,30],[20,6,12,4,"screens"],[20,13,12,11],[20,15,12,13],[20,23,12,21],[21,6,13,4],[21,10,13,8,"root"],[21,14,13,12],[21,17,13,15],[21,21,13,19],[21,24,13,22],[22,8,14,6,"alias"],[22,13,14,11],[22,15,14,13],[22,22,14,20],[23,8,15,6,"exact"],[23,13,15,11],[23,15,15,13],[23,24,15,22],[24,8,16,6,"stringify"],[24,17,16,15],[24,19,16,17],[24,27,16,25],[25,8,17,6,"parse"],[25,13,17,11],[25,15,17,13],[26,6,18,4],[26,7,18,5],[27,4,19,2],[27,5,19,3],[28,4,20,2],[28,8,20,6],[28,15,20,13,"config"],[28,21,20,19],[28,26,20,24],[28,34,20,32],[28,38,20,36,"config"],[28,44,20,42],[28,49,20,47],[28,53,20,51],[28,55,20,53],[29,6,21,4],[29,12,21,10],[29,16,21,14,"Error"],[29,21,21,19],[29,22,21,20],[29,77,21,75,"JSON"],[29,81,21,79],[29,82,21,80,"stringify"],[29,91,21,89],[29,92,21,90,"config"],[29,98,21,96],[29,99,21,97],[29,102,21,100],[29,103,21,101],[30,4,22,2],[31,4,23,2],[31,8,23,8,"validationErrors"],[31,24,23,24],[31,27,23,27,"Object"],[31,33,23,33],[31,34,23,34,"fromEntries"],[31,45,23,45],[31,46,23,46,"Object"],[31,52,23,52],[31,53,23,53,"keys"],[31,57,23,57],[31,58,23,58,"config"],[31,64,23,64],[31,65,23,65],[31,66,23,66,"map"],[31,69,23,69],[31,70,23,70,"key"],[31,73,23,73],[31,77,23,77],[32,6,24,4],[32,10,24,8,"key"],[32,13,24,11],[32,17,24,15,"validation"],[32,27,24,25],[32,29,24,27],[33,8,25,6],[33,12,25,12,"type"],[33,16,25,16],[33,19,25,19,"validation"],[33,29,25,29],[33,30,25,30,"key"],[33,33,25,33],[33,34,25,34],[34,8,26,6],[35,8,27,6],[35,12,27,12,"value"],[35,17,27,17],[35,20,27,20,"config"],[35,26,27,26],[35,27,27,27,"key"],[35,30,27,30],[35,31,27,31],[36,8,28,6],[36,12,28,10,"value"],[36,17,28,15],[36,22,28,20,"undefined"],[36,31,28,29],[36,33,28,31],[37,10,29,8],[37,14,29,12,"type"],[37,18,29,16],[37,23,29,21],[37,30,29,28],[37,32,29,30],[38,12,30,10],[38,16,30,14],[38,17,30,15,"Array"],[38,22,30,20],[38,23,30,21,"isArray"],[38,30,30,28],[38,31,30,29,"value"],[38,36,30,34],[38,37,30,35],[38,39,30,37],[39,14,31,12],[39,21,31,19],[39,22,31,20,"key"],[39,25,31,23],[39,27,31,25],[39,53,31,51],[39,60,31,58,"value"],[39,65,31,63],[39,68,31,66],[39,69,31,67],[40,12,32,10],[41,10,33,8],[41,11,33,9],[41,17,33,15],[41,21,33,19],[41,28,33,26,"value"],[41,33,33,31],[41,38,33,36,"type"],[41,42,33,40],[41,44,33,42],[42,12,34,10],[42,19,34,17],[42,20,34,18,"key"],[42,23,34,21],[42,25,34,23],[42,38,34,36,"type"],[42,42,34,40],[42,53,34,51],[42,60,34,58,"value"],[42,65,34,63],[42,68,34,66],[42,69,34,67],[43,10,35,8],[44,8,36,6],[45,6,37,4],[45,7,37,5],[45,13,37,11],[46,8,38,6],[46,15,38,13],[46,16,38,14,"key"],[46,19,38,17],[46,21,38,19],[46,33,38,31],[46,34,38,32],[47,6,39,4],[48,6,40,4],[48,13,40,11],[48,17,40,15],[49,4,41,2],[49,5,41,3],[49,6,41,4],[49,7,41,5,"filter"],[49,13,41,11],[49,14,41,12,"Boolean"],[49,21,41,19],[49,22,41,20],[49,23,41,21],[50,4,42,2],[50,8,42,6,"Object"],[50,14,42,12],[50,15,42,13,"keys"],[50,19,42,17],[50,20,42,18,"validationErrors"],[50,36,42,34],[50,37,42,35],[50,38,42,36,"length"],[50,44,42,42],[50,46,42,44],[51,6,43,4],[51,12,43,10],[51,16,43,14,"Error"],[51,21,43,19],[51,22,43,20],[51,73,43,71,"formatToList"],[51,85,43,83],[51,86,43,84,"validationErrors"],[51,102,43,100],[51,103,43,101],[51,158,43,156,"formatToList"],[51,170,43,168],[51,171,43,169,"validation"],[51,181,43,179],[51,182,43,180],[51,408,43,406],[51,409,43,407],[52,4,44,2],[53,4,45,2],[53,8,45,6,"root"],[53,12,45,10],[53,16,45,14],[53,22,45,20],[53,26,45,24,"config"],[53,32,45,30],[53,36,45,34],[53,43,45,41,"config"],[53,49,45,47],[53,50,45,48,"path"],[53,54,45,52],[53,59,45,57],[53,67,45,65],[53,71,45,69,"config"],[53,77,45,75],[53,78,45,76,"path"],[53,82,45,80],[53,83,45,81,"includes"],[53,91,45,89],[53,92,45,90],[53,95,45,93],[53,96,45,94],[53,98,45,96],[54,6,46,4],[54,12,46,10],[54,16,46,14,"Error"],[54,21,46,19],[54,22,46,20],[54,45,46,43,"config"],[54,51,46,49],[54,52,46,50,"path"],[54,56,46,54],[54,138,46,136],[54,139,46,137],[55,4,47,2],[56,4,48,2],[56,8,48,6],[56,17,48,15],[56,21,48,19,"config"],[56,27,48,25],[56,31,48,29,"config"],[56,37,48,35],[56,38,48,36,"screens"],[56,45,48,43],[56,47,48,45],[57,6,49,4,"Object"],[57,12,49,10],[57,13,49,11,"entries"],[57,20,49,18],[57,21,49,19,"config"],[57,27,49,25],[57,28,49,26,"screens"],[57,35,49,33],[57,36,49,34],[57,37,49,35,"forEach"],[57,44,49,42],[57,45,49,43,"_ref3"],[57,50,49,43],[57,54,49,59],[58,8,49,59],[58,12,49,59,"_ref4"],[58,17,49,59],[58,20,49,59,"_slicedToArray"],[58,34,49,59],[58,35,49,59,"_ref3"],[58,40,49,59],[59,10,49,45,"_"],[59,11,49,46],[59,14,49,46,"_ref4"],[59,19,49,46],[60,10,49,48,"value"],[60,15,49,53],[60,18,49,53,"_ref4"],[60,23,49,53],[61,8,50,6],[61,12,50,10],[61,19,50,17,"value"],[61,24,50,22],[61,29,50,27],[61,37,50,35],[61,39,50,37],[62,10,51,8,"validatePathConfig"],[62,28,51,26],[62,29,51,27,"value"],[62,34,51,32],[62,36,51,34],[62,41,51,39],[62,42,51,40],[63,8,52,6],[64,6,53,4],[64,7,53,5],[64,8,53,6],[65,4,54,2],[66,2,55,0],[67,0,55,1],[67,3]],"functionMap":{"names":["<global>","formatToList","Object.entries.map$argument_0","validatePathConfig","Object.keys.map$argument_0","Object.entries.forEach$argument_0"],"mappings":"AAA;qBCM,mCC,uCD,YD;AGC;sECe;GDkB;2CEQ;KFI;CHE"}},"type":"js/module"}]}