{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":76,"column":0,"index":2370}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":32},"end":{"line":2,"column":76,"index":108}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g="}},{"name":"../RNGestureHandlerModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":198},"end":{"line":5,"column":63,"index":261}}],"key":"bY7FGgfi8WGOEKHKyXsenNEOYXM="}},{"name":"../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":162},"end":{"line":4,"column":35,"index":197}}],"key":"mL7nJyZhzUYx+zMcIt1cBzVuRps="}},{"name":"./handlersRegistry","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":109},"end":{"line":3,"column":52,"index":161}}],"key":"icHMSVIKxbHLSdF6K64ideInyBg="}},{"name":"../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":262},"end":{"line":6,"column":55,"index":317}}],"key":"Ty3ERJQ4RajY8XDWg1+a8wq7RdE="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.filterConfig = filterConfig;\n  exports.findNodeHandle = findNodeHandle;\n  exports.scheduleFlushOperations = scheduleFlushOperations;\n  var _reactNative = require(_dependencyMap[1], \"react-native\");\n  var _RNGestureHandlerModule = _interopRequireDefault(require(_dependencyMap[2], \"../RNGestureHandlerModule\"));\n  function isConfigParam(param, name) {\n    // param !== Object(param) returns false if `param` is a function\n    // or an object and returns true if `param` is null\n    return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n  }\n  function filterConfig(props, validProps) {\n    var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var filteredConfig = {\n      ...defaults\n    };\n    for (var key of validProps) {\n      var value = props[key];\n      if (isConfigParam(value, key)) {\n        if (key === 'simultaneousHandlers' || key === 'waitFor') {\n          value = transformIntoHandlerTags(props[key]);\n        } else if (key === 'hitSlop' && typeof value !== 'object') {\n          value = {\n            top: value,\n            left: value,\n            bottom: value,\n            right: value\n          };\n        }\n        filteredConfig[key] = value;\n      }\n    }\n    return filteredConfig;\n  }\n  function transformIntoHandlerTags(handlerIDs) {\n    handlerIDs = (0, require(_dependencyMap[3], \"../utils\").toArray)(handlerIDs);\n    if (_reactNative.Platform.OS === 'web') {\n      return handlerIDs.map(_ref => {\n        var current = _ref.current;\n        return current;\n      }).filter(handle => handle);\n    }\n    // converts handler string IDs into their numeric tags\n    return handlerIDs.map(handlerID => require(_dependencyMap[4], \"./handlersRegistry\").handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1).filter(handlerTag => handlerTag > 0);\n  }\n  function findNodeHandle(node) {\n    if (_reactNative.Platform.OS === 'web') {\n      return node;\n    }\n    return (0, _reactNative.findNodeHandle)(node);\n  }\n  var flushOperationsScheduled = false;\n  function scheduleFlushOperations() {\n    if (!flushOperationsScheduled) {\n      flushOperationsScheduled = true;\n      (0, require(_dependencyMap[5], \"../ghQueueMicrotask\").ghQueueMicrotask)(() => {\n        _RNGestureHandlerModule.default.flushOperations();\n        flushOperationsScheduled = false;\n      });\n    }\n  }\n});","lineCount":66,"map":[[9,2,2,0],[9,6,2,0,"_reactNative"],[9,18,2,0],[9,21,2,0,"require"],[9,28,2,0],[9,29,2,0,"_dependencyMap"],[9,43,2,0],[10,2,5,0],[10,6,5,0,"_RNGestureHandlerModule"],[10,29,5,0],[10,32,5,0,"_interopRequireDefault"],[10,54,5,0],[10,55,5,0,"require"],[10,62,5,0],[10,63,5,0,"_dependencyMap"],[10,77,5,0],[11,2,8,0],[11,11,8,9,"isConfigParam"],[11,24,8,22,"isConfigParam"],[11,25,8,23,"param"],[11,30,8,37],[11,32,8,39,"name"],[11,36,8,51],[11,38,8,53],[12,4,9,2],[13,4,10,2],[14,4,11,2],[14,11,12,4,"param"],[14,16,12,9],[14,21,12,14,"undefined"],[14,30,12,23],[14,35,13,5,"param"],[14,40,13,10],[14,45,13,15,"Object"],[14,51,13,21],[14,52,13,22,"param"],[14,57,13,27],[14,58,13,28],[14,62,14,6],[14,64,14,8],[14,76,14,20],[14,80,14,25,"param"],[14,85,14,58],[14,86,14,59],[14,87,14,60],[14,91,15,4,"name"],[14,95,15,8],[14,100,15,13],[14,122,15,35],[14,126,16,4,"name"],[14,130,16,8],[14,135,16,13],[14,151,16,29],[15,2,18,0],[16,2,20,7],[16,11,20,16,"filterConfig"],[16,23,20,28,"filterConfig"],[16,24,21,2,"props"],[16,29,21,32],[16,31,22,2,"validProps"],[16,41,22,22],[16,43,24,2],[17,4,24,2],[17,8,23,2,"defaults"],[17,16,23,35],[17,19,23,35,"arguments"],[17,28,23,35],[17,29,23,35,"length"],[17,35,23,35],[17,43,23,35,"arguments"],[17,52,23,35],[17,60,23,35,"undefined"],[17,69,23,35],[17,72,23,35,"arguments"],[17,81,23,35],[17,87,23,38],[17,88,23,39],[17,89,23,40],[18,4,25,2],[18,8,25,8,"filteredConfig"],[18,22,25,22],[18,25,25,25],[19,6,25,27],[19,9,25,30,"defaults"],[20,4,25,39],[20,5,25,40],[21,4,26,2],[21,9,26,7],[21,13,26,13,"key"],[21,16,26,16],[21,20,26,20,"validProps"],[21,30,26,30],[21,32,26,32],[22,6,27,4],[22,10,27,8,"value"],[22,15,27,13],[22,18,27,16,"props"],[22,23,27,21],[22,24,27,22,"key"],[22,27,27,25],[22,28,27,26],[23,6,28,4],[23,10,28,8,"isConfigParam"],[23,23,28,21],[23,24,28,22,"value"],[23,29,28,27],[23,31,28,29,"key"],[23,34,28,32],[23,35,28,33],[23,37,28,35],[24,8,29,6],[24,12,29,10,"key"],[24,15,29,13],[24,20,29,18],[24,42,29,40],[24,46,29,44,"key"],[24,49,29,47],[24,54,29,52],[24,63,29,61],[24,65,29,63],[25,10,30,8,"value"],[25,15,30,13],[25,18,30,16,"transformIntoHandlerTags"],[25,42,30,40],[25,43,30,41,"props"],[25,48,30,46],[25,49,30,47,"key"],[25,52,30,50],[25,53,30,51],[25,54,30,52],[26,8,31,6],[26,9,31,7],[26,15,31,13],[26,19,31,17,"key"],[26,22,31,20],[26,27,31,25],[26,36,31,34],[26,40,31,38],[26,47,31,45,"value"],[26,52,31,50],[26,57,31,55],[26,65,31,63],[26,67,31,65],[27,10,32,8,"value"],[27,15,32,13],[27,18,32,16],[28,12,32,18,"top"],[28,15,32,21],[28,17,32,23,"value"],[28,22,32,28],[29,12,32,30,"left"],[29,16,32,34],[29,18,32,36,"value"],[29,23,32,41],[30,12,32,43,"bottom"],[30,18,32,49],[30,20,32,51,"value"],[30,25,32,56],[31,12,32,58,"right"],[31,17,32,63],[31,19,32,65,"value"],[32,10,32,71],[32,11,32,72],[33,8,33,6],[34,8,34,6,"filteredConfig"],[34,22,34,20],[34,23,34,21,"key"],[34,26,34,24],[34,27,34,25],[34,30,34,28,"value"],[34,35,34,33],[35,6,35,4],[36,4,36,2],[37,4,37,2],[37,11,37,9,"filteredConfig"],[37,25,37,23],[38,2,38,0],[39,2,39,0],[39,11,39,9,"transformIntoHandlerTags"],[39,35,39,33,"transformIntoHandlerTags"],[39,36,39,34,"handlerIDs"],[39,46,39,49],[39,48,39,51],[40,4,40,2,"handlerIDs"],[40,14,40,12],[40,17,40,15],[40,21,40,15,"toArray"],[40,47,40,15],[40,48,40,15,"toArray"],[40,67,40,22],[40,69,40,23,"handlerIDs"],[40,79,40,33],[40,80,40,34],[41,4,42,2],[41,8,42,6,"Platform"],[41,29,42,14],[41,30,42,15,"OS"],[41,32,42,17],[41,37,42,22],[41,42,42,27],[41,44,42,29],[42,6,43,4],[42,13,43,11,"handlerIDs"],[42,23,43,21],[42,24,44,7,"map"],[42,27,44,10],[42,28,44,11,"_ref"],[42,32,44,11],[43,8,44,11],[43,12,44,14,"current"],[43,19,44,21],[43,22,44,21,"_ref"],[43,26,44,21],[43,27,44,14,"current"],[43,34,44,21],[44,8,44,21],[44,15,44,46,"current"],[44,22,44,53],[45,6,44,53],[45,8,44,54],[45,9,45,7,"filter"],[45,15,45,13],[45,16,45,15,"handle"],[45,22,45,26],[45,26,45,31,"handle"],[45,32,45,37],[45,33,45,38],[46,4,46,2],[47,4,47,2],[48,4,48,2],[48,11,48,9,"handlerIDs"],[48,21,48,19],[48,22,49,5,"map"],[48,25,49,8],[48,26,50,7,"handlerID"],[48,35,50,21],[48,39,51,8,"handlerIDToTag"],[48,65,51,8],[48,66,51,8,"handlerIDToTag"],[48,102,51,22],[48,103,51,23,"handlerID"],[48,112,51,32],[48,113,51,33],[48,117,51,37,"handlerID"],[48,126,51,46],[48,127,51,47,"current"],[48,134,51,54],[48,136,51,56,"handlerTag"],[48,146,51,66],[48,150,51,70],[48,151,51,71],[48,152,52,4],[48,153,52,5],[48,154,53,5,"filter"],[48,160,53,11],[48,161,53,13,"handlerTag"],[48,171,53,31],[48,175,53,36,"handlerTag"],[48,185,53,46],[48,188,53,49],[48,189,53,50],[48,190,53,51],[49,2,54,0],[50,2,56,7],[50,11,56,16,"findNodeHandle"],[50,25,56,30,"findNodeHandle"],[50,26,57,2,"node"],[50,30,57,77],[50,32,58,73],[51,4,59,2],[51,8,59,6,"Platform"],[51,29,59,14],[51,30,59,15,"OS"],[51,32,59,17],[51,37,59,22],[51,42,59,27],[51,44,59,29],[52,6,60,4],[52,13,60,11,"node"],[52,17,60,15],[53,4,61,2],[54,4,62,2],[54,11,62,9],[54,15,62,9,"findNodeHandleRN"],[54,42,62,25],[54,44,62,26,"node"],[54,48,62,30],[54,49,62,31],[55,2,63,0],[56,2,64,0],[56,6,64,4,"flushOperationsScheduled"],[56,30,64,28],[56,33,64,31],[56,38,64,36],[57,2,66,7],[57,11,66,16,"scheduleFlushOperations"],[57,34,66,39,"scheduleFlushOperations"],[57,35,66,39],[57,37,66,42],[58,4,67,2],[58,8,67,6],[58,9,67,7,"flushOperationsScheduled"],[58,33,67,31],[58,35,67,33],[59,6,68,4,"flushOperationsScheduled"],[59,30,68,28],[59,33,68,31],[59,37,68,35],[60,6,69,4],[60,10,69,4,"ghQueueMicrotask"],[60,36,69,4],[60,37,69,4,"ghQueueMicrotask"],[60,76,69,20],[60,78,69,21],[60,84,69,27],[61,8,70,6,"RNGestureHandlerModule"],[61,39,70,28],[61,40,70,29,"flushOperations"],[61,55,70,44],[61,56,70,45],[61,57,70,46],[62,8,72,6,"flushOperationsScheduled"],[62,32,72,30],[62,35,72,33],[62,40,72,38],[63,6,73,4],[63,7,73,5],[63,8,73,6],[64,4,74,2],[65,2,75,0],[66,0,75,1],[66,3]],"functionMap":{"names":["<global>","isConfigParam","filterConfig","transformIntoHandlerTags","handlerIDs.map$argument_0","handlerIDs.map.filter$argument_0","findNodeHandle","scheduleFlushOperations","ghQueueMicrotask$argument_0"],"mappings":"AAA;ACO;CDU;OEE;CFkB;AGC;WCK,0CD;cEC,uBF;MCK;wEDC;YEE,sCF;CHC;OME;CNO;OOG;qBCG;KDI;CPE"}},"type":"js/module"}]}