{"dependencies":[{"name":"./matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":19,"index":157},"end":{"line":4,"column":40,"index":178}},{"start":{"line":4,"column":19,"index":157},"end":{"line":4,"column":40,"index":178}}],"key":"89ylKT57ef0l7ma8+p1HhPaMj94="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.sortRoutesWithInitial = exports.sortRoutes = void 0;\n  function sortDynamicConvention(a, b) {\n    if (a.deep && !b.deep) {\n      return 1;\n    }\n    if (!a.deep && b.deep) {\n      return -1;\n    }\n    return 0;\n  }\n  function sortRoutes(a, b) {\n    if (a.dynamic && !b.dynamic) {\n      return 1;\n    }\n    if (!a.dynamic && b.dynamic) {\n      return -1;\n    }\n    if (a.dynamic && b.dynamic) {\n      if (a.dynamic.length !== b.dynamic.length) {\n        return b.dynamic.length - a.dynamic.length;\n      }\n      for (var i = 0; i < a.dynamic.length; i++) {\n        var aDynamic = a.dynamic[i];\n        var bDynamic = b.dynamic[i];\n        if (aDynamic.notFound && bDynamic.notFound) {\n          var _s = sortDynamicConvention(aDynamic, bDynamic);\n          if (_s) {\n            return _s;\n          }\n        }\n        if (aDynamic.notFound && !bDynamic.notFound) {\n          return 1;\n        }\n        if (!aDynamic.notFound && bDynamic.notFound) {\n          return -1;\n        }\n        var s = sortDynamicConvention(aDynamic, bDynamic);\n        if (s) {\n          return s;\n        }\n      }\n      return 0;\n    }\n    var aIndex = a.route === 'index' || (0, require(_dependencyMap[0], \"./matchers\").matchGroupName)(a.route) != null;\n    var bIndex = b.route === 'index' || (0, require(_dependencyMap[0], \"./matchers\").matchGroupName)(b.route) != null;\n    if (aIndex && !bIndex) {\n      return -1;\n    }\n    if (!aIndex && bIndex) {\n      return 1;\n    }\n    return a.route.length - b.route.length;\n  }\n  exports.sortRoutes = sortRoutes;\n  function sortRoutesWithInitial(initialRouteName) {\n    return (a, b) => {\n      if (initialRouteName) {\n        if (a.route === initialRouteName) {\n          return -1;\n        }\n        if (b.route === initialRouteName) {\n          return 1;\n        }\n      }\n      return sortRoutes(a, b);\n    };\n  }\n  exports.sortRoutesWithInitial = sortRoutesWithInitial;\n});","lineCount":75,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"sortRoutesWithInitial"],[7,31,3,29],[7,34,3,32,"exports"],[7,41,3,39],[7,42,3,40,"sortRoutes"],[7,52,3,50],[7,55,3,53],[7,60,3,58],[7,61,3,59],[8,2,5,0],[8,11,5,9,"sortDynamicConvention"],[8,32,5,30,"sortDynamicConvention"],[8,33,5,31,"a"],[8,34,5,32],[8,36,5,34,"b"],[8,37,5,35],[8,39,5,37],[9,4,6,4],[9,8,6,8,"a"],[9,9,6,9],[9,10,6,10,"deep"],[9,14,6,14],[9,18,6,18],[9,19,6,19,"b"],[9,20,6,20],[9,21,6,21,"deep"],[9,25,6,25],[9,27,6,27],[10,6,7,8],[10,13,7,15],[10,14,7,16],[11,4,8,4],[12,4,9,4],[12,8,9,8],[12,9,9,9,"a"],[12,10,9,10],[12,11,9,11,"deep"],[12,15,9,15],[12,19,9,19,"b"],[12,20,9,20],[12,21,9,21,"deep"],[12,25,9,25],[12,27,9,27],[13,6,10,8],[13,13,10,15],[13,14,10,16],[13,15,10,17],[14,4,11,4],[15,4,12,4],[15,11,12,11],[15,12,12,12],[16,2,13,0],[17,2,14,0],[17,11,14,9,"sortRoutes"],[17,21,14,19,"sortRoutes"],[17,22,14,20,"a"],[17,23,14,21],[17,25,14,23,"b"],[17,26,14,24],[17,28,14,26],[18,4,15,4],[18,8,15,8,"a"],[18,9,15,9],[18,10,15,10,"dynamic"],[18,17,15,17],[18,21,15,21],[18,22,15,22,"b"],[18,23,15,23],[18,24,15,24,"dynamic"],[18,31,15,31],[18,33,15,33],[19,6,16,8],[19,13,16,15],[19,14,16,16],[20,4,17,4],[21,4,18,4],[21,8,18,8],[21,9,18,9,"a"],[21,10,18,10],[21,11,18,11,"dynamic"],[21,18,18,18],[21,22,18,22,"b"],[21,23,18,23],[21,24,18,24,"dynamic"],[21,31,18,31],[21,33,18,33],[22,6,19,8],[22,13,19,15],[22,14,19,16],[22,15,19,17],[23,4,20,4],[24,4,21,4],[24,8,21,8,"a"],[24,9,21,9],[24,10,21,10,"dynamic"],[24,17,21,17],[24,21,21,21,"b"],[24,22,21,22],[24,23,21,23,"dynamic"],[24,30,21,30],[24,32,21,32],[25,6,22,8],[25,10,22,12,"a"],[25,11,22,13],[25,12,22,14,"dynamic"],[25,19,22,21],[25,20,22,22,"length"],[25,26,22,28],[25,31,22,33,"b"],[25,32,22,34],[25,33,22,35,"dynamic"],[25,40,22,42],[25,41,22,43,"length"],[25,47,22,49],[25,49,22,51],[26,8,23,12],[26,15,23,19,"b"],[26,16,23,20],[26,17,23,21,"dynamic"],[26,24,23,28],[26,25,23,29,"length"],[26,31,23,35],[26,34,23,38,"a"],[26,35,23,39],[26,36,23,40,"dynamic"],[26,43,23,47],[26,44,23,48,"length"],[26,50,23,54],[27,6,24,8],[28,6,25,8],[28,11,25,13],[28,15,25,17,"i"],[28,16,25,18],[28,19,25,21],[28,20,25,22],[28,22,25,24,"i"],[28,23,25,25],[28,26,25,28,"a"],[28,27,25,29],[28,28,25,30,"dynamic"],[28,35,25,37],[28,36,25,38,"length"],[28,42,25,44],[28,44,25,46,"i"],[28,45,25,47],[28,47,25,49],[28,49,25,51],[29,8,26,12],[29,12,26,18,"aDynamic"],[29,20,26,26],[29,23,26,29,"a"],[29,24,26,30],[29,25,26,31,"dynamic"],[29,32,26,38],[29,33,26,39,"i"],[29,34,26,40],[29,35,26,41],[30,8,27,12],[30,12,27,18,"bDynamic"],[30,20,27,26],[30,23,27,29,"b"],[30,24,27,30],[30,25,27,31,"dynamic"],[30,32,27,38],[30,33,27,39,"i"],[30,34,27,40],[30,35,27,41],[31,8,28,12],[31,12,28,16,"aDynamic"],[31,20,28,24],[31,21,28,25,"notFound"],[31,29,28,33],[31,33,28,37,"bDynamic"],[31,41,28,45],[31,42,28,46,"notFound"],[31,50,28,54],[31,52,28,56],[32,10,29,16],[32,14,29,22,"s"],[32,16,29,23],[32,19,29,26,"sortDynamicConvention"],[32,40,29,47],[32,41,29,48,"aDynamic"],[32,49,29,56],[32,51,29,58,"bDynamic"],[32,59,29,66],[32,60,29,67],[33,10,30,16],[33,14,30,20,"s"],[33,16,30,21],[33,18,30,23],[34,12,31,20],[34,19,31,27,"s"],[34,21,31,28],[35,10,32,16],[36,8,33,12],[37,8,34,12],[37,12,34,16,"aDynamic"],[37,20,34,24],[37,21,34,25,"notFound"],[37,29,34,33],[37,33,34,37],[37,34,34,38,"bDynamic"],[37,42,34,46],[37,43,34,47,"notFound"],[37,51,34,55],[37,53,34,57],[38,10,35,16],[38,17,35,23],[38,18,35,24],[39,8,36,12],[40,8,37,12],[40,12,37,16],[40,13,37,17,"aDynamic"],[40,21,37,25],[40,22,37,26,"notFound"],[40,30,37,34],[40,34,37,38,"bDynamic"],[40,42,37,46],[40,43,37,47,"notFound"],[40,51,37,55],[40,53,37,57],[41,10,38,16],[41,17,38,23],[41,18,38,24],[41,19,38,25],[42,8,39,12],[43,8,40,12],[43,12,40,18,"s"],[43,13,40,19],[43,16,40,22,"sortDynamicConvention"],[43,37,40,43],[43,38,40,44,"aDynamic"],[43,46,40,52],[43,48,40,54,"bDynamic"],[43,56,40,62],[43,57,40,63],[44,8,41,12],[44,12,41,16,"s"],[44,13,41,17],[44,15,41,19],[45,10,42,16],[45,17,42,23,"s"],[45,18,42,24],[46,8,43,12],[47,6,44,8],[48,6,45,8],[48,13,45,15],[48,14,45,16],[49,4,46,4],[50,4,47,4],[50,8,47,10,"aIndex"],[50,14,47,16],[50,17,47,19,"a"],[50,18,47,20],[50,19,47,21,"route"],[50,24,47,26],[50,29,47,31],[50,36,47,38],[50,40,47,42],[50,41,47,43],[50,42,47,44],[50,44,47,46,"require"],[50,51,47,46],[50,52,47,46,"_dependencyMap"],[50,66,47,46],[50,85,47,57,"matchGroupName"],[50,99,47,71],[50,101,47,73,"a"],[50,102,47,74],[50,103,47,75,"route"],[50,108,47,80],[50,109,47,81],[50,113,47,85],[50,117,47,89],[51,4,48,4],[51,8,48,10,"bIndex"],[51,14,48,16],[51,17,48,19,"b"],[51,18,48,20],[51,19,48,21,"route"],[51,24,48,26],[51,29,48,31],[51,36,48,38],[51,40,48,42],[51,41,48,43],[51,42,48,44],[51,44,48,46,"require"],[51,51,48,46],[51,52,48,46,"_dependencyMap"],[51,66,48,46],[51,85,48,57,"matchGroupName"],[51,99,48,71],[51,101,48,73,"b"],[51,102,48,74],[51,103,48,75,"route"],[51,108,48,80],[51,109,48,81],[51,113,48,85],[51,117,48,89],[52,4,49,4],[52,8,49,8,"aIndex"],[52,14,49,14],[52,18,49,18],[52,19,49,19,"bIndex"],[52,25,49,25],[52,27,49,27],[53,6,50,8],[53,13,50,15],[53,14,50,16],[53,15,50,17],[54,4,51,4],[55,4,52,4],[55,8,52,8],[55,9,52,9,"aIndex"],[55,15,52,15],[55,19,52,19,"bIndex"],[55,25,52,25],[55,27,52,27],[56,6,53,8],[56,13,53,15],[56,14,53,16],[57,4,54,4],[58,4,55,4],[58,11,55,11,"a"],[58,12,55,12],[58,13,55,13,"route"],[58,18,55,18],[58,19,55,19,"length"],[58,25,55,25],[58,28,55,28,"b"],[58,29,55,29],[58,30,55,30,"route"],[58,35,55,35],[58,36,55,36,"length"],[58,42,55,42],[59,2,56,0],[60,2,57,0,"exports"],[60,9,57,7],[60,10,57,8,"sortRoutes"],[60,20,57,18],[60,23,57,21,"sortRoutes"],[60,33,57,31],[61,2,58,0],[61,11,58,9,"sortRoutesWithInitial"],[61,32,58,30,"sortRoutesWithInitial"],[61,33,58,31,"initialRouteName"],[61,49,58,47],[61,51,58,49],[62,4,59,4],[62,11,59,11],[62,12,59,12,"a"],[62,13,59,13],[62,15,59,15,"b"],[62,16,59,16],[62,21,59,21],[63,6,60,8],[63,10,60,12,"initialRouteName"],[63,26,60,28],[63,28,60,30],[64,8,61,12],[64,12,61,16,"a"],[64,13,61,17],[64,14,61,18,"route"],[64,19,61,23],[64,24,61,28,"initialRouteName"],[64,40,61,44],[64,42,61,46],[65,10,62,16],[65,17,62,23],[65,18,62,24],[65,19,62,25],[66,8,63,12],[67,8,64,12],[67,12,64,16,"b"],[67,13,64,17],[67,14,64,18,"route"],[67,19,64,23],[67,24,64,28,"initialRouteName"],[67,40,64,44],[67,42,64,46],[68,10,65,16],[68,17,65,23],[68,18,65,24],[69,8,66,12],[70,6,67,8],[71,6,68,8],[71,13,68,15,"sortRoutes"],[71,23,68,25],[71,24,68,26,"a"],[71,25,68,27],[71,27,68,29,"b"],[71,28,68,30],[71,29,68,31],[72,4,69,4],[72,5,69,5],[73,2,70,0],[74,2,71,0,"exports"],[74,9,71,7],[74,10,71,8,"sortRoutesWithInitial"],[74,31,71,29],[74,34,71,32,"sortRoutesWithInitial"],[74,55,71,53],[75,0,71,54],[75,3]],"functionMap":{"names":["<global>","sortDynamicConvention","sortRoutes","sortRoutesWithInitial","<anonymous>"],"mappings":"AAA;ACI;CDQ;AEC;CF0C;AGE;WCC;KDU;CHC"}},"type":"js/module"}]}