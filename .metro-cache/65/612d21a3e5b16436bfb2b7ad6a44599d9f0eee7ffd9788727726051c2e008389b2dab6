{"dependencies":[{"name":"./matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":19,"index":181},"end":{"line":4,"column":40,"index":202}},{"start":{"line":4,"column":19,"index":181},"end":{"line":4,"column":40,"index":202}}],"key":"89ylKT57ef0l7ma8+p1HhPaMj94="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getReactNavigationConfig = exports.getReactNavigationScreensConfig = void 0;\n  // `[page]` -> `:page`\n  // `page` -> `page`\n  function convertDynamicRouteToReactNavigation(segment) {\n    // NOTE(EvanBacon): To support shared routes we preserve group segments.\n    if (segment === 'index') {\n      return '';\n    }\n    if (segment === '+not-found') {\n      return '*not-found';\n    }\n    var rest = (0, require(_dependencyMap[0], \"./matchers\").matchDeepDynamicRouteName)(segment);\n    if (rest != null) {\n      return '*' + rest;\n    }\n    var dynamicName = (0, require(_dependencyMap[0], \"./matchers\").matchDynamicName)(segment);\n    if (dynamicName != null) {\n      return `:${dynamicName}`;\n    }\n    return segment;\n  }\n  function parseRouteSegments(segments) {\n    return (\n      // NOTE(EvanBacon): When there are nested routes without layouts\n      // the node.route will be something like `app/home/index`\n      // this needs to be split to ensure each segment is parsed correctly.\n      segments.split('/')\n      // Convert each segment to a React Navigation format.\n      .map(convertDynamicRouteToReactNavigation)\n      // Remove any empty paths from groups or index routes.\n      .filter(Boolean)\n      // Join to return as a path.\n      .join('/')\n    );\n  }\n  function convertRouteNodeToScreen(node, metaOnly) {\n    var path = parseRouteSegments(node.route);\n    if (!node.children.length) {\n      if (!metaOnly) {\n        return {\n          path,\n          screens: {},\n          _route: node\n        };\n      }\n      return path;\n    }\n    var screens = getReactNavigationScreensConfig(node.children, metaOnly);\n    var screen = {\n      path,\n      screens\n    };\n    if (node.initialRouteName) {\n      // NOTE(EvanBacon): This is bad because it forces all Layout Routes\n      // to be loaded into memory. We should move towards a system where\n      // the initial route name is either loaded asynchronously in the Layout Route\n      // or defined via a file system convention.\n      screen.initialRouteName = node.initialRouteName;\n    }\n    if (!metaOnly) {\n      screen._route = node;\n    }\n    return screen;\n  }\n  function getReactNavigationScreensConfig(nodes, metaOnly) {\n    return Object.fromEntries(nodes.map(node => [node.route, convertRouteNodeToScreen(node, metaOnly)]));\n  }\n  exports.getReactNavigationScreensConfig = getReactNavigationScreensConfig;\n  function getReactNavigationConfig(routes, metaOnly) {\n    var config = {\n      initialRouteName: undefined,\n      screens: getReactNavigationScreensConfig(routes.children, metaOnly)\n    };\n    if (routes.initialRouteName) {\n      // We're using LinkingOptions the generic type is `object` instead of a proper ParamList.\n      // So we need to cast the initialRouteName to `any` to avoid type errors.\n      config.initialRouteName = routes.initialRouteName;\n    }\n    return config;\n  }\n  exports.getReactNavigationConfig = getReactNavigationConfig;\n});","lineCount":88,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getReactNavigationConfig"],[7,34,3,32],[7,37,3,35,"exports"],[7,44,3,42],[7,45,3,43,"getReactNavigationScreensConfig"],[7,76,3,74],[7,79,3,77],[7,84,3,82],[7,85,3,83],[8,2,5,0],[9,2,6,0],[10,2,7,0],[10,11,7,9,"convertDynamicRouteToReactNavigation"],[10,47,7,45,"convertDynamicRouteToReactNavigation"],[10,48,7,46,"segment"],[10,55,7,53],[10,57,7,55],[11,4,8,4],[12,4,9,4],[12,8,9,8,"segment"],[12,15,9,15],[12,20,9,20],[12,27,9,27],[12,29,9,29],[13,6,10,8],[13,13,10,15],[13,15,10,17],[14,4,11,4],[15,4,12,4],[15,8,12,8,"segment"],[15,15,12,15],[15,20,12,20],[15,32,12,32],[15,34,12,34],[16,6,13,8],[16,13,13,15],[16,25,13,27],[17,4,14,4],[18,4,15,4],[18,8,15,10,"rest"],[18,12,15,14],[18,15,15,17],[18,16,15,18],[18,17,15,19],[18,19,15,21,"require"],[18,26,15,21],[18,27,15,21,"_dependencyMap"],[18,41,15,21],[18,60,15,32,"matchDeepDynamicRouteName"],[18,85,15,57],[18,87,15,59,"segment"],[18,94,15,66],[18,95,15,67],[19,4,16,4],[19,8,16,8,"rest"],[19,12,16,12],[19,16,16,16],[19,20,16,20],[19,22,16,22],[20,6,17,8],[20,13,17,15],[20,16,17,18],[20,19,17,21,"rest"],[20,23,17,25],[21,4,18,4],[22,4,19,4],[22,8,19,10,"dynamicName"],[22,19,19,21],[22,22,19,24],[22,23,19,25],[22,24,19,26],[22,26,19,28,"require"],[22,33,19,28],[22,34,19,28,"_dependencyMap"],[22,48,19,28],[22,67,19,39,"matchDynamicName"],[22,83,19,55],[22,85,19,57,"segment"],[22,92,19,64],[22,93,19,65],[23,4,20,4],[23,8,20,8,"dynamicName"],[23,19,20,19],[23,23,20,23],[23,27,20,27],[23,29,20,29],[24,6,21,8],[24,13,21,15],[24,17,21,19,"dynamicName"],[24,28,21,30],[24,30,21,32],[25,4,22,4],[26,4,23,4],[26,11,23,11,"segment"],[26,18,23,18],[27,2,24,0],[28,2,25,0],[28,11,25,9,"parseRouteSegments"],[28,29,25,27,"parseRouteSegments"],[28,30,25,28,"segments"],[28,38,25,36],[28,40,25,38],[29,4,26,4],[30,6,27,4],[31,6,28,4],[32,6,29,4],[33,6,30,4,"segments"],[33,14,30,12],[33,15,31,9,"split"],[33,20,31,14],[33,21,31,15],[33,24,31,18],[34,6,32,8],[35,6,32,8],[35,7,33,9,"map"],[35,10,33,12],[35,11,33,13,"convertDynamicRouteToReactNavigation"],[35,47,33,49],[36,6,34,8],[37,6,34,8],[37,7,35,9,"filter"],[37,13,35,15],[37,14,35,16,"Boolean"],[37,21,35,23],[38,6,36,8],[39,6,36,8],[39,7,37,9,"join"],[39,11,37,13],[39,12,37,14],[39,15,37,17],[40,4,37,18],[41,2,38,0],[42,2,39,0],[42,11,39,9,"convertRouteNodeToScreen"],[42,35,39,33,"convertRouteNodeToScreen"],[42,36,39,34,"node"],[42,40,39,38],[42,42,39,40,"metaOnly"],[42,50,39,48],[42,52,39,50],[43,4,40,4],[43,8,40,10,"path"],[43,12,40,14],[43,15,40,17,"parseRouteSegments"],[43,33,40,35],[43,34,40,36,"node"],[43,38,40,40],[43,39,40,41,"route"],[43,44,40,46],[43,45,40,47],[44,4,41,4],[44,8,41,8],[44,9,41,9,"node"],[44,13,41,13],[44,14,41,14,"children"],[44,22,41,22],[44,23,41,23,"length"],[44,29,41,29],[44,31,41,31],[45,6,42,8],[45,10,42,12],[45,11,42,13,"metaOnly"],[45,19,42,21],[45,21,42,23],[46,8,43,12],[46,15,43,19],[47,10,44,16,"path"],[47,14,44,20],[48,10,45,16,"screens"],[48,17,45,23],[48,19,45,25],[48,20,45,26],[48,21,45,27],[49,10,46,16,"_route"],[49,16,46,22],[49,18,46,24,"node"],[50,8,47,12],[50,9,47,13],[51,6,48,8],[52,6,49,8],[52,13,49,15,"path"],[52,17,49,19],[53,4,50,4],[54,4,51,4],[54,8,51,10,"screens"],[54,15,51,17],[54,18,51,20,"getReactNavigationScreensConfig"],[54,49,51,51],[54,50,51,52,"node"],[54,54,51,56],[54,55,51,57,"children"],[54,63,51,65],[54,65,51,67,"metaOnly"],[54,73,51,75],[54,74,51,76],[55,4,52,4],[55,8,52,10,"screen"],[55,14,52,16],[55,17,52,19],[56,6,53,8,"path"],[56,10,53,12],[57,6,54,8,"screens"],[58,4,55,4],[58,5,55,5],[59,4,56,4],[59,8,56,8,"node"],[59,12,56,12],[59,13,56,13,"initialRouteName"],[59,29,56,29],[59,31,56,31],[60,6,57,8],[61,6,58,8],[62,6,59,8],[63,6,60,8],[64,6,61,8,"screen"],[64,12,61,14],[64,13,61,15,"initialRouteName"],[64,29,61,31],[64,32,61,34,"node"],[64,36,61,38],[64,37,61,39,"initialRouteName"],[64,53,61,55],[65,4,62,4],[66,4,63,4],[66,8,63,8],[66,9,63,9,"metaOnly"],[66,17,63,17],[66,19,63,19],[67,6,64,8,"screen"],[67,12,64,14],[67,13,64,15,"_route"],[67,19,64,21],[67,22,64,24,"node"],[67,26,64,28],[68,4,65,4],[69,4,66,4],[69,11,66,11,"screen"],[69,17,66,17],[70,2,67,0],[71,2,68,0],[71,11,68,9,"getReactNavigationScreensConfig"],[71,42,68,40,"getReactNavigationScreensConfig"],[71,43,68,41,"nodes"],[71,48,68,46],[71,50,68,48,"metaOnly"],[71,58,68,56],[71,60,68,58],[72,4,69,4],[72,11,69,11,"Object"],[72,17,69,17],[72,18,69,18,"fromEntries"],[72,29,69,29],[72,30,69,30,"nodes"],[72,35,69,35],[72,36,69,36,"map"],[72,39,69,39],[72,40,69,41,"node"],[72,44,69,45],[72,48,69,50],[72,49,69,51,"node"],[72,53,69,55],[72,54,69,56,"route"],[72,59,69,61],[72,61,69,63,"convertRouteNodeToScreen"],[72,85,69,87],[72,86,69,88,"node"],[72,90,69,92],[72,92,69,94,"metaOnly"],[72,100,69,102],[72,101,69,103],[72,102,69,104],[72,103,69,105],[72,104,69,106],[73,2,70,0],[74,2,71,0,"exports"],[74,9,71,7],[74,10,71,8,"getReactNavigationScreensConfig"],[74,41,71,39],[74,44,71,42,"getReactNavigationScreensConfig"],[74,75,71,73],[75,2,72,0],[75,11,72,9,"getReactNavigationConfig"],[75,35,72,33,"getReactNavigationConfig"],[75,36,72,34,"routes"],[75,42,72,40],[75,44,72,42,"metaOnly"],[75,52,72,50],[75,54,72,52],[76,4,73,4],[76,8,73,10,"config"],[76,14,73,16],[76,17,73,19],[77,6,74,8,"initialRouteName"],[77,22,74,24],[77,24,74,26,"undefined"],[77,33,74,35],[78,6,75,8,"screens"],[78,13,75,15],[78,15,75,17,"getReactNavigationScreensConfig"],[78,46,75,48],[78,47,75,49,"routes"],[78,53,75,55],[78,54,75,56,"children"],[78,62,75,64],[78,64,75,66,"metaOnly"],[78,72,75,74],[79,4,76,4],[79,5,76,5],[80,4,77,4],[80,8,77,8,"routes"],[80,14,77,14],[80,15,77,15,"initialRouteName"],[80,31,77,31],[80,33,77,33],[81,6,78,8],[82,6,79,8],[83,6,80,8,"config"],[83,12,80,14],[83,13,80,15,"initialRouteName"],[83,29,80,31],[83,32,80,34,"routes"],[83,38,80,40],[83,39,80,41,"initialRouteName"],[83,55,80,57],[84,4,81,4],[85,4,82,4],[85,11,82,11,"config"],[85,17,82,17],[86,2,83,0],[87,2,84,0,"exports"],[87,9,84,7],[87,10,84,8,"getReactNavigationConfig"],[87,34,84,32],[87,37,84,35,"getReactNavigationConfig"],[87,61,84,59],[88,0,84,60],[88,3]],"functionMap":{"names":["<global>","convertDynamicRouteToReactNavigation","parseRouteSegments","convertRouteNodeToScreen","getReactNavigationScreensConfig","nodes.map$argument_0","getReactNavigationConfig"],"mappings":"AAA;ACM;CDiB;AEC;CFa;AGC;CH4B;AIC;wCCC,gED;CJC;AME;CNW"}},"type":"js/module"}]}