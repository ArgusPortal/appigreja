{"dependencies":[{"name":"./useRouteCache.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":21,"index":170},"end":{"line":7,"column":50,"index":199}}],"key":"vRgeMZqFJTNPt+F3yethsGfdxa8="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getFocusedRouteNameFromRoute = getFocusedRouteNameFromRoute;\n  function getFocusedRouteNameFromRoute(route) {\n    // @ts-expect-error: this isn't in type definitions coz we want this private\n    var state = route[require(_dependencyMap[0], \"./useRouteCache.js\").CHILD_STATE] ?? route.state;\n    var params = route.params;\n    var routeName = state ?\n    // Get the currently active route name in the nested navigator\n    state.routes[\n    // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n    // The type property will only exist for rehydrated state and not for state from deep link\n    state.index ?? (typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1)].name :\n    // If state doesn't exist, we need to default to `screen` param if available\n    typeof params?.screen === 'string' ? params.screen : undefined;\n    return routeName;\n  }\n});","lineCount":22,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"getFocusedRouteNameFromRoute"],[7,38,6,36],[7,41,6,39,"getFocusedRouteNameFromRoute"],[7,69,6,67],[8,2,8,0],[8,11,8,9,"getFocusedRouteNameFromRoute"],[8,39,8,37,"getFocusedRouteNameFromRoute"],[8,40,8,38,"route"],[8,45,8,43],[8,47,8,45],[9,4,9,2],[10,4,10,2],[10,8,10,8,"state"],[10,13,10,13],[10,16,10,16,"route"],[10,21,10,21],[10,22,10,22,"require"],[10,29,10,22],[10,30,10,22,"_dependencyMap"],[10,44,10,22],[10,71,10,37,"CHILD_STATE"],[10,82,10,48],[10,83,10,49],[10,87,10,53,"route"],[10,92,10,58],[10,93,10,59,"state"],[10,98,10,64],[11,4,11,2],[11,8,11,8,"params"],[11,14,11,14],[11,17,11,17,"route"],[11,22,11,22],[11,23,11,23,"params"],[11,29,11,29],[12,4,12,2],[12,8,12,8,"routeName"],[12,17,12,17],[12,20,12,20,"state"],[12,25,12,25],[13,4,13,2],[14,4,14,2,"state"],[14,9,14,7],[14,10,14,8,"routes"],[14,16,14,14],[15,4,15,2],[16,4,16,2],[17,4,17,2,"state"],[17,9,17,7],[17,10,17,8,"index"],[17,15,17,13],[17,20,17,18],[17,27,17,25,"state"],[17,32,17,30],[17,33,17,31,"type"],[17,37,17,35],[17,42,17,40],[17,50,17,48],[17,54,17,52,"state"],[17,59,17,57],[17,60,17,58,"type"],[17,64,17,62],[17,69,17,67],[17,76,17,74],[17,79,17,77],[17,80,17,78],[17,83,17,81,"state"],[17,88,17,86],[17,89,17,87,"routes"],[17,95,17,93],[17,96,17,94,"length"],[17,102,17,100],[17,105,17,103],[17,106,17,104],[17,107,17,105],[17,108,17,106],[17,109,17,107,"name"],[17,113,17,111],[18,4,18,2],[19,4,19,2],[19,11,19,9,"params"],[19,17,19,15],[19,19,19,17,"screen"],[19,25,19,23],[19,30,19,28],[19,38,19,36],[19,41,19,39,"params"],[19,47,19,45],[19,48,19,46,"screen"],[19,54,19,52],[19,57,19,55,"undefined"],[19,66,19,64],[20,4,20,2],[20,11,20,9,"routeName"],[20,20,20,18],[21,2,21,0],[22,0,21,1],[22,3]],"functionMap":{"names":["<global>","getFocusedRouteNameFromRoute"],"mappings":"AAA;ACO;CDa"}},"type":"js/module"}]}