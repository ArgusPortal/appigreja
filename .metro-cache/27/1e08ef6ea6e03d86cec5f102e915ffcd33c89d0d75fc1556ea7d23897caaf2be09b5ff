{"dependencies":[{"name":"./fetchAsync","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":218},"end":{"line":8,"column":42,"index":260}}],"key":"GJrX1EMy+DxI7FSLX0wJbybQg2o="}},{"name":"./errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":173},"end":{"line":7,"column":44,"index":217}}],"key":"rEld05quROH+iA6QLT6kkvqJ/qc="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.fetchThenEvalAsync = fetchThenEvalAsync;\n  /**\n   * Copyright Â© 2022 650 Industries.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  /**\n   * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n   *\n   * @param url Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon`.\n   */\n  function fetchThenEvalAsync(url) {\n    return (0, require(_dependencyMap[0], \"./fetchAsync\").fetchAsync)(url).then(_ref => {\n      var body = _ref.body,\n        status = _ref.status,\n        headers = _ref.headers;\n      if (headers?.has?.('Content-Type') != null && headers.get('Content-Type').includes('application/json')) {\n        // Errors are returned as JSON.\n        throw new Error(JSON.parse(body).message || `Unknown error fetching '${url}'`);\n      }\n      if (status === 200) {\n        // eslint-disable-next-line no-eval\n        return eval(body);\n      } else {\n        // Format Metro errors if possible.\n        if (process.env.NODE_ENV === 'development') {\n          // body can be an error from Metro if a module is missing.\n          // {\"originModulePath\":\"/Users/evanbacon/Documents/GitHub/expo/.\",\"targetModuleName\":\"./http://localhost:8081/node_modules/react-native/index.js\",\"message\":\"...\"}\n          var error = jsonParseOptional(body);\n          if (error) {\n            // TODO: This is essentially like the Metro native red box errors. We should do a better job formatting them so\n            // the user experience doesn't feel bad. This can be tested by loading a split bundle that results in a missing module error from Metro.\n            throw new (require(_dependencyMap[1], \"./errors\").MetroServerError)(error, url);\n          }\n        }\n        throw new Error(`Failed to load split bundle from URL: ${url}\\n${body}`);\n      }\n    });\n  }\n  function jsonParseOptional(json) {\n    try {\n      return JSON.parse(json);\n    } catch {\n      return null;\n    }\n  }\n});","lineCount":53,"map":[[6,2,1,0],[7,0,2,0],[8,0,3,0],[9,0,4,0],[10,0,5,0],[11,0,6,0],[13,2,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,2,14,7],[18,11,14,16,"fetchThenEvalAsync"],[18,29,14,34,"fetchThenEvalAsync"],[18,30,14,35,"url"],[18,33,14,46],[18,35,14,63],[19,4,15,2],[19,11,15,9],[19,15,15,9,"fetchAsync"],[19,41,15,9],[19,42,15,9,"fetchAsync"],[19,68,15,19],[19,70,15,20,"url"],[19,73,15,23],[19,74,15,24],[19,75,15,25,"then"],[19,79,15,29],[19,80,15,30,"_ref"],[19,84,15,30],[19,88,15,61],[20,6,15,61],[20,10,15,33,"body"],[20,14,15,37],[20,17,15,37,"_ref"],[20,21,15,37],[20,22,15,33,"body"],[20,26,15,37],[21,8,15,39,"status"],[21,14,15,45],[21,17,15,45,"_ref"],[21,21,15,45],[21,22,15,39,"status"],[21,28,15,45],[22,8,15,47,"headers"],[22,15,15,54],[22,18,15,54,"_ref"],[22,22,15,54],[22,23,15,47,"headers"],[22,30,15,54],[23,6,16,4],[23,10,17,6,"headers"],[23,17,17,13],[23,19,17,15,"has"],[23,22,17,18],[23,25,17,21],[23,39,17,35],[23,40,17,36],[23,44,17,40],[23,48,17,44],[23,52,18,6,"headers"],[23,59,18,13],[23,60,18,14,"get"],[23,63,18,17],[23,64,18,18],[23,78,18,32],[23,79,18,33],[23,80,18,35,"includes"],[23,88,18,43],[23,89,18,44],[23,107,18,62],[23,108,18,63],[23,110,19,6],[24,8,20,6],[25,8,21,6],[25,14,21,12],[25,18,21,16,"Error"],[25,23,21,21],[25,24,21,22,"JSON"],[25,28,21,26],[25,29,21,27,"parse"],[25,34,21,32],[25,35,21,33,"body"],[25,39,21,37],[25,40,21,38],[25,41,21,39,"message"],[25,48,21,46],[25,52,21,50],[25,79,21,77,"url"],[25,82,21,80],[25,85,21,83],[25,86,21,84],[26,6,22,4],[27,6,24,4],[27,10,24,8,"status"],[27,16,24,14],[27,21,24,19],[27,24,24,22],[27,26,24,24],[28,8,25,6],[29,8,26,6],[29,15,26,13,"eval"],[29,19,26,17],[29,20,26,18,"body"],[29,24,26,22],[29,25,26,23],[30,6,27,4],[30,7,27,5],[30,13,27,11],[31,8,28,6],[32,8,29,6],[32,12,29,10,"process"],[32,19,29,17],[32,20,29,18,"env"],[32,23,29,21],[32,24,29,22,"NODE_ENV"],[32,32,29,30],[32,37,29,35],[32,50,29,48],[32,52,29,50],[33,10,30,8],[34,10,31,8],[35,10,32,8],[35,14,32,14,"error"],[35,19,32,19],[35,22,32,22,"jsonParseOptional"],[35,39,32,39],[35,40,32,40,"body"],[35,44,32,44],[35,45,32,45],[36,10,33,8],[36,14,33,12,"error"],[36,19,33,17],[36,21,33,19],[37,12,34,10],[38,12,35,10],[39,12,36,10],[39,18,36,16],[39,23,36,20,"MetroServerError"],[39,49,36,20],[39,50,36,20,"MetroServerError"],[39,78,36,36],[39,80,36,37,"error"],[39,85,36,42],[39,87,36,44,"url"],[39,90,36,47],[39,91,36,48],[40,10,37,8],[41,8,38,6],[42,8,40,6],[42,14,40,12],[42,18,40,16,"Error"],[42,23,40,21],[42,24,40,22],[42,65,40,63,"url"],[42,68,40,66],[42,73,40,71,"body"],[42,77,40,75],[42,79,40,77],[42,80,40,78],[43,6,41,4],[44,4,42,2],[44,5,42,3],[44,6,42,4],[45,2,43,0],[46,2,45,0],[46,11,45,9,"jsonParseOptional"],[46,28,45,26,"jsonParseOptional"],[46,29,45,27,"json"],[46,33,45,39],[46,35,45,46],[47,4,46,2],[47,8,46,6],[48,6,47,4],[48,13,47,11,"JSON"],[48,17,47,15],[48,18,47,16,"parse"],[48,23,47,21],[48,24,47,22,"json"],[48,28,47,26],[48,29,47,27],[49,4,48,2],[49,5,48,3],[49,6,48,4],[49,12,48,10],[50,6,49,4],[50,13,49,11],[50,17,49,15],[51,4,50,2],[52,2,51,0],[53,0,51,1],[53,3]],"functionMap":{"names":["<global>","fetchThenEvalAsync","fetchAsync.then$argument_0","jsonParseOptional"],"mappings":"AAA;OCa;8BCC;GD2B;CDC;AGE;CHM"}},"type":"js/module"}]}