{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.resolveHrefStringWithSegments = exports.resolveHref = void 0;\n  /** Resolve an href object into a fully qualified, relative href. */\n  const resolveHref = href => {\n    if (typeof href === 'string') {\n      return (0, exports.resolveHref)({\n        pathname: href\n      });\n    }\n    const path = href.pathname ?? '';\n    if (!href?.params) {\n      return path;\n    }\n    const {\n      pathname,\n      params\n    } = createQualifiedPathname(path, {\n      ...href.params\n    });\n    const paramsString = createQueryParams(params);\n    return pathname + (paramsString ? `?${paramsString}` : '');\n  };\n  exports.resolveHref = resolveHref;\n  function resolveHrefStringWithSegments(href, {\n    segments = [],\n    params = {}\n  } = {}, relativeToDirectory = false) {\n    if (href.startsWith('.')) {\n      // Resolve base path by merging the current segments with the params\n      let base = segments?.map(segment => {\n        if (!segment.startsWith('[')) return segment;\n        if (segment.startsWith('[...')) {\n          segment = segment.slice(4, -1);\n          const param = params[segment];\n          if (Array.isArray(param)) {\n            return param.join('/');\n          } else {\n            return param?.split(',')?.join('/') ?? '';\n          }\n        } else {\n          segment = segment.slice(1, -1);\n          return params[segment];\n        }\n      }).filter(Boolean).join('/') ?? '/';\n      if (relativeToDirectory) {\n        base = `${base}/`;\n      }\n      href = new URL(href, `http://hostname/${base}`).pathname;\n    }\n    return href;\n  }\n  exports.resolveHrefStringWithSegments = resolveHrefStringWithSegments;\n  function createQualifiedPathname(pathname, params) {\n    for (const [key, value = ''] of Object.entries(params)) {\n      const dynamicKey = `[${key}]`;\n      const deepDynamicKey = `[...${key}]`;\n      if (pathname.includes(dynamicKey)) {\n        pathname = pathname.replace(dynamicKey, encodeParam(value));\n      } else if (pathname.includes(deepDynamicKey)) {\n        pathname = pathname.replace(deepDynamicKey, encodeParam(value));\n      } else {\n        continue;\n      }\n      delete params[key];\n    }\n    return {\n      pathname,\n      params\n    };\n  }\n  function encodeParam(param) {\n    if (Array.isArray(param)) {\n      return param.map(p => encodeParam(p)).join('/');\n    }\n    return encodeURIComponent(param.toString());\n  }\n  function createQueryParams(params) {\n    return Object.entries(params)\n    // Allow nullish params\n    .filter(([, value]) => value != null).map(([key, value]) => `${key}=${encodeURIComponent(value.toString())}`).join('&');\n  }\n});","lineCount":87,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"resolveHrefStringWithSegments"],[7,39,3,37],[7,42,3,40,"exports"],[7,49,3,47],[7,50,3,48,"resolveHref"],[7,61,3,59],[7,64,3,62],[7,69,3,67],[7,70,3,68],[8,2,4,0],[9,2,5,0],[9,8,5,6,"resolveHref"],[9,19,5,17],[9,22,5,21,"href"],[9,26,5,25],[9,30,5,30],[10,4,6,4],[10,8,6,8],[10,15,6,15,"href"],[10,19,6,19],[10,24,6,24],[10,32,6,32],[10,34,6,34],[11,6,7,8],[11,13,7,15],[11,14,7,16],[11,15,7,17],[11,17,7,19,"exports"],[11,24,7,26],[11,25,7,27,"resolveHref"],[11,36,7,38],[11,38,7,40],[12,8,7,42,"pathname"],[12,16,7,50],[12,18,7,52,"href"],[13,6,7,57],[13,7,7,58],[13,8,7,59],[14,4,8,4],[15,4,9,4],[15,10,9,10,"path"],[15,14,9,14],[15,17,9,17,"href"],[15,21,9,21],[15,22,9,22,"pathname"],[15,30,9,30],[15,34,9,34],[15,36,9,36],[16,4,10,4],[16,8,10,8],[16,9,10,9,"href"],[16,13,10,13],[16,15,10,15,"params"],[16,21,10,21],[16,23,10,23],[17,6,11,8],[17,13,11,15,"path"],[17,17,11,19],[18,4,12,4],[19,4,13,4],[19,10,13,10],[20,6,13,12,"pathname"],[20,14,13,20],[21,6,13,22,"params"],[22,4,13,29],[22,5,13,30],[22,8,13,33,"createQualifiedPathname"],[22,31,13,56],[22,32,13,57,"path"],[22,36,13,61],[22,38,13,63],[23,6,14,8],[23,9,14,11,"href"],[23,13,14,15],[23,14,14,16,"params"],[24,4,15,4],[24,5,15,5],[24,6,15,6],[25,4,16,4],[25,10,16,10,"paramsString"],[25,22,16,22],[25,25,16,25,"createQueryParams"],[25,42,16,42],[25,43,16,43,"params"],[25,49,16,49],[25,50,16,50],[26,4,17,4],[26,11,17,11,"pathname"],[26,19,17,19],[26,23,17,23,"paramsString"],[26,35,17,35],[26,38,17,38],[26,42,17,42,"paramsString"],[26,54,17,54],[26,56,17,56],[26,59,17,59],[26,61,17,61],[26,62,17,62],[27,2,18,0],[27,3,18,1],[28,2,19,0,"exports"],[28,9,19,7],[28,10,19,8,"resolveHref"],[28,21,19,19],[28,24,19,22,"resolveHref"],[28,35,19,33],[29,2,20,0],[29,11,20,9,"resolveHrefStringWithSegments"],[29,40,20,38,"resolveHrefStringWithSegments"],[29,41,20,39,"href"],[29,45,20,43],[29,47,20,45],[30,4,20,47,"segments"],[30,12,20,55],[30,15,20,58],[30,17,20,60],[31,4,20,62,"params"],[31,10,20,68],[31,13,20,71],[31,14,20,72],[32,2,20,74],[32,3,20,75],[32,6,20,78],[32,7,20,79],[32,8,20,80],[32,10,20,82,"relativeToDirectory"],[32,29,20,101],[32,32,20,104],[32,37,20,109],[32,39,20,111],[33,4,21,4],[33,8,21,8,"href"],[33,12,21,12],[33,13,21,13,"startsWith"],[33,23,21,23],[33,24,21,24],[33,27,21,27],[33,28,21,28],[33,30,21,30],[34,6,22,8],[35,6,23,8],[35,10,23,12,"base"],[35,14,23,16],[35,17,23,19,"segments"],[35,25,23,27],[35,27,24,14,"map"],[35,30,24,17],[35,31,24,19,"segment"],[35,38,24,26],[35,42,24,31],[36,8,25,12],[36,12,25,16],[36,13,25,17,"segment"],[36,20,25,24],[36,21,25,25,"startsWith"],[36,31,25,35],[36,32,25,36],[36,35,25,39],[36,36,25,40],[36,38,26,16],[36,45,26,23,"segment"],[36,52,26,30],[37,8,27,12],[37,12,27,16,"segment"],[37,19,27,23],[37,20,27,24,"startsWith"],[37,30,27,34],[37,31,27,35],[37,37,27,41],[37,38,27,42],[37,40,27,44],[38,10,28,16,"segment"],[38,17,28,23],[38,20,28,26,"segment"],[38,27,28,33],[38,28,28,34,"slice"],[38,33,28,39],[38,34,28,40],[38,35,28,41],[38,37,28,43],[38,38,28,44],[38,39,28,45],[38,40,28,46],[39,10,29,16],[39,16,29,22,"param"],[39,21,29,27],[39,24,29,30,"params"],[39,30,29,36],[39,31,29,37,"segment"],[39,38,29,44],[39,39,29,45],[40,10,30,16],[40,14,30,20,"Array"],[40,19,30,25],[40,20,30,26,"isArray"],[40,27,30,33],[40,28,30,34,"param"],[40,33,30,39],[40,34,30,40],[40,36,30,42],[41,12,31,20],[41,19,31,27,"param"],[41,24,31,32],[41,25,31,33,"join"],[41,29,31,37],[41,30,31,38],[41,33,31,41],[41,34,31,42],[42,10,32,16],[42,11,32,17],[42,17,33,21],[43,12,34,20],[43,19,34,27,"param"],[43,24,34,32],[43,26,34,34,"split"],[43,31,34,39],[43,32,34,40],[43,35,34,43],[43,36,34,44],[43,38,34,46,"join"],[43,42,34,50],[43,43,34,51],[43,46,34,54],[43,47,34,55],[43,51,34,59],[43,53,34,61],[44,10,35,16],[45,8,36,12],[45,9,36,13],[45,15,37,17],[46,10,38,16,"segment"],[46,17,38,23],[46,20,38,26,"segment"],[46,27,38,33],[46,28,38,34,"slice"],[46,33,38,39],[46,34,38,40],[46,35,38,41],[46,37,38,43],[46,38,38,44],[46,39,38,45],[46,40,38,46],[47,10,39,16],[47,17,39,23,"params"],[47,23,39,29],[47,24,39,30,"segment"],[47,31,39,37],[47,32,39,38],[48,8,40,12],[49,6,41,8],[49,7,41,9],[49,8,41,10],[49,9,42,13,"filter"],[49,15,42,19],[49,16,42,20,"Boolean"],[49,23,42,27],[49,24,42,28],[49,25,43,13,"join"],[49,29,43,17],[49,30,43,18],[49,33,43,21],[49,34,43,22],[49,38,43,26],[49,41,43,29],[50,6,44,8],[50,10,44,12,"relativeToDirectory"],[50,29,44,31],[50,31,44,33],[51,8,45,12,"base"],[51,12,45,16],[51,15,45,19],[51,18,45,22,"base"],[51,22,45,26],[51,25,45,29],[52,6,46,8],[53,6,47,8,"href"],[53,10,47,12],[53,13,47,15],[53,17,47,19,"URL"],[53,20,47,22],[53,21,47,23,"href"],[53,25,47,27],[53,27,47,29],[53,46,47,48,"base"],[53,50,47,52],[53,52,47,54],[53,53,47,55],[53,54,47,56,"pathname"],[53,62,47,64],[54,4,48,4],[55,4,49,4],[55,11,49,11,"href"],[55,15,49,15],[56,2,50,0],[57,2,51,0,"exports"],[57,9,51,7],[57,10,51,8,"resolveHrefStringWithSegments"],[57,39,51,37],[57,42,51,40,"resolveHrefStringWithSegments"],[57,71,51,69],[58,2,52,0],[58,11,52,9,"createQualifiedPathname"],[58,34,52,32,"createQualifiedPathname"],[58,35,52,33,"pathname"],[58,43,52,41],[58,45,52,43,"params"],[58,51,52,49],[58,53,52,51],[59,4,53,4],[59,9,53,9],[59,15,53,15],[59,16,53,16,"key"],[59,19,53,19],[59,21,53,21,"value"],[59,26,53,26],[59,29,53,29],[59,31,53,31],[59,32,53,32],[59,36,53,36,"Object"],[59,42,53,42],[59,43,53,43,"entries"],[59,50,53,50],[59,51,53,51,"params"],[59,57,53,57],[59,58,53,58],[59,60,53,60],[60,6,54,8],[60,12,54,14,"dynamicKey"],[60,22,54,24],[60,25,54,27],[60,29,54,31,"key"],[60,32,54,34],[60,35,54,37],[61,6,55,8],[61,12,55,14,"deepDynamicKey"],[61,26,55,28],[61,29,55,31],[61,36,55,38,"key"],[61,39,55,41],[61,42,55,44],[62,6,56,8],[62,10,56,12,"pathname"],[62,18,56,20],[62,19,56,21,"includes"],[62,27,56,29],[62,28,56,30,"dynamicKey"],[62,38,56,40],[62,39,56,41],[62,41,56,43],[63,8,57,12,"pathname"],[63,16,57,20],[63,19,57,23,"pathname"],[63,27,57,31],[63,28,57,32,"replace"],[63,35,57,39],[63,36,57,40,"dynamicKey"],[63,46,57,50],[63,48,57,52,"encodeParam"],[63,59,57,63],[63,60,57,64,"value"],[63,65,57,69],[63,66,57,70],[63,67,57,71],[64,6,58,8],[64,7,58,9],[64,13,59,13],[64,17,59,17,"pathname"],[64,25,59,25],[64,26,59,26,"includes"],[64,34,59,34],[64,35,59,35,"deepDynamicKey"],[64,49,59,49],[64,50,59,50],[64,52,59,52],[65,8,60,12,"pathname"],[65,16,60,20],[65,19,60,23,"pathname"],[65,27,60,31],[65,28,60,32,"replace"],[65,35,60,39],[65,36,60,40,"deepDynamicKey"],[65,50,60,54],[65,52,60,56,"encodeParam"],[65,63,60,67],[65,64,60,68,"value"],[65,69,60,73],[65,70,60,74],[65,71,60,75],[66,6,61,8],[66,7,61,9],[66,13,62,13],[67,8,63,12],[68,6,64,8],[69,6,65,8],[69,13,65,15,"params"],[69,19,65,21],[69,20,65,22,"key"],[69,23,65,25],[69,24,65,26],[70,4,66,4],[71,4,67,4],[71,11,67,11],[72,6,67,13,"pathname"],[72,14,67,21],[73,6,67,23,"params"],[74,4,67,30],[74,5,67,31],[75,2,68,0],[76,2,69,0],[76,11,69,9,"encodeParam"],[76,22,69,20,"encodeParam"],[76,23,69,21,"param"],[76,28,69,26],[76,30,69,28],[77,4,70,4],[77,8,70,8,"Array"],[77,13,70,13],[77,14,70,14,"isArray"],[77,21,70,21],[77,22,70,22,"param"],[77,27,70,27],[77,28,70,28],[77,30,70,30],[78,6,71,8],[78,13,71,15,"param"],[78,18,71,20],[78,19,71,21,"map"],[78,22,71,24],[78,23,71,26,"p"],[78,24,71,27],[78,28,71,32,"encodeParam"],[78,39,71,43],[78,40,71,44,"p"],[78,41,71,45],[78,42,71,46],[78,43,71,47],[78,44,71,48,"join"],[78,48,71,52],[78,49,71,53],[78,52,71,56],[78,53,71,57],[79,4,72,4],[80,4,73,4],[80,11,73,11,"encodeURIComponent"],[80,29,73,29],[80,30,73,30,"param"],[80,35,73,35],[80,36,73,36,"toString"],[80,44,73,44],[80,45,73,45],[80,46,73,46],[80,47,73,47],[81,2,74,0],[82,2,75,0],[82,11,75,9,"createQueryParams"],[82,28,75,26,"createQueryParams"],[82,29,75,27,"params"],[82,35,75,33],[82,37,75,35],[83,4,76,4],[83,11,76,12,"Object"],[83,17,76,18],[83,18,76,19,"entries"],[83,25,76,26],[83,26,76,27,"params"],[83,32,76,33],[84,4,77,8],[85,4,77,8],[85,5,78,9,"filter"],[85,11,78,15],[85,12,78,16],[85,13,78,17],[85,16,78,20,"value"],[85,21,78,25],[85,22,78,26],[85,27,78,31,"value"],[85,32,78,36],[85,36,78,40],[85,40,78,44],[85,41,78,45],[85,42,79,9,"map"],[85,45,79,12],[85,46,79,13],[85,47,79,14],[85,48,79,15,"key"],[85,51,79,18],[85,53,79,20,"value"],[85,58,79,25],[85,59,79,26],[85,64,79,31],[85,67,79,34,"key"],[85,70,79,37],[85,74,79,41,"encodeURIComponent"],[85,92,79,59],[85,93,79,60,"value"],[85,98,79,65],[85,99,79,66,"toString"],[85,107,79,74],[85,108,79,75],[85,109,79,76],[85,110,79,77],[85,112,79,79],[85,113,79,80],[85,114,80,9,"join"],[85,118,80,13],[85,119,80,14],[85,122,80,17],[85,123,80,18],[86,2,81,0],[87,0,81,1],[87,3]],"functionMap":{"names":["<global>","resolveHref","resolveHrefStringWithSegments","segments.map$argument_0","createQualifiedPathname","encodeParam","param.map$argument_0","createQueryParams","Object.entries.filter$argument_0","Object.entries.filter.map$argument_0"],"mappings":"AAA;oBCI;CDa;AEE;kBCI;SDiB;CFS;AIE;CJgB;AKC;yBCE,qBD;CLG;AOC;gBCG,4BD;aEC,kEF;CPE"}},"type":"js/module"}]}