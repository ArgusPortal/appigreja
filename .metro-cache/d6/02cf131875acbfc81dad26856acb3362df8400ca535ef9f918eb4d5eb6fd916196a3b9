{"dependencies":[{"name":"./tapGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":441},"end":{"line":13,"column":42,"index":483}}],"key":"0AhBYBLv6GsrGEF0r8aS4Nb6QGo="}},{"name":"./panGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":298},"end":{"line":10,"column":42,"index":340}}],"key":"aBzYQKsfDy415OM5yEWHEC+JvOM="}},{"name":"./pinchGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":341},"end":{"line":11,"column":46,"index":387}}],"key":"Dpg/8aAltyIIC/a4wQAoQVMdkg4="}},{"name":"./rotationGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":388},"end":{"line":12,"column":52,"index":440}}],"key":"/7dx2ayCyD336a+OWcSLUeam5aE="}},{"name":"./flingGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"h24ijk3pJCmeakiNLvaxhU4oD+0="}},{"name":"./longPressGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":243},"end":{"line":9,"column":54,"index":297}}],"key":"1o89s2ZbLCAJzQNlPSeE8o2+cH8="}},{"name":"./forceTouchGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":47},"end":{"line":2,"column":56,"index":103}}],"key":"1QIx9s/Hb/tSlS4sC64N+Adyv7M="}},{"name":"./nativeGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":484},"end":{"line":14,"column":48,"index":532}}],"key":"cjDWt0y1Cq1VxsEGc4geilXmt0Q="}},{"name":"./manualGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":533},"end":{"line":15,"column":48,"index":581}}],"key":"HUWWiRL9QzXRRI3alfUEUrUAkqk="}},{"name":"./hoverGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":582},"end":{"line":16,"column":46,"index":628}}],"key":"+OU9Hr4DiheWQiFQL42cwzfCmfI="}},{"name":"./gestureComposition","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":141},"end":{"line":8,"column":30,"index":242}},{"start":{"line":4,"column":0,"index":141},"end":{"line":8,"column":30,"index":242}},{"start":{"line":4,"column":0,"index":141},"end":{"line":8,"column":30,"index":242}}],"key":"J0ugy1LMUGf5KgbYvNV+9auzxk4="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.GestureObjects = void 0;\n  /**\n   * `Gesture` is the object that allows you to create and compose gestures.\n   *\n   * ### Remarks\n   * - Consider wrapping your gesture configurations with `useMemo`, as it will reduce the amount of work Gesture Handler has to do under the hood when updating gestures.\n   *\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/gesture\n   */\n  var GestureObjects = exports.GestureObjects = {\n    /**\n     * A discrete gesture that recognizes one or many taps.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture\n     */\n    Tap: () => {\n      return new (require(_dependencyMap[0], \"./tapGesture\").TapGesture)();\n    },\n    /**\n     * A continuous gesture that can recognize a panning (dragging) gesture and track its movement.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture\n     */\n    Pan: () => {\n      return new (require(_dependencyMap[1], \"./panGesture\").PanGesture)();\n    },\n    /**\n     * A continuous gesture that recognizes pinch gesture. It allows for tracking the distance between two fingers and use that information to scale or zoom your content.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pinch-gesture\n     */\n    Pinch: () => {\n      return new (require(_dependencyMap[2], \"./pinchGesture\").PinchGesture)();\n    },\n    /**\n     * A continuous gesture that can recognize rotation and track its movement.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/rotation-gesture\n     */\n    Rotation: () => {\n      return new (require(_dependencyMap[3], \"./rotationGesture\").RotationGesture)();\n    },\n    /**\n     * A discrete gesture that activates when the movement is sufficiently fast.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/fling-gesture\n     */\n    Fling: () => {\n      return new (require(_dependencyMap[4], \"./flingGesture\").FlingGesture)();\n    },\n    /**\n     * A discrete gesture that activates when the corresponding view is pressed for a sufficiently long time.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/long-press-gesture\n     */\n    LongPress: () => {\n      return new (require(_dependencyMap[5], \"./longPressGesture\").LongPressGesture)();\n    },\n    /**\n     * #### iOS only\n     * A continuous gesture that recognizes force of a touch. It allows for tracking pressure of touch on some iOS devices.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/force-touch-gesture\n     */\n    ForceTouch: () => {\n      return new (require(_dependencyMap[6], \"./forceTouchGesture\").ForceTouchGesture)();\n    },\n    /**\n     * A gesture that allows other touch handling components to participate in RNGH's gesture system.\n     * When used, the other component should be the direct child of a `GestureDetector`.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/native-gesture\n     */\n    Native: () => {\n      return new (require(_dependencyMap[7], \"./nativeGesture\").NativeGesture)();\n    },\n    /**\n     * A plain gesture that has no specific activation criteria nor event data set.\n     * Its state has to be controlled manually using a state manager.\n     * It will not fail when all the pointers are lifted from the screen.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/manual-gesture\n     */\n    Manual: () => {\n      return new (require(_dependencyMap[8], \"./manualGesture\").ManualGesture)();\n    },\n    /**\n     * A continuous gesture that can recognize hovering above the view it's attached to.\n     * The hover effect may be activated by moving a mouse or a stylus over the view.\n     *\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/hover-gesture\n     */\n    Hover: () => {\n      return new (require(_dependencyMap[9], \"./hoverGesture\").HoverGesture)();\n    },\n    /**\n     * Builds a composed gesture consisting of gestures provided as parameters.\n     * The first one that becomes active cancels the rest of gestures.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#race\n     */\n    Race: function () {\n      for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {\n        gestures[_key] = arguments[_key];\n      }\n      return new (require(_dependencyMap[10], \"./gestureComposition\").ComposedGesture)(...gestures);\n    },\n    /**\n     * Builds a composed gesture that allows all base gestures to run simultaneously.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneous\n     */\n    Simultaneous() {\n      for (var _len2 = arguments.length, gestures = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        gestures[_key2] = arguments[_key2];\n      }\n      return new (require(_dependencyMap[10], \"./gestureComposition\").SimultaneousGesture)(...gestures);\n    },\n    /**\n     * Builds a composed gesture where only one of the provided gestures can become active.\n     * Priority is decided through the order of gestures: the first one has higher priority\n     * than the second one, second one has higher priority than the third one, and so on.\n     * For example, to make a gesture that recognizes both single and double tap you need\n     * to call Exclusive(doubleTap, singleTap).\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#exclusive\n     */\n    Exclusive() {\n      for (var _len3 = arguments.length, gestures = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        gestures[_key3] = arguments[_key3];\n      }\n      return new (require(_dependencyMap[10], \"./gestureComposition\").ExclusiveGesture)(...gestures);\n    }\n  };\n});","lineCount":127,"map":[[6,2,18,0],[7,0,19,0],[8,0,20,0],[9,0,21,0],[10,0,22,0],[11,0,23,0],[12,0,24,0],[13,0,25,0],[14,2,26,7],[14,6,26,13,"GestureObjects"],[14,20,26,27],[14,23,26,27,"exports"],[14,30,26,27],[14,31,26,27,"GestureObjects"],[14,45,26,27],[14,48,26,30],[15,4,27,2],[16,0,28,0],[17,0,29,0],[18,0,30,0],[19,4,31,2,"Tap"],[19,7,31,5],[19,9,31,7,"Tap"],[19,10,31,7],[19,15,31,13],[20,6,32,4],[20,13,32,11],[20,18,32,15,"TapGesture"],[20,44,32,15],[20,45,32,15,"TapGesture"],[20,71,32,25],[20,73,32,26],[20,74,32,27],[21,4,33,2],[21,5,33,3],[22,4,35,2],[23,0,36,0],[24,0,37,0],[25,0,38,0],[26,4,39,2,"Pan"],[26,7,39,5],[26,9,39,7,"Pan"],[26,10,39,7],[26,15,39,13],[27,6,40,4],[27,13,40,11],[27,18,40,15,"PanGesture"],[27,44,40,15],[27,45,40,15,"PanGesture"],[27,71,40,25],[27,73,40,26],[27,74,40,27],[28,4,41,2],[28,5,41,3],[29,4,43,2],[30,0,44,0],[31,0,45,0],[32,0,46,0],[33,4,47,2,"Pinch"],[33,9,47,7],[33,11,47,9,"Pinch"],[33,12,47,9],[33,17,47,15],[34,6,48,4],[34,13,48,11],[34,18,48,15,"PinchGesture"],[34,44,48,15],[34,45,48,15,"PinchGesture"],[34,75,48,27],[34,77,48,28],[34,78,48,29],[35,4,49,2],[35,5,49,3],[36,4,51,2],[37,0,52,0],[38,0,53,0],[39,0,54,0],[40,4,55,2,"Rotation"],[40,12,55,10],[40,14,55,12,"Rotation"],[40,15,55,12],[40,20,55,18],[41,6,56,4],[41,13,56,11],[41,18,56,15,"RotationGesture"],[41,44,56,15],[41,45,56,15,"RotationGesture"],[41,81,56,30],[41,83,56,31],[41,84,56,32],[42,4,57,2],[42,5,57,3],[43,4,59,2],[44,0,60,0],[45,0,61,0],[46,0,62,0],[47,4,63,2,"Fling"],[47,9,63,7],[47,11,63,9,"Fling"],[47,12,63,9],[47,17,63,15],[48,6,64,4],[48,13,64,11],[48,18,64,15,"FlingGesture"],[48,44,64,15],[48,45,64,15,"FlingGesture"],[48,75,64,27],[48,77,64,28],[48,78,64,29],[49,4,65,2],[49,5,65,3],[50,4,67,2],[51,0,68,0],[52,0,69,0],[53,0,70,0],[54,4,71,2,"LongPress"],[54,13,71,11],[54,15,71,13,"LongPress"],[54,16,71,13],[54,21,71,19],[55,6,72,4],[55,13,72,11],[55,18,72,15,"LongPressGesture"],[55,44,72,15],[55,45,72,15,"LongPressGesture"],[55,83,72,31],[55,85,72,32],[55,86,72,33],[56,4,73,2],[56,5,73,3],[57,4,75,2],[58,0,76,0],[59,0,77,0],[60,0,78,0],[61,0,79,0],[62,4,80,2,"ForceTouch"],[62,14,80,12],[62,16,80,14,"ForceTouch"],[62,17,80,14],[62,22,80,20],[63,6,81,4],[63,13,81,11],[63,18,81,15,"ForceTouchGesture"],[63,44,81,15],[63,45,81,15,"ForceTouchGesture"],[63,85,81,32],[63,87,81,33],[63,88,81,34],[64,4,82,2],[64,5,82,3],[65,4,84,2],[66,0,85,0],[67,0,86,0],[68,0,87,0],[69,0,88,0],[70,4,89,2,"Native"],[70,10,89,8],[70,12,89,10,"Native"],[70,13,89,10],[70,18,89,16],[71,6,90,4],[71,13,90,11],[71,18,90,15,"NativeGesture"],[71,44,90,15],[71,45,90,15,"NativeGesture"],[71,77,90,28],[71,79,90,29],[71,80,90,30],[72,4,91,2],[72,5,91,3],[73,4,93,2],[74,0,94,0],[75,0,95,0],[76,0,96,0],[77,0,97,0],[78,0,98,0],[79,4,99,2,"Manual"],[79,10,99,8],[79,12,99,10,"Manual"],[79,13,99,10],[79,18,99,16],[80,6,100,4],[80,13,100,11],[80,18,100,15,"ManualGesture"],[80,44,100,15],[80,45,100,15,"ManualGesture"],[80,77,100,28],[80,79,100,29],[80,80,100,30],[81,4,101,2],[81,5,101,3],[82,4,103,2],[83,0,104,0],[84,0,105,0],[85,0,106,0],[86,0,107,0],[87,0,108,0],[88,4,109,2,"Hover"],[88,9,109,7],[88,11,109,9,"Hover"],[88,12,109,9],[88,17,109,15],[89,6,110,4],[89,13,110,11],[89,18,110,15,"HoverGesture"],[89,44,110,15],[89,45,110,15,"HoverGesture"],[89,75,110,27],[89,77,110,28],[89,78,110,29],[90,4,111,2],[90,5,111,3],[91,4,113,2],[92,0,114,0],[93,0,115,0],[94,0,116,0],[95,0,117,0],[96,4,118,2,"Race"],[96,8,118,6],[96,10,118,8],[96,19,118,8,"Race"],[96,20,118,8],[96,22,118,36],[97,6,118,36],[97,15,118,36,"_len"],[97,19,118,36],[97,22,118,36,"arguments"],[97,31,118,36],[97,32,118,36,"length"],[97,38,118,36],[97,40,118,12,"gestures"],[97,48,118,20],[97,55,118,20,"Array"],[97,60,118,20],[97,61,118,20,"_len"],[97,65,118,20],[97,68,118,20,"_key"],[97,72,118,20],[97,78,118,20,"_key"],[97,82,118,20],[97,85,118,20,"_len"],[97,89,118,20],[97,91,118,20,"_key"],[97,95,118,20],[98,8,118,12,"gestures"],[98,16,118,20],[98,17,118,20,"_key"],[98,21,118,20],[98,25,118,20,"arguments"],[98,34,118,20],[98,35,118,20,"_key"],[98,39,118,20],[99,6,118,20],[100,6,119,4],[100,13,119,11],[100,18,119,15,"ComposedGesture"],[100,45,119,15],[100,46,119,15,"ComposedGesture"],[100,85,119,30],[100,87,119,31],[100,90,119,34,"gestures"],[100,98,119,42],[100,99,119,43],[101,4,120,2],[101,5,120,3],[102,4,122,2],[103,0,123,0],[104,0,124,0],[105,0,125,0],[106,4,126,2,"Simultaneous"],[106,16,126,14,"Simultaneous"],[106,17,126,14],[106,19,126,39],[107,6,126,39],[107,15,126,39,"_len2"],[107,20,126,39],[107,23,126,39,"arguments"],[107,32,126,39],[107,33,126,39,"length"],[107,39,126,39],[107,41,126,18,"gestures"],[107,49,126,26],[107,56,126,26,"Array"],[107,61,126,26],[107,62,126,26,"_len2"],[107,67,126,26],[107,70,126,26,"_key2"],[107,75,126,26],[107,81,126,26,"_key2"],[107,86,126,26],[107,89,126,26,"_len2"],[107,94,126,26],[107,96,126,26,"_key2"],[107,101,126,26],[108,8,126,18,"gestures"],[108,16,126,26],[108,17,126,26,"_key2"],[108,22,126,26],[108,26,126,26,"arguments"],[108,35,126,26],[108,36,126,26,"_key2"],[108,41,126,26],[109,6,126,26],[110,6,127,4],[110,13,127,11],[110,18,127,15,"SimultaneousGesture"],[110,45,127,15],[110,46,127,15,"SimultaneousGesture"],[110,89,127,34],[110,91,127,35],[110,94,127,38,"gestures"],[110,102,127,46],[110,103,127,47],[111,4,128,2],[111,5,128,3],[112,4,130,2],[113,0,131,0],[114,0,132,0],[115,0,133,0],[116,0,134,0],[117,0,135,0],[118,0,136,0],[119,0,137,0],[120,4,138,2,"Exclusive"],[120,13,138,11,"Exclusive"],[120,14,138,11],[120,16,138,36],[121,6,138,36],[121,15,138,36,"_len3"],[121,20,138,36],[121,23,138,36,"arguments"],[121,32,138,36],[121,33,138,36,"length"],[121,39,138,36],[121,41,138,15,"gestures"],[121,49,138,23],[121,56,138,23,"Array"],[121,61,138,23],[121,62,138,23,"_len3"],[121,67,138,23],[121,70,138,23,"_key3"],[121,75,138,23],[121,81,138,23,"_key3"],[121,86,138,23],[121,89,138,23,"_len3"],[121,94,138,23],[121,96,138,23,"_key3"],[121,101,138,23],[122,8,138,15,"gestures"],[122,16,138,23],[122,17,138,23,"_key3"],[122,22,138,23],[122,26,138,23,"arguments"],[122,35,138,23],[122,36,138,23,"_key3"],[122,41,138,23],[123,6,138,23],[124,6,139,4],[124,13,139,11],[124,18,139,15,"ExclusiveGesture"],[124,45,139,15],[124,46,139,15,"ExclusiveGesture"],[124,86,139,31],[124,88,139,32],[124,91,139,35,"gestures"],[124,99,139,43],[124,100,139,44],[125,4,140,2],[126,2,141,0],[126,3,141,1],[127,0,141,2],[127,3]],"functionMap":{"names":["<global>","GestureObjects.Tap","GestureObjects.Pan","GestureObjects.Pinch","GestureObjects.Rotation","GestureObjects.Fling","GestureObjects.LongPress","GestureObjects.ForceTouch","GestureObjects.Native","GestureObjects.Manual","GestureObjects.Hover","GestureObjects.Race","GestureObjects.Simultaneous","GestureObjects.Exclusive"],"mappings":"AAA;OC8B;GDE;OEM;GFE;SGM;GHE;YIM;GJE;SKM;GLE;aMM;GNE;cOO;GPE;UQO;GRE;USQ;GTE;SUQ;GVE;QWO;GXE;EYM;GZE;EaU;GbE"}},"type":"js/module"}]}