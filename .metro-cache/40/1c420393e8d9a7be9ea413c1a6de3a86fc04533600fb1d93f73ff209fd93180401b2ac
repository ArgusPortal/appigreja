{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":68,"column":44,"index":2891}}],"key":"5y7e5+zC7teYEEC6niD9f5zII1M="}},{"name":"./fork/getStateFromPath-forks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":33,"index":183},"end":{"line":4,"column":73,"index":223}},{"start":{"line":4,"column":33,"index":183},"end":{"line":4,"column":73,"index":223}}],"key":"dU8dLQVAVpJgJ1nQ+PeElBC95Dc="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getNormalizedStatePath = exports.getRouteInfoFromState = void 0;\n  function getRouteInfoFromState(getPathFromState, state, baseUrl) {\n    var _getPathFromState = getPathFromState(state, false),\n      path = _getPathFromState.path;\n    var qualified = getPathFromState(state, true);\n    return {\n      // TODO: This may have a predefined origin attached in the future.\n      unstable_globalHref: path,\n      pathname: (0, require(_dependencyMap[1], \"./fork/getStateFromPath-forks\").stripBaseUrl)(path, baseUrl).split('?')['0'],\n      isIndex: isIndexPath(state),\n      ...getNormalizedStatePath(qualified, baseUrl)\n    };\n  }\n  exports.getRouteInfoFromState = getRouteInfoFromState;\n  function isIndexPath(state) {\n    var route = state.routes[state.index ?? state.routes.length - 1];\n    if (route.state) {\n      return isIndexPath(route.state);\n    }\n    // Index routes on the same level as a layout do not have `index` in their name\n    if (route.params && 'screen' in route.params) {\n      return route.params.screen === 'index';\n    }\n    // The `params` key will not exist if there are no params\n    // So we need to do a positive lookahead to check if the route ends with /index\n    // Nested routes that are hoisted will have a name ending with /index\n    // e.g name could be /user/[id]/index\n    if (route.name.match(/.+\\/index$/)) return true;\n    // The state will either have params (because there are multiple _layout) or it will be hoisted with a name\n    // If we don't match the above cases, then it's not an index route\n    return false;\n  }\n  // TODO: Split up getPathFromState to return all this info at once.\n  function getNormalizedStatePath(_ref, baseUrl) {\n    var statePath = _ref.path,\n      params = _ref.params;\n    var _statePath$split = statePath.split('?'),\n      _statePath$split2 = _slicedToArray(_statePath$split, 1),\n      pathname = _statePath$split2[0];\n    return {\n      // Strip empty path at the start\n      segments: (0, require(_dependencyMap[1], \"./fork/getStateFromPath-forks\").stripBaseUrl)(pathname, baseUrl).split('/').filter(Boolean).map(decodeURIComponent),\n      // TODO: This is not efficient, we should generate based on the state instead\n      // of converting to string then back to object\n      params: decodeParams(params)\n    };\n  }\n  exports.getNormalizedStatePath = getNormalizedStatePath;\n  function decodeParams(params) {\n    var parsed = {};\n    for (var _ref2 of Object.entries(params)) {\n      var _ref3 = _slicedToArray(_ref2, 2);\n      var key = _ref3[0];\n      var value = _ref3[1];\n      try {\n        if (key === 'params' && typeof value === 'object') {\n          parsed[key] = decodeParams(value);\n        } else if (Array.isArray(value)) {\n          parsed[key] = value.map(v => decodeURIComponent(v));\n        } else {\n          parsed[key] = decodeURIComponent(value);\n        }\n      } catch {\n        parsed[key] = value;\n      }\n    }\n    return parsed;\n  }\n});","lineCount":76,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,3,0,"exports"],[8,9,3,7],[8,10,3,8,"getNormalizedStatePath"],[8,32,3,30],[8,35,3,33,"exports"],[8,42,3,40],[8,43,3,41,"getRouteInfoFromState"],[8,64,3,62],[8,67,3,65],[8,72,3,70],[8,73,3,71],[9,2,5,0],[9,11,5,9,"getRouteInfoFromState"],[9,32,5,30,"getRouteInfoFromState"],[9,33,5,31,"getPathFromState"],[9,49,5,47],[9,51,5,49,"state"],[9,56,5,54],[9,58,5,56,"baseUrl"],[9,65,5,63],[9,67,5,65],[10,4,6,4],[10,8,6,4,"_getPathFromState"],[10,25,6,4],[10,28,6,21,"getPathFromState"],[10,44,6,37],[10,45,6,38,"state"],[10,50,6,43],[10,52,6,45],[10,57,6,50],[10,58,6,51],[11,6,6,12,"path"],[11,10,6,16],[11,13,6,16,"_getPathFromState"],[11,30,6,16],[11,31,6,12,"path"],[11,35,6,16],[12,4,7,4],[12,8,7,10,"qualified"],[12,17,7,19],[12,20,7,22,"getPathFromState"],[12,36,7,38],[12,37,7,39,"state"],[12,42,7,44],[12,44,7,46],[12,48,7,50],[12,49,7,51],[13,4,8,4],[13,11,8,11],[14,6,9,8],[15,6,10,8,"unstable_globalHref"],[15,25,10,27],[15,27,10,29,"path"],[15,31,10,33],[16,6,11,8,"pathname"],[16,14,11,16],[16,16,11,18],[16,17,11,19],[16,18,11,20],[16,20,11,22,"require"],[16,27,11,22],[16,28,11,22,"_dependencyMap"],[16,42,11,22],[16,80,11,47,"stripBaseUrl"],[16,92,11,59],[16,94,11,61,"path"],[16,98,11,65],[16,100,11,67,"baseUrl"],[16,107,11,74],[16,108,11,75],[16,109,11,76,"split"],[16,114,11,81],[16,115,11,82],[16,118,11,85],[16,119,11,86],[16,120,11,87],[16,123,11,90],[16,124,11,91],[17,6,12,8,"isIndex"],[17,13,12,15],[17,15,12,17,"isIndexPath"],[17,26,12,28],[17,27,12,29,"state"],[17,32,12,34],[17,33,12,35],[18,6,13,8],[18,9,13,11,"getNormalizedStatePath"],[18,31,13,33],[18,32,13,34,"qualified"],[18,41,13,43],[18,43,13,45,"baseUrl"],[18,50,13,52],[19,4,14,4],[19,5,14,5],[20,2,15,0],[21,2,16,0,"exports"],[21,9,16,7],[21,10,16,8,"getRouteInfoFromState"],[21,31,16,29],[21,34,16,32,"getRouteInfoFromState"],[21,55,16,53],[22,2,17,0],[22,11,17,9,"isIndexPath"],[22,22,17,20,"isIndexPath"],[22,23,17,21,"state"],[22,28,17,26],[22,30,17,28],[23,4,18,4],[23,8,18,10,"route"],[23,13,18,15],[23,16,18,18,"state"],[23,21,18,23],[23,22,18,24,"routes"],[23,28,18,30],[23,29,18,31,"state"],[23,34,18,36],[23,35,18,37,"index"],[23,40,18,42],[23,44,18,46,"state"],[23,49,18,51],[23,50,18,52,"routes"],[23,56,18,58],[23,57,18,59,"length"],[23,63,18,65],[23,66,18,68],[23,67,18,69],[23,68,18,70],[24,4,19,4],[24,8,19,8,"route"],[24,13,19,13],[24,14,19,14,"state"],[24,19,19,19],[24,21,19,21],[25,6,20,8],[25,13,20,15,"isIndexPath"],[25,24,20,26],[25,25,20,27,"route"],[25,30,20,32],[25,31,20,33,"state"],[25,36,20,38],[25,37,20,39],[26,4,21,4],[27,4,22,4],[28,4,23,4],[28,8,23,8,"route"],[28,13,23,13],[28,14,23,14,"params"],[28,20,23,20],[28,24,23,24],[28,32,23,32],[28,36,23,36,"route"],[28,41,23,41],[28,42,23,42,"params"],[28,48,23,48],[28,50,23,50],[29,6,24,8],[29,13,24,15,"route"],[29,18,24,20],[29,19,24,21,"params"],[29,25,24,27],[29,26,24,28,"screen"],[29,32,24,34],[29,37,24,39],[29,44,24,46],[30,4,25,4],[31,4,26,4],[32,4,27,4],[33,4,28,4],[34,4,29,4],[35,4,30,4],[35,8,30,8,"route"],[35,13,30,13],[35,14,30,14,"name"],[35,18,30,18],[35,19,30,19,"match"],[35,24,30,24],[35,25,30,25],[35,37,30,37],[35,38,30,38],[35,40,31,8],[35,47,31,15],[35,51,31,19],[36,4,32,4],[37,4,33,4],[38,4,34,4],[38,11,34,11],[38,16,34,16],[39,2,35,0],[40,2,36,0],[41,2,37,0],[41,11,37,9,"getNormalizedStatePath"],[41,33,37,31,"getNormalizedStatePath"],[41,34,37,31,"_ref"],[41,38,37,31],[41,40,37,62,"baseUrl"],[41,47,37,69],[41,49,37,71],[42,4,37,71],[42,8,37,40,"statePath"],[42,17,37,49],[42,20,37,49,"_ref"],[42,24,37,49],[42,25,37,34,"path"],[42,29,37,38],[43,6,37,51,"params"],[43,12,37,57],[43,15,37,57,"_ref"],[43,19,37,57],[43,20,37,51,"params"],[43,26,37,57],[44,4,38,4],[44,8,38,4,"_statePath$split"],[44,24,38,4],[44,27,38,23,"statePath"],[44,36,38,32],[44,37,38,33,"split"],[44,42,38,38],[44,43,38,39],[44,46,38,42],[44,47,38,43],[45,6,38,43,"_statePath$split2"],[45,23,38,43],[45,26,38,43,"_slicedToArray"],[45,40,38,43],[45,41,38,43,"_statePath$split"],[45,57,38,43],[46,6,38,11,"pathname"],[46,14,38,19],[46,17,38,19,"_statePath$split2"],[46,34,38,19],[47,4,39,4],[47,11,39,11],[48,6,40,8],[49,6,41,8,"segments"],[49,14,41,16],[49,16,41,18],[49,17,41,19],[49,18,41,20],[49,20,41,22,"require"],[49,27,41,22],[49,28,41,22,"_dependencyMap"],[49,42,41,22],[49,80,41,47,"stripBaseUrl"],[49,92,41,59],[49,94,41,61,"pathname"],[49,102,41,69],[49,104,41,71,"baseUrl"],[49,111,41,78],[49,112,41,79],[49,113,41,80,"split"],[49,118,41,85],[49,119,41,86],[49,122,41,89],[49,123,41,90],[49,124,41,91,"filter"],[49,130,41,97],[49,131,41,98,"Boolean"],[49,138,41,105],[49,139,41,106],[49,140,41,107,"map"],[49,143,41,110],[49,144,41,111,"decodeURIComponent"],[49,162,41,129],[49,163,41,130],[50,6,42,8],[51,6,43,8],[52,6,44,8,"params"],[52,12,44,14],[52,14,44,16,"decodeParams"],[52,26,44,28],[52,27,44,29,"params"],[52,33,44,35],[53,4,45,4],[53,5,45,5],[54,2,46,0],[55,2,47,0,"exports"],[55,9,47,7],[55,10,47,8,"getNormalizedStatePath"],[55,32,47,30],[55,35,47,33,"getNormalizedStatePath"],[55,57,47,55],[56,2,48,0],[56,11,48,9,"decodeParams"],[56,23,48,21,"decodeParams"],[56,24,48,22,"params"],[56,30,48,28],[56,32,48,30],[57,4,49,4],[57,8,49,10,"parsed"],[57,14,49,16],[57,17,49,19],[57,18,49,20],[57,19,49,21],[58,4,50,4],[58,13,50,4,"_ref2"],[58,18,50,4],[58,22,50,31,"Object"],[58,28,50,37],[58,29,50,38,"entries"],[58,36,50,45],[58,37,50,46,"params"],[58,43,50,52],[58,44,50,53],[58,46,50,55],[59,6,50,55],[59,10,50,55,"_ref3"],[59,15,50,55],[59,18,50,55,"_slicedToArray"],[59,32,50,55],[59,33,50,55,"_ref2"],[59,38,50,55],[60,6,50,55],[60,10,50,16,"key"],[60,13,50,19],[60,16,50,19,"_ref3"],[60,21,50,19],[61,6,50,19],[61,10,50,21,"value"],[61,15,50,26],[61,18,50,26,"_ref3"],[61,23,50,26],[62,6,51,8],[62,10,51,12],[63,8,52,12],[63,12,52,16,"key"],[63,15,52,19],[63,20,52,24],[63,28,52,32],[63,32,52,36],[63,39,52,43,"value"],[63,44,52,48],[63,49,52,53],[63,57,52,61],[63,59,52,63],[64,10,53,16,"parsed"],[64,16,53,22],[64,17,53,23,"key"],[64,20,53,26],[64,21,53,27],[64,24,53,30,"decodeParams"],[64,36,53,42],[64,37,53,43,"value"],[64,42,53,48],[64,43,53,49],[65,8,54,12],[65,9,54,13],[65,15,55,17],[65,19,55,21,"Array"],[65,24,55,26],[65,25,55,27,"isArray"],[65,32,55,34],[65,33,55,35,"value"],[65,38,55,40],[65,39,55,41],[65,41,55,43],[66,10,56,16,"parsed"],[66,16,56,22],[66,17,56,23,"key"],[66,20,56,26],[66,21,56,27],[66,24,56,30,"value"],[66,29,56,35],[66,30,56,36,"map"],[66,33,56,39],[66,34,56,41,"v"],[66,35,56,42],[66,39,56,47,"decodeURIComponent"],[66,57,56,65],[66,58,56,66,"v"],[66,59,56,67],[66,60,56,68],[66,61,56,69],[67,8,57,12],[67,9,57,13],[67,15,58,17],[68,10,59,16,"parsed"],[68,16,59,22],[68,17,59,23,"key"],[68,20,59,26],[68,21,59,27],[68,24,59,30,"decodeURIComponent"],[68,42,59,48],[68,43,59,49,"value"],[68,48,59,54],[68,49,59,55],[69,8,60,12],[70,6,61,8],[70,7,61,9],[70,8,62,8],[70,14,62,14],[71,8,63,12,"parsed"],[71,14,63,18],[71,15,63,19,"key"],[71,18,63,22],[71,19,63,23],[71,22,63,26,"value"],[71,27,63,31],[72,6,64,8],[73,4,65,4],[74,4,66,4],[74,11,66,11,"parsed"],[74,17,66,17],[75,2,67,0],[76,0,67,1],[76,3]],"functionMap":{"names":["<global>","getRouteInfoFromState","isIndexPath","getNormalizedStatePath","decodeParams","value.map$argument_0"],"mappings":"AAA;ACI;CDU;AEE;CFkB;AGE;CHS;AIE;wCCQ,4BD;CJW"}},"type":"js/module"}]}