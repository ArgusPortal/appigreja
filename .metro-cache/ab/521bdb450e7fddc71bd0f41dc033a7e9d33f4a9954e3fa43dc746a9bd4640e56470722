{"dependencies":[{"name":"./XMLHttpRequest","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}}],"key":"QTDeH3VQPtkyaHVgPCVwYEv83UE="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   */\n\n  'use strict';\n\n  var originalXHROpen = require(_dependencyMap[0], \"./XMLHttpRequest\").prototype.open;\n  var originalXHRSend = require(_dependencyMap[0], \"./XMLHttpRequest\").prototype.send;\n  var originalXHRSetRequestHeader = require(_dependencyMap[0], \"./XMLHttpRequest\").prototype.setRequestHeader;\n  var openCallback;\n  var sendCallback;\n  var requestHeaderCallback;\n  var headerReceivedCallback;\n  var responseCallback;\n  var isInterceptorEnabled = false;\n\n  /**\n   * A network interceptor which monkey-patches XMLHttpRequest methods\n   * to gather all network requests/responses, in order to show their\n   * information in the React Native inspector development tool.\n   * This supports interception with XMLHttpRequest API, including Fetch API\n   * and any other third party libraries that depend on XMLHttpRequest.\n   */\n  var XHRInterceptor = {\n    /**\n     * Invoked before XMLHttpRequest.open(...) is called.\n     */\n    setOpenCallback(callback) {\n      openCallback = callback;\n    },\n    /**\n     * Invoked before XMLHttpRequest.send(...) is called.\n     */\n    setSendCallback(callback) {\n      sendCallback = callback;\n    },\n    /**\n     * Invoked after xhr's readyState becomes xhr.HEADERS_RECEIVED.\n     */\n    setHeaderReceivedCallback(callback) {\n      headerReceivedCallback = callback;\n    },\n    /**\n     * Invoked after xhr's readyState becomes xhr.DONE.\n     */\n    setResponseCallback(callback) {\n      responseCallback = callback;\n    },\n    /**\n     * Invoked before XMLHttpRequest.setRequestHeader(...) is called.\n     */\n    setRequestHeaderCallback(callback) {\n      requestHeaderCallback = callback;\n    },\n    isInterceptorEnabled() {\n      return isInterceptorEnabled;\n    },\n    enableInterception() {\n      if (isInterceptorEnabled) {\n        return;\n      }\n      // Override `open` method for all XHR requests to intercept the request\n      // method and url, then pass them through the `openCallback`.\n      require(_dependencyMap[0], \"./XMLHttpRequest\").prototype.open = function (method, url) {\n        if (openCallback) {\n          openCallback(method, url, this);\n        }\n        originalXHROpen.apply(this, arguments);\n      };\n\n      // Override `setRequestHeader` method for all XHR requests to intercept\n      // the request headers, then pass them through the `requestHeaderCallback`.\n      require(_dependencyMap[0], \"./XMLHttpRequest\").prototype.setRequestHeader = function (header, value) {\n        if (requestHeaderCallback) {\n          requestHeaderCallback(header, value, this);\n        }\n        originalXHRSetRequestHeader.apply(this, arguments);\n      };\n\n      // Override `send` method of all XHR requests to intercept the data sent,\n      // register listeners to intercept the response, and invoke the callbacks.\n      require(_dependencyMap[0], \"./XMLHttpRequest\").prototype.send = function (data) {\n        if (sendCallback) {\n          sendCallback(data, this);\n        }\n        if (this.addEventListener) {\n          this.addEventListener('readystatechange', () => {\n            if (!isInterceptorEnabled) {\n              return;\n            }\n            if (this.readyState === this.HEADERS_RECEIVED) {\n              var contentTypeString = this.getResponseHeader('Content-Type');\n              var contentLengthString = this.getResponseHeader('Content-Length');\n              var responseContentType, responseSize;\n              if (contentTypeString) {\n                responseContentType = contentTypeString.split(';')[0];\n              }\n              if (contentLengthString) {\n                responseSize = parseInt(contentLengthString, 10);\n              }\n              if (headerReceivedCallback) {\n                headerReceivedCallback(responseContentType, responseSize, this.getAllResponseHeaders(), this);\n              }\n            }\n            if (this.readyState === this.DONE) {\n              if (responseCallback) {\n                responseCallback(this.status, this.timeout, this.response, this.responseURL, this.responseType, this);\n              }\n            }\n          }, false);\n        }\n        originalXHRSend.apply(this, arguments);\n      };\n      isInterceptorEnabled = true;\n    },\n    // Unpatch XMLHttpRequest methods and remove the callbacks.\n    disableInterception() {\n      if (!isInterceptorEnabled) {\n        return;\n      }\n      isInterceptorEnabled = false;\n      require(_dependencyMap[0], \"./XMLHttpRequest\").prototype.send = originalXHRSend;\n      require(_dependencyMap[0], \"./XMLHttpRequest\").prototype.open = originalXHROpen;\n      require(_dependencyMap[0], \"./XMLHttpRequest\").prototype.setRequestHeader = originalXHRSetRequestHeader;\n      responseCallback = null;\n      openCallback = null;\n      sendCallback = null;\n      headerReceivedCallback = null;\n      requestHeaderCallback = null;\n    }\n  };\n  module.exports = XHRInterceptor;\n});","lineCount":139,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[11,2,10,0],[11,14,10,12],[13,2,13,0],[13,6,13,6,"originalXHROpen"],[13,21,13,21],[13,24,13,24,"require"],[13,31,13,24],[13,32,13,24,"_dependencyMap"],[13,46,13,24],[13,71,13,39,"prototype"],[13,80,13,48],[13,81,13,49,"open"],[13,85,13,53],[14,2,14,0],[14,6,14,6,"originalXHRSend"],[14,21,14,21],[14,24,14,24,"require"],[14,31,14,24],[14,32,14,24,"_dependencyMap"],[14,46,14,24],[14,71,14,39,"prototype"],[14,80,14,48],[14,81,14,49,"send"],[14,85,14,53],[15,2,15,0],[15,6,15,6,"originalXHRSetRequestHeader"],[15,33,15,33],[15,36,15,36,"require"],[15,43,15,36],[15,44,15,36,"_dependencyMap"],[15,58,15,36],[15,83,15,51,"prototype"],[15,92,15,60],[15,93,15,61,"setRequestHeader"],[15,109,15,77],[16,2,17,0],[16,6,17,4,"openCallback"],[16,18,17,16],[17,2,18,0],[17,6,18,4,"sendCallback"],[17,18,18,16],[18,2,19,0],[18,6,19,4,"requestHeaderCallback"],[18,27,19,25],[19,2,20,0],[19,6,20,4,"headerReceivedCallback"],[19,28,20,26],[20,2,21,0],[20,6,21,4,"responseCallback"],[20,22,21,20],[21,2,23,0],[21,6,23,4,"isInterceptorEnabled"],[21,26,23,24],[21,29,23,27],[21,34,23,32],[23,2,25,0],[24,0,26,0],[25,0,27,0],[26,0,28,0],[27,0,29,0],[28,0,30,0],[29,0,31,0],[30,2,32,0],[30,6,32,6,"XHRInterceptor"],[30,20,32,20],[30,23,32,23],[31,4,33,2],[32,0,34,0],[33,0,35,0],[34,4,36,2,"setOpenCallback"],[34,19,36,17,"setOpenCallback"],[34,20,36,18,"callback"],[34,28,36,26],[34,30,36,28],[35,6,37,4,"openCallback"],[35,18,37,16],[35,21,37,19,"callback"],[35,29,37,27],[36,4,38,2],[36,5,38,3],[37,4,40,2],[38,0,41,0],[39,0,42,0],[40,4,43,2,"setSendCallback"],[40,19,43,17,"setSendCallback"],[40,20,43,18,"callback"],[40,28,43,26],[40,30,43,28],[41,6,44,4,"sendCallback"],[41,18,44,16],[41,21,44,19,"callback"],[41,29,44,27],[42,4,45,2],[42,5,45,3],[43,4,47,2],[44,0,48,0],[45,0,49,0],[46,4,50,2,"setHeaderReceivedCallback"],[46,29,50,27,"setHeaderReceivedCallback"],[46,30,50,28,"callback"],[46,38,50,36],[46,40,50,38],[47,6,51,4,"headerReceivedCallback"],[47,28,51,26],[47,31,51,29,"callback"],[47,39,51,37],[48,4,52,2],[48,5,52,3],[49,4,54,2],[50,0,55,0],[51,0,56,0],[52,4,57,2,"setResponseCallback"],[52,23,57,21,"setResponseCallback"],[52,24,57,22,"callback"],[52,32,57,30],[52,34,57,32],[53,6,58,4,"responseCallback"],[53,22,58,20],[53,25,58,23,"callback"],[53,33,58,31],[54,4,59,2],[54,5,59,3],[55,4,61,2],[56,0,62,0],[57,0,63,0],[58,4,64,2,"setRequestHeaderCallback"],[58,28,64,26,"setRequestHeaderCallback"],[58,29,64,27,"callback"],[58,37,64,35],[58,39,64,37],[59,6,65,4,"requestHeaderCallback"],[59,27,65,25],[59,30,65,28,"callback"],[59,38,65,36],[60,4,66,2],[60,5,66,3],[61,4,68,2,"isInterceptorEnabled"],[61,24,68,22,"isInterceptorEnabled"],[61,25,68,22],[61,27,68,25],[62,6,69,4],[62,13,69,11,"isInterceptorEnabled"],[62,33,69,31],[63,4,70,2],[63,5,70,3],[64,4,72,2,"enableInterception"],[64,22,72,20,"enableInterception"],[64,23,72,20],[64,25,72,23],[65,6,73,4],[65,10,73,8,"isInterceptorEnabled"],[65,30,73,28],[65,32,73,30],[66,8,74,6],[67,6,75,4],[68,6,76,4],[69,6,77,4],[70,6,78,4,"require"],[70,13,78,4],[70,14,78,4,"_dependencyMap"],[70,28,78,4],[70,53,78,19,"prototype"],[70,62,78,28],[70,63,78,29,"open"],[70,67,78,33],[70,70,78,36],[70,80,78,46,"method"],[70,86,78,52],[70,88,78,54,"url"],[70,91,78,57],[70,93,78,59],[71,8,79,6],[71,12,79,10,"openCallback"],[71,24,79,22],[71,26,79,24],[72,10,80,8,"openCallback"],[72,22,80,20],[72,23,80,21,"method"],[72,29,80,27],[72,31,80,29,"url"],[72,34,80,32],[72,36,80,34],[72,40,80,38],[72,41,80,39],[73,8,81,6],[74,8,82,6,"originalXHROpen"],[74,23,82,21],[74,24,82,22,"apply"],[74,29,82,27],[74,30,82,28],[74,34,82,32],[74,36,82,34,"arguments"],[74,45,82,43],[74,46,82,44],[75,6,83,4],[75,7,83,5],[77,6,85,4],[78,6,86,4],[79,6,87,4,"require"],[79,13,87,4],[79,14,87,4,"_dependencyMap"],[79,28,87,4],[79,53,87,19,"prototype"],[79,62,87,28],[79,63,87,29,"setRequestHeader"],[79,79,87,45],[79,82,87,48],[79,92,87,58,"header"],[79,98,87,64],[79,100,87,66,"value"],[79,105,87,71],[79,107,87,73],[80,8,88,6],[80,12,88,10,"requestHeaderCallback"],[80,33,88,31],[80,35,88,33],[81,10,89,8,"requestHeaderCallback"],[81,31,89,29],[81,32,89,30,"header"],[81,38,89,36],[81,40,89,38,"value"],[81,45,89,43],[81,47,89,45],[81,51,89,49],[81,52,89,50],[82,8,90,6],[83,8,91,6,"originalXHRSetRequestHeader"],[83,35,91,33],[83,36,91,34,"apply"],[83,41,91,39],[83,42,91,40],[83,46,91,44],[83,48,91,46,"arguments"],[83,57,91,55],[83,58,91,56],[84,6,92,4],[84,7,92,5],[86,6,94,4],[87,6,95,4],[88,6,96,4,"require"],[88,13,96,4],[88,14,96,4,"_dependencyMap"],[88,28,96,4],[88,53,96,19,"prototype"],[88,62,96,28],[88,63,96,29,"send"],[88,67,96,33],[88,70,96,36],[88,80,96,46,"data"],[88,84,96,50],[88,86,96,52],[89,8,97,6],[89,12,97,10,"sendCallback"],[89,24,97,22],[89,26,97,24],[90,10,98,8,"sendCallback"],[90,22,98,20],[90,23,98,21,"data"],[90,27,98,25],[90,29,98,27],[90,33,98,31],[90,34,98,32],[91,8,99,6],[92,8,100,6],[92,12,100,10],[92,16,100,14],[92,17,100,15,"addEventListener"],[92,33,100,31],[92,35,100,33],[93,10,101,8],[93,14,101,12],[93,15,101,13,"addEventListener"],[93,31,101,29],[93,32,102,10],[93,50,102,28],[93,52,103,10],[93,58,103,16],[94,12,104,12],[94,16,104,16],[94,17,104,17,"isInterceptorEnabled"],[94,37,104,37],[94,39,104,39],[95,14,105,14],[96,12,106,12],[97,12,107,12],[97,16,107,16],[97,20,107,20],[97,21,107,21,"readyState"],[97,31,107,31],[97,36,107,36],[97,40,107,40],[97,41,107,41,"HEADERS_RECEIVED"],[97,57,107,57],[97,59,107,59],[98,14,108,14],[98,18,108,20,"contentTypeString"],[98,35,108,37],[98,38,108,40],[98,42,108,44],[98,43,108,45,"getResponseHeader"],[98,60,108,62],[98,61,108,63],[98,75,108,77],[98,76,108,78],[99,14,109,14],[99,18,109,20,"contentLengthString"],[99,37,109,39],[99,40,110,16],[99,44,110,20],[99,45,110,21,"getResponseHeader"],[99,62,110,38],[99,63,110,39],[99,79,110,55],[99,80,110,56],[100,14,111,14],[100,18,111,18,"responseContentType"],[100,37,111,37],[100,39,111,39,"responseSize"],[100,51,111,51],[101,14,112,14],[101,18,112,18,"contentTypeString"],[101,35,112,35],[101,37,112,37],[102,16,113,16,"responseContentType"],[102,35,113,35],[102,38,113,38,"contentTypeString"],[102,55,113,55],[102,56,113,56,"split"],[102,61,113,61],[102,62,113,62],[102,65,113,65],[102,66,113,66],[102,67,113,67],[102,68,113,68],[102,69,113,69],[103,14,114,14],[104,14,115,14],[104,18,115,18,"contentLengthString"],[104,37,115,37],[104,39,115,39],[105,16,116,16,"responseSize"],[105,28,116,28],[105,31,116,31,"parseInt"],[105,39,116,39],[105,40,116,40,"contentLengthString"],[105,59,116,59],[105,61,116,61],[105,63,116,63],[105,64,116,64],[106,14,117,14],[107,14,118,14],[107,18,118,18,"headerReceivedCallback"],[107,40,118,40],[107,42,118,42],[108,16,119,16,"headerReceivedCallback"],[108,38,119,38],[108,39,120,18,"responseContentType"],[108,58,120,37],[108,60,121,18,"responseSize"],[108,72,121,30],[108,74,122,18],[108,78,122,22],[108,79,122,23,"getAllResponseHeaders"],[108,100,122,44],[108,101,122,45],[108,102,122,46],[108,104,123,18],[108,108,124,16],[108,109,124,17],[109,14,125,14],[110,12,126,12],[111,12,127,12],[111,16,127,16],[111,20,127,20],[111,21,127,21,"readyState"],[111,31,127,31],[111,36,127,36],[111,40,127,40],[111,41,127,41,"DONE"],[111,45,127,45],[111,47,127,47],[112,14,128,14],[112,18,128,18,"responseCallback"],[112,34,128,34],[112,36,128,36],[113,16,129,16,"responseCallback"],[113,32,129,32],[113,33,130,18],[113,37,130,22],[113,38,130,23,"status"],[113,44,130,29],[113,46,131,18],[113,50,131,22],[113,51,131,23,"timeout"],[113,58,131,30],[113,60,132,18],[113,64,132,22],[113,65,132,23,"response"],[113,73,132,31],[113,75,133,18],[113,79,133,22],[113,80,133,23,"responseURL"],[113,91,133,34],[113,93,134,18],[113,97,134,22],[113,98,134,23,"responseType"],[113,110,134,35],[113,112,135,18],[113,116,136,16],[113,117,136,17],[114,14,137,14],[115,12,138,12],[116,10,139,10],[116,11,139,11],[116,13,140,10],[116,18,141,8],[116,19,141,9],[117,8,142,6],[118,8,143,6,"originalXHRSend"],[118,23,143,21],[118,24,143,22,"apply"],[118,29,143,27],[118,30,143,28],[118,34,143,32],[118,36,143,34,"arguments"],[118,45,143,43],[118,46,143,44],[119,6,144,4],[119,7,144,5],[120,6,145,4,"isInterceptorEnabled"],[120,26,145,24],[120,29,145,27],[120,33,145,31],[121,4,146,2],[121,5,146,3],[122,4,148,2],[123,4,149,2,"disableInterception"],[123,23,149,21,"disableInterception"],[123,24,149,21],[123,26,149,24],[124,6,150,4],[124,10,150,8],[124,11,150,9,"isInterceptorEnabled"],[124,31,150,29],[124,33,150,31],[125,8,151,6],[126,6,152,4],[127,6,153,4,"isInterceptorEnabled"],[127,26,153,24],[127,29,153,27],[127,34,153,32],[128,6,154,4,"require"],[128,13,154,4],[128,14,154,4,"_dependencyMap"],[128,28,154,4],[128,53,154,19,"prototype"],[128,62,154,28],[128,63,154,29,"send"],[128,67,154,33],[128,70,154,36,"originalXHRSend"],[128,85,154,51],[129,6,155,4,"require"],[129,13,155,4],[129,14,155,4,"_dependencyMap"],[129,28,155,4],[129,53,155,19,"prototype"],[129,62,155,28],[129,63,155,29,"open"],[129,67,155,33],[129,70,155,36,"originalXHROpen"],[129,85,155,51],[130,6,156,4,"require"],[130,13,156,4],[130,14,156,4,"_dependencyMap"],[130,28,156,4],[130,53,156,19,"prototype"],[130,62,156,28],[130,63,156,29,"setRequestHeader"],[130,79,156,45],[130,82,156,48,"originalXHRSetRequestHeader"],[130,109,156,75],[131,6,157,4,"responseCallback"],[131,22,157,20],[131,25,157,23],[131,29,157,27],[132,6,158,4,"openCallback"],[132,18,158,16],[132,21,158,19],[132,25,158,23],[133,6,159,4,"sendCallback"],[133,18,159,16],[133,21,159,19],[133,25,159,23],[134,6,160,4,"headerReceivedCallback"],[134,28,160,26],[134,31,160,29],[134,35,160,33],[135,6,161,4,"requestHeaderCallback"],[135,27,161,25],[135,30,161,28],[135,34,161,32],[136,4,162,2],[137,2,163,0],[137,3,163,1],[138,2,165,0,"module"],[138,8,165,6],[138,9,165,7,"exports"],[138,16,165,14],[138,19,165,17,"XHRInterceptor"],[138,33,165,31],[139,0,165,32],[139,3]],"functionMap":{"names":["<global>","setOpenCallback","setSendCallback","setHeaderReceivedCallback","setResponseCallback","setRequestHeaderCallback","isInterceptorEnabled","enableInterception","XMLHttpRequest.prototype.open","XMLHttpRequest.prototype.setRequestHeader","XMLHttpRequest.prototype.send","addEventListener$argument_1","disableInterception"],"mappings":"AAA;ECmC;GDE;EEK;GFE;EGK;GHE;EIK;GJE;EKK;GLE;EME;GNE;EOE;oCCM;KDK;gDEI;KFK;oCGI;UCO;WDoC;KHK;GPE;EYG;GZa"}},"type":"js/module"}]}