{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":43,"index":43}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8="}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":44},"end":{"line":2,"column":46,"index":90}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g="}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":487},"end":{"line":15,"column":67,"index":554}},{"start":{"line":15,"column":0,"index":487},"end":{"line":15,"column":67,"index":554}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I="}},{"name":"./needsToReattach","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":387},"end":{"line":13,"column":52,"index":439}}],"key":"AnC4N1Crd90FP+3Mxk358neOkRo="}},{"name":"./dropHandlers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":440},"end":{"line":14,"column":46,"index":486}}],"key":"3pg09hFbTrtcJ+KzQ97dAmmPlSE="}},{"name":"./attachHandlers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":285},"end":{"line":11,"column":50,"index":335}}],"key":"3mjR74KCCo5t43evU8Hvoyi9yu0="}},{"name":"./updateHandlers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":336},"end":{"line":12,"column":50,"index":386}}],"key":"lArlpaD/5d+RB4jQyU++60NVCc0="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useDetectorUpdater = useDetectorUpdater;\n  var _react = require(_dependencyMap[0], \"react\");\n  var _reactNative = require(_dependencyMap[1], \"react-native\");\n  // Returns a function that's responsible for updating the attached gestures\n  // If the view has changed, it will reattach the handlers to the new view\n  // If the view remains the same, it will update the handlers with the new config\n  function useDetectorUpdater(state, preparedGesture, gesturesToAttach, gestureConfig, webEventHandlersRef) {\n    var forceRender = (0, require(_dependencyMap[2], \"./utils\").useForceRender)();\n    var updateAttachedGestures = (0, _react.useCallback)(\n    // skipConfigUpdate is used to prevent unnecessary updates when only checking if the view has changed\n    skipConfigUpdate => {\n      // If the underlying view has changed we need to reattach handlers to the new view\n      var viewTag = (0, _reactNative.findNodeHandle)(state.viewRef);\n      var didUnderlyingViewChange = viewTag !== state.previousViewTag;\n      if (didUnderlyingViewChange || (0, require(_dependencyMap[3], \"./needsToReattach\").needsToReattach)(preparedGesture, gesturesToAttach)) {\n        (0, require(_dependencyMap[2], \"./utils\").validateDetectorChildren)(state.viewRef);\n        (0, require(_dependencyMap[4], \"./dropHandlers\").dropHandlers)(preparedGesture);\n        (0, require(_dependencyMap[5], \"./attachHandlers\").attachHandlers)({\n          preparedGesture,\n          gestureConfig,\n          gesturesToAttach,\n          webEventHandlersRef,\n          viewTag\n        });\n        if (didUnderlyingViewChange) {\n          state.previousViewTag = viewTag;\n          state.forceRebuildReanimatedEvent = true;\n          forceRender();\n        }\n      } else if (!skipConfigUpdate) {\n        (0, require(_dependencyMap[6], \"./updateHandlers\").updateHandlers)(preparedGesture, gestureConfig, gesturesToAttach);\n      }\n    }, [forceRender, gestureConfig, gesturesToAttach, preparedGesture, state, webEventHandlersRef]);\n    return updateAttachedGestures;\n  }\n});","lineCount":40,"map":[[6,2,1,0],[6,6,1,0,"_react"],[6,12,1,0],[6,15,1,0,"require"],[6,22,1,0],[6,23,1,0,"_dependencyMap"],[6,37,1,0],[7,2,2,0],[7,6,2,0,"_reactNative"],[7,18,2,0],[7,21,2,0,"require"],[7,28,2,0],[7,29,2,0,"_dependencyMap"],[7,43,2,0],[8,2,17,0],[9,2,18,0],[10,2,19,0],[11,2,20,7],[11,11,20,16,"useDetectorUpdater"],[11,29,20,34,"useDetectorUpdater"],[11,30,21,2,"state"],[11,35,21,29],[11,37,22,2,"preparedGesture"],[11,52,22,39],[11,54,23,2,"gesturesToAttach"],[11,70,23,33],[11,72,24,2,"gestureConfig"],[11,85,24,46],[11,87,25,2,"webEventHandlersRef"],[11,106,25,55],[11,108,26,2],[12,4,27,2],[12,8,27,8,"forceRender"],[12,19,27,19],[12,22,27,22],[12,26,27,22,"useForceRender"],[12,52,27,22],[12,53,27,22,"useForceRender"],[12,78,27,36],[12,80,27,37],[12,81,27,38],[13,4,28,2],[13,8,28,8,"updateAttachedGestures"],[13,30,28,30],[13,33,28,33],[13,37,28,33,"useCallback"],[13,55,28,44],[14,4,29,4],[15,4,30,5,"skipConfigUpdate"],[15,20,30,31],[15,24,30,36],[16,6,31,6],[17,6,32,6],[17,10,32,12,"viewTag"],[17,17,32,19],[17,20,32,22],[17,24,32,22,"findNodeHandle"],[17,51,32,36],[17,53,32,37,"state"],[17,58,32,42],[17,59,32,43,"viewRef"],[17,66,32,50],[17,67,32,61],[18,6,33,6],[18,10,33,12,"didUnderlyingViewChange"],[18,33,33,35],[18,36,33,38,"viewTag"],[18,43,33,45],[18,48,33,50,"state"],[18,53,33,55],[18,54,33,56,"previousViewTag"],[18,69,33,71],[19,6,35,6],[19,10,36,8,"didUnderlyingViewChange"],[19,33,36,31],[19,37,37,8],[19,41,37,8,"needsToReattach"],[19,67,37,8],[19,68,37,8,"needsToReattach"],[19,104,37,23],[19,106,37,24,"preparedGesture"],[19,121,37,39],[19,123,37,41,"gesturesToAttach"],[19,139,37,57],[19,140,37,58],[19,142,38,8],[20,8,39,8],[20,12,39,8,"validateDetectorChildren"],[20,38,39,8],[20,39,39,8,"validateDetectorChildren"],[20,74,39,32],[20,76,39,33,"state"],[20,81,39,38],[20,82,39,39,"viewRef"],[20,89,39,46],[20,90,39,47],[21,8,40,8],[21,12,40,8,"dropHandlers"],[21,38,40,8],[21,39,40,8,"dropHandlers"],[21,69,40,20],[21,71,40,21,"preparedGesture"],[21,86,40,36],[21,87,40,37],[22,8,41,8],[22,12,41,8,"attachHandlers"],[22,38,41,8],[22,39,41,8,"attachHandlers"],[22,73,41,22],[22,75,41,23],[23,10,42,10,"preparedGesture"],[23,25,42,25],[24,10,43,10,"gestureConfig"],[24,23,43,23],[25,10,44,10,"gesturesToAttach"],[25,26,44,26],[26,10,45,10,"webEventHandlersRef"],[26,29,45,29],[27,10,46,10,"viewTag"],[28,8,47,8],[28,9,47,9],[28,10,47,10],[29,8,49,8],[29,12,49,12,"didUnderlyingViewChange"],[29,35,49,35],[29,37,49,37],[30,10,50,10,"state"],[30,15,50,15],[30,16,50,16,"previousViewTag"],[30,31,50,31],[30,34,50,34,"viewTag"],[30,41,50,41],[31,10,51,10,"state"],[31,15,51,15],[31,16,51,16,"forceRebuildReanimatedEvent"],[31,43,51,43],[31,46,51,46],[31,50,51,50],[32,10,52,10,"forceRender"],[32,21,52,21],[32,22,52,22],[32,23,52,23],[33,8,53,8],[34,6,54,6],[34,7,54,7],[34,13,54,13],[34,17,54,17],[34,18,54,18,"skipConfigUpdate"],[34,34,54,34],[34,36,54,36],[35,8,55,8],[35,12,55,8,"updateHandlers"],[35,38,55,8],[35,39,55,8,"updateHandlers"],[35,73,55,22],[35,75,55,23,"preparedGesture"],[35,90,55,38],[35,92,55,40,"gestureConfig"],[35,105,55,53],[35,107,55,55,"gesturesToAttach"],[35,123,55,71],[35,124,55,72],[36,6,56,6],[37,4,57,4],[37,5,57,5],[37,7,58,4],[37,8,59,6,"forceRender"],[37,19,59,17],[37,21,60,6,"gestureConfig"],[37,34,60,19],[37,36,61,6,"gesturesToAttach"],[37,52,61,22],[37,54,62,6,"preparedGesture"],[37,69,62,21],[37,71,63,6,"state"],[37,76,63,11],[37,78,64,6,"webEventHandlersRef"],[37,97,64,25],[37,98,66,2],[37,99,66,3],[38,4,68,2],[38,11,68,9,"updateAttachedGestures"],[38,33,68,31],[39,2,69,0],[40,0,69,1],[40,3]],"functionMap":{"names":["<global>","useDetectorUpdater","updateAttachedGestures"],"mappings":"AAA;OCmB;ICU;KD2B;CDY"}},"type":"js/module"}]}