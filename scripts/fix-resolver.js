/**
 * Script para diagnosticar e corrigir problemas de resolu√ß√£o de m√≥dulos no Metro
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const projectRoot = path.resolve(__dirname, '..');
const entryJsPath = path.join(projectRoot, 'entry.js');
const nodeModulesPath = path.join(projectRoot, 'node_modules');

console.log('üîç Iniciando diagn√≥stico de resolu√ß√£o de m√≥dulos...');

// Verificar arquivo entry.js
console.log('\nüìã Verificando entry.js...');
if (fs.existsSync(entryJsPath)) {
  const stats = fs.statSync(entryJsPath);
  console.log(`‚úÖ entry.js encontrado (${stats.size} bytes)`);
  
  // Exibir o conte√∫do para debug
  const content = fs.readFileSync(entryJsPath, 'utf8');
  console.log('üìÑ Conte√∫do do entry.js:');
  console.log('----------------------------------------');
  console.log(content);
  console.log('----------------------------------------');
} else {
  console.error('‚ùå entry.js n√£o encontrado!');
  
  console.log('üîß Criando novo entry.js...');
  const entryContent = `/**
 * Arquivo de entrada personalizado que serve como ponte para o expo-router
 * Criado por fix-resolver.js em ${new Date().toISOString()}
 */

// Redirecionando para o entry do expo-router
module.exports = require('expo-router/entry-classic');

// Importamos diretamente desta forma para garantir que o Metro possa resolver o m√≥dulo
require('expo-router');

// Hash √∫nico para garantir mudan√ßa no SHA-1: ${Date.now().toString(36)}
`;
  
  try {
    fs.writeFileSync(entryJsPath, entryContent, { mode: 0o666 });
    console.log('‚úÖ entry.js criado com sucesso!');
  } catch (e) {
    console.error(`‚ùå Erro ao criar entry.js: ${e.message}`);
  }
}

// Verificar expo-router/entry
console.log('\nüìã Verificando expo-router/entry...');
const expoRouterPath = path.join(nodeModulesPath, 'expo-router');
const expoRouterEntryPath = path.join(expoRouterPath, 'entry.js');

if (fs.existsSync(expoRouterPath)) {
  console.log(`‚úÖ Diret√≥rio expo-router encontrado: ${expoRouterPath}`);
  
  if (fs.existsSync(expoRouterEntryPath)) {
    console.log(`‚úÖ expo-router/entry.js encontrado: ${expoRouterEntryPath}`);
    
    try {
      const content = fs.readFileSync(expoRouterEntryPath, 'utf8');
      console.log(`‚úÖ Tamanho do arquivo: ${content.length} bytes`);
      console.log('üìÑ Primeiras linhas:');
      console.log(content.substring(0, 200) + '...');
    } catch (e) {
      console.error(`‚ùå Erro ao ler expo-router/entry.js: ${e.message}`);
    }
  } else {
    console.error('‚ùå expo-router/entry.js n√£o encontrado!');
    
    // Verificar se expo-router/entry-classic.js existe
    const expoRouterEntryClassicPath = path.join(expoRouterPath, 'entry-classic.js');
    if (fs.existsSync(expoRouterEntryClassicPath)) {
      console.log(`‚úÖ Encontrado expo-router/entry-classic.js: ${expoRouterEntryClassicPath}`);
      
      // Criar um link para entry.js
      console.log('üîß Criando entry.js baseado em entry-classic.js...');
      const entryClassicContent = fs.readFileSync(expoRouterEntryClassicPath, 'utf8');
      try {
        fs.writeFileSync(expoRouterEntryPath, entryClassicContent);
        console.log('‚úÖ expo-router/entry.js criado com sucesso!');
      } catch (e) {
        console.error(`‚ùå Erro ao criar expo-router/entry.js: ${e.message}`);
      }
    } else {
      console.error('‚ùå expo-router/entry-classic.js tamb√©m n√£o encontrado!');
    }
  }
} else {
  console.error('‚ùå Diret√≥rio expo-router n√£o encontrado!');
}

// Verificar m√≥dulos cr√≠ticos
console.log('\nüìã Verificando m√≥dulos cr√≠ticos...');
const criticalModules = [
  'expo',
  'expo-linking',
  'expo-router',
  'react-native',
  '@babel/runtime'
];

for (const module of criticalModules) {
  const modulePath = path.join(nodeModulesPath, module);
  
  if (fs.existsSync(modulePath)) {
    const packageJsonPath = path.join(modulePath, 'package.json');
    if (fs.existsSync(packageJsonPath)) {
      try {
        const packageJson = require(packageJsonPath);
        console.log(`‚úÖ ${module} v${packageJson.version} encontrado`);
      } catch {
        console.log(`‚úÖ ${module} encontrado (vers√£o desconhecida)`);
      }
    } else {
      console.log(`‚ö†Ô∏è ${module} encontrado, mas sem package.json`);
    }
  } else {
    console.error(`‚ùå M√≥dulo cr√≠tico n√£o encontrado: ${module}`);
  }
}

// Adicionar diagn√≥stico espec√≠fico do erro "Cannot read properties of undefined (reading 'type')"
console.log('\nüîç Verificando poss√≠veis causas do erro "Cannot read properties of undefined (reading \'type\')"...');

// Verificar se o metro.config.js tem implementa√ß√£o correta do resolveRequest
const metroConfigPath = path.join(projectRoot, 'metro.config.js');
if (fs.existsSync(metroConfigPath)) {
  const metroConfig = fs.readFileSync(metroConfigPath, 'utf8');
  
  // Verificar se o resolver retorna undefined em algum lugar
  if (metroConfig.includes('return undefined') || 
      metroConfig.match(/return\s+;/) ||
      metroConfig.includes('originalResolveRequest(context, moduleName, platform)')) {
    console.warn('‚ö†Ô∏è metro.config.js pode estar usando um padr√£o de resolu√ß√£o que causa o erro "Cannot read properties of undefined (reading \'type\')"');
    console.log('   Recomenda√ß√£o: Modifique o resolveRequest para retornar null em vez de undefined para usar o resolver padr√£o do Metro');
  }

  // Verificar se estamos usando o correto retorno para fallback
  if (!metroConfig.includes('return null')) {
    console.warn('‚ö†Ô∏è metro.config.js n√£o est√° retornando null para fallbacks. Isto pode causar o erro "Cannot read properties of undefined (reading \'type\')"');
  } else {
    console.log('‚úÖ metro.config.js est√° usando return null como fallback, o que √© correto');
  }
}

// Verificar vers√£o do Metro
try {
  const metroPackageJsonPath = path.join(nodeModulesPath, 'metro/package.json');
  if (fs.existsSync(metroPackageJsonPath)) {
    const metroPackage = require(metroPackageJsonPath);
    console.log(`üìä Vers√£o do Metro: ${metroPackage.version}`);
    // Verificar se √© uma vers√£o conhecida por ter problemas
    if (metroPackage.version.startsWith('0.')) {
      console.warn(`‚ö†Ô∏è Vers√£o do Metro ${metroPackage.version} pode ter problemas conhecidos de resolu√ß√£o. Considere atualizar.`);
    }
  } else {
    console.error('‚ùå N√£o foi poss√≠vel encontrar o pacote do Metro');
  }
} catch (e) {
  console.error('‚ùå Erro ao verificar vers√£o do Metro:', e.message);
}

// Exibir informa√ß√µes de diagn√≥stico
console.log('\nüìã Informa√ß√µes de diagn√≥stico:');
console.log(`üìå Node.js: ${process.version}`);
console.log(`üìå Sistema operacional: ${process.platform} ${process.arch}`);
console.log(`üìå Diret√≥rio do projeto: ${projectRoot}`);

console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
console.log('\nPara resolver problemas de Metro, execute:');
console.log('1. npm run clean-cache');
console.log('2. node scripts/fix-entry-js.js');
console.log('3. npm run metro-fix');
console.log('4. npm run android-fixed');
